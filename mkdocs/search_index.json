{
    "docs": [
        {
            "location": "/", 
            "text": "PageBot\n\n\nScripted page layout program, as application inside DrawBot. Test 2.", 
            "title": "Home"
        }, 
        {
            "location": "/#pagebot", 
            "text": "Scripted page layout program, as application inside DrawBot. Test 2.", 
            "title": "PageBot"
        }, 
        {
            "location": "/howto/", 
            "text": "How to...\n\n\nExample scripts, how to do a specific task or explaining a single PageBot functions.\n\n\nAlign elements\n\n\n\nThe script shows the different alignment conditions. \nLeft2Left()\n goes to the left padding. \nLeft2LeftSide()\n goes to the left side of the document.\n\npage.solve()\n tries to solve any condition that does not fit the defined optimal value.\n\n\n\n\nThe Variable UI window shows how to implement checkbox and slider to manipulate certain values in the page. \n\n\nScale an image (DrawBot)\n\n\nSince image scaling in DrawBot needs to be done by canvas scaling, the position of the image needs to be scaled in reverse. This examples shows how to do it.\n\n\n\n\nSierpinski Square (DrawBot)\n\n\nExample of an animated gif in DrawBot.\n\n\n\n\nDraw Red Rectangle Center Page\n\n\nSimple demo to show the positioning of a colored rectangle centered on the page. Also the alignment origin of the rectangle is centered. The view draws cropmarks, page frame and rectangle origin marker.\n\n\n\n\nDraw View Page Frame\n\n\nSimple test to show the working of view and page. Option Variable checkbox to set the origin to top or bottom.\n\n\n\n\nDraw Quadratic Glyph\n\n\nShows how to load a Truetype font and draw a glyph with quadratic B\u00e9zier curves with the cubic B\u00e9zier curves that PageBot uses.", 
            "title": "How To"
        }, 
        {
            "location": "/howto/#how-to", 
            "text": "Example scripts, how to do a specific task or explaining a single PageBot functions.", 
            "title": "How to..."
        }, 
        {
            "location": "/howto/#align-elements", 
            "text": "The script shows the different alignment conditions.  Left2Left()  goes to the left padding.  Left2LeftSide()  goes to the left side of the document. page.solve()  tries to solve any condition that does not fit the defined optimal value.   The Variable UI window shows how to implement checkbox and slider to manipulate certain values in the page.", 
            "title": "Align elements"
        }, 
        {
            "location": "/howto/#scale-an-image-drawbot", 
            "text": "Since image scaling in DrawBot needs to be done by canvas scaling, the position of the image needs to be scaled in reverse. This examples shows how to do it.", 
            "title": "Scale an image (DrawBot)"
        }, 
        {
            "location": "/howto/#sierpinski-square-drawbot", 
            "text": "Example of an animated gif in DrawBot.", 
            "title": "Sierpinski Square (DrawBot)"
        }, 
        {
            "location": "/howto/#draw-red-rectangle-center-page", 
            "text": "Simple demo to show the positioning of a colored rectangle centered on the page. Also the alignment origin of the rectangle is centered. The view draws cropmarks, page frame and rectangle origin marker.", 
            "title": "Draw Red Rectangle Center Page"
        }, 
        {
            "location": "/howto/#draw-view-page-frame", 
            "text": "Simple test to show the working of view and page. Option Variable checkbox to set the origin to top or bottom.", 
            "title": "Draw View Page Frame"
        }, 
        {
            "location": "/howto/#draw-quadratic-glyph", 
            "text": "Shows how to load a Truetype font and draw a glyph with quadratic B\u00e9zier curves with the cubic B\u00e9zier curves that PageBot uses.", 
            "title": "Draw Quadratic Glyph"
        }, 
        {
            "location": "/about/", 
            "text": "Auras nil faveas\n\n\nAmbo ut\n\n\nAbout us. paterni faventibus Aeneas. Intrat quod perfregit praeterit et cernis antris:\nterra at \nfavillae adquirit\n erat.\n\n\nSolitos talia\n\n\nCreverunt si domino omen. Phineus tibi mea!\n\n\n\n\nNefandos flores adest in signa salutantum dederant pacis aures corpus: cum\ncircumspicit esse desiluit oblitus genetrixque illa? Antistite Cyane; dubitare\ncausam \nquidque\n, hic illi atria mactatos nepos. Visa \ncitharam\n certam, me\ncum et Chiae Minervae Phrygum. Quisquis veluti \nille super nec\n atque \nsua\nverum et\n pater palluerat. Pariter\nmulti hanc annos \ningens\n traditur pascere terra, rexerat quae quidem!\n\n\n\n\nSubit a noxque quod\n\n\nQuam additis. Petebamus igne imbri iudice corripuere inquirit hederis: inputat\nper suis, erat mihi! Oracula enim sui Telamone sortem, credere est soror\nsolidorum.\n\n\n\n\nAeolidis Scorpion rutilis cunctae cruor levatus adsuetaque\n\n\nIniquis petit me adspicit imis vidisse harena\n\n\nIgnotae sumit et tu mutavit iam tympana\n\n\n\n\nSerpentem flamine Typhoea diverso sparsa\n\n\nSidera ingenium aliquos quam nubila non, tu \nCoronida\n, voce? Gramine facundia\nne narrat undas; o arsit hoc Ampycides caelebs est in praepetibus quacumque\nvellent Haud. Erysicthone litore Libys mutata vitatumque, sed coetus memini,\nsolitum.\n\n\nCum et fecunda quidem se nondum caelumque\n\n\nUndis ubi saepe, nec Europa enim formae non reclusit. Ante medium mea ocius \nea\nsacraque\n non dextram pennas amictus et posset. Terunt sibi cum deficiunt!\n\n\nAliisque figentem in illius ut cognovit mater! Festum a voverat prosilit somni\nmovet continui vidi in corpora fraudem ferenda \ncaret\n, est vix celeremque\ndiurnis petit. Dabitis ilia! Quam se votis; vix nova sub nec radiis dubium.", 
            "title": "About"
        }, 
        {
            "location": "/about/#auras-nil-faveas", 
            "text": "", 
            "title": "Auras nil faveas"
        }, 
        {
            "location": "/about/#ambo-ut", 
            "text": "About us. paterni faventibus Aeneas. Intrat quod perfregit praeterit et cernis antris:\nterra at  favillae adquirit  erat.", 
            "title": "Ambo ut"
        }, 
        {
            "location": "/about/#solitos-talia", 
            "text": "Creverunt si domino omen. Phineus tibi mea!   Nefandos flores adest in signa salutantum dederant pacis aures corpus: cum\ncircumspicit esse desiluit oblitus genetrixque illa? Antistite Cyane; dubitare\ncausam  quidque , hic illi atria mactatos nepos. Visa  citharam  certam, me\ncum et Chiae Minervae Phrygum. Quisquis veluti  ille super nec  atque  sua\nverum et  pater palluerat. Pariter\nmulti hanc annos  ingens  traditur pascere terra, rexerat quae quidem!", 
            "title": "Solitos talia"
        }, 
        {
            "location": "/about/#subit-a-noxque-quod", 
            "text": "Quam additis. Petebamus igne imbri iudice corripuere inquirit hederis: inputat\nper suis, erat mihi! Oracula enim sui Telamone sortem, credere est soror\nsolidorum.   Aeolidis Scorpion rutilis cunctae cruor levatus adsuetaque  Iniquis petit me adspicit imis vidisse harena  Ignotae sumit et tu mutavit iam tympana", 
            "title": "Subit a noxque quod"
        }, 
        {
            "location": "/about/#serpentem-flamine-typhoea-diverso-sparsa", 
            "text": "Sidera ingenium aliquos quam nubila non, tu  Coronida , voce? Gramine facundia\nne narrat undas; o arsit hoc Ampycides caelebs est in praepetibus quacumque\nvellent Haud. Erysicthone litore Libys mutata vitatumque, sed coetus memini,\nsolitum.", 
            "title": "Serpentem flamine Typhoea diverso sparsa"
        }, 
        {
            "location": "/about/#cum-et-fecunda-quidem-se-nondum-caelumque", 
            "text": "Undis ubi saepe, nec Europa enim formae non reclusit. Ante medium mea ocius  ea\nsacraque  non dextram pennas amictus et posset. Terunt sibi cum deficiunt!  Aliisque figentem in illius ut cognovit mater! Festum a voverat prosilit somni\nmovet continui vidi in corpora fraudem ferenda  caret , est vix celeremque\ndiurnis petit. Dabitis ilia! Quam se votis; vix nova sub nec radiis dubium.", 
            "title": "Cum et fecunda quidem se nondum caelumque"
        }, 
        {
            "location": "/pagebot/", 
            "text": "pagebot\n\n\nClasses\n\n\n\n\npagebot.composer\n\n\npagebot.document\n\n\npagebot.style\n\n\npagebot.typesetter\n\n\n\n\nModules\n\n\n\n\npagebot.md\n\n\npagebot.elements\n\n\npagebot.builders\n\n\npagebot.contributions\n\n\npagebot.interaction\n\n\npagebot.publications\n\n\npagebot.toolbox\n\n\npagebot.fonttoolbox\n\n\npagebot.conditions\n\n\n\n\nFunctions\n\n\nfunction h2ch\n\n\nfunction getRootPath\n\n\nAnswer the root path of the pagebot module.\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nfunction cy2y\n\n\nTransform from column y value to y value, using the e.css for colunn values.\n\n\nGradient\n\n\nAs linear gradient (startRadius or endRadius not set):\nstartPoint as (x, y)\nendPoint as (x, y)\ncolors as a list of colors, described similary as fill\nlocations of each color as a list of floats. (optionally)\nSetting a gradient will ignore the fill.\n\n\nAs radial gradiens (startRadius and endRadius are set):\nstartPoint as (x, y)\nendPoint as (x, y)\ncolors as a list of colors, described similary as fill\nlocations of each color as a list of floats. (optionally)\nstartRadius radius around the startPoint in degrees (optionally)\nendRadius radius around the endPoint in degrees (optionally)\nSetting a gradient will ignore the fill.\n\n\nfunction cd2d\n\n\nfunction d2cd\n\n\nfunction find\n\n\nPerform a dynamic find the named element(s) in self.elements. Don't include self.\nEither name or pattern should be defined.\n\n\nBaseContext\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction cz2z\n\n\nfunction textBoxBaseLines\n\n\nAnswer a list of (x,y) positions of all line starts in the box. This function may become part\nof standard DrawBot in the near future.\n\n\nfunction ch2h\n\n\nfunction getMarker\n\n\nAnswer a formatted string with markerId that can be used as non-display marker.\nThis way the Composer can find the position of markers in text boxes, after\nFS-slicing has been done. Note there is always a very small \"white-space\"\nadded to the string, so there is a potential difference in width that matters.\nFor that reason markers should not be changed after slicing (which would theoretically\nalter the flow of the FormattedString in an box) and the markerId and amount/length\nof args should be kept as small as possible.\nNote that there is a potential problem of slicing through the argument string at\nthe end of a textBox. That is another reason to keep the length of the arguments short.\nAnd not to use any spaces, etc. inside the markerId.\nPossible slicing through line-endings is not a problem, as the raw string ignores them.\n\n\nfunction textPositionSearch\n\n\nfunction setGradient\n\n\nDefine the gradient call to match the size of element e., Gradient position\nis from the origin of the page, so we need the current origin of e.\n\n\nMARKER_PATTERN\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction getGlobals\n\n\nIn order to let PageBot scripts and/applications exchange information, without the\nneed to save as files, the pbglobals module supports the storage of non-persistent information.\nThis way, applications with Vanilla windows can be used as UI for scripts that perform as batch process.\nNote that it is up to the responsibilty of individual scripts to create uniqued ids for\nattributes. Also they need to know from each other, in case information is exchanged.\n\n\nfunction css\n\n\nAnswer the named style values. Search in optional style dict first, otherwise up the\nparent tree of styles in element e. Both e and style can be None. In that case None is answered.\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\ndivision\n\n\nfunction y2cy\n\n\nTransform from y value to column y value, using the e.css for colunn values.\n\n\nfunction deepFind\n\n\nPerform a dynamic deep find the for all elements with the name. Don't include self.\nEither name or pattern should be defined.\n\n\nfunction cw2w\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nfunction z2cz\n\n\nTransform from z value to column z value, using the e.css for colunn values.\n\n\nShadow\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nfunction setShadow\n\n\nfunction findMarkers\n\n\nAnswer a dictionary of markers with their arguments in a given FormattedString.\n\n\npbGlobals\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction baseline2y\n\n\nConvert columns index and line index to page position. Answered (x, y) is point position based on\nmarginTop + yIndex*baseLine.\n\n\nFIND_FS_MARKERS\n\n\nCompiled regular expression objects\n\n\nGlobals\n\n\nfunction x2cx\n\n\nTransform from y value to column y value, using the e.css for colunn values.\n\n\nfunction getFontPath\n\n\nAnswer the standard font path of the pagebot module.\n\n\nfunction w2cw\n\n\nfunction cx2x", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/#pagebot", 
            "text": "", 
            "title": "pagebot"
        }, 
        {
            "location": "/pagebot/#classes", 
            "text": "pagebot.composer  pagebot.document  pagebot.style  pagebot.typesetter", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/#modules", 
            "text": "pagebot.md  pagebot.elements  pagebot.builders  pagebot.contributions  pagebot.interaction  pagebot.publications  pagebot.toolbox  pagebot.fonttoolbox  pagebot.conditions", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/#function-h2ch", 
            "text": "", 
            "title": "function h2ch"
        }, 
        {
            "location": "/pagebot/#function-getrootpath", 
            "text": "Answer the root path of the pagebot module.", 
            "title": "function getRootPath"
        }, 
        {
            "location": "/pagebot/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/#function-cy2y", 
            "text": "Transform from column y value to y value, using the e.css for colunn values.", 
            "title": "function cy2y"
        }, 
        {
            "location": "/pagebot/#gradient", 
            "text": "As linear gradient (startRadius or endRadius not set):\nstartPoint as (x, y)\nendPoint as (x, y)\ncolors as a list of colors, described similary as fill\nlocations of each color as a list of floats. (optionally)\nSetting a gradient will ignore the fill.  As radial gradiens (startRadius and endRadius are set):\nstartPoint as (x, y)\nendPoint as (x, y)\ncolors as a list of colors, described similary as fill\nlocations of each color as a list of floats. (optionally)\nstartRadius radius around the startPoint in degrees (optionally)\nendRadius radius around the endPoint in degrees (optionally)\nSetting a gradient will ignore the fill.", 
            "title": "Gradient"
        }, 
        {
            "location": "/pagebot/#function-cd2d", 
            "text": "", 
            "title": "function cd2d"
        }, 
        {
            "location": "/pagebot/#function-d2cd", 
            "text": "", 
            "title": "function d2cd"
        }, 
        {
            "location": "/pagebot/#function-find", 
            "text": "Perform a dynamic find the named element(s) in self.elements. Don't include self.\nEither name or pattern should be defined.", 
            "title": "function find"
        }, 
        {
            "location": "/pagebot/#basecontext", 
            "text": "", 
            "title": "BaseContext"
        }, 
        {
            "location": "/pagebot/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/#function-cz2z", 
            "text": "", 
            "title": "function cz2z"
        }, 
        {
            "location": "/pagebot/#function-textboxbaselines", 
            "text": "Answer a list of (x,y) positions of all line starts in the box. This function may become part\nof standard DrawBot in the near future.", 
            "title": "function textBoxBaseLines"
        }, 
        {
            "location": "/pagebot/#function-ch2h", 
            "text": "", 
            "title": "function ch2h"
        }, 
        {
            "location": "/pagebot/#function-getmarker", 
            "text": "Answer a formatted string with markerId that can be used as non-display marker.\nThis way the Composer can find the position of markers in text boxes, after\nFS-slicing has been done. Note there is always a very small \"white-space\"\nadded to the string, so there is a potential difference in width that matters.\nFor that reason markers should not be changed after slicing (which would theoretically\nalter the flow of the FormattedString in an box) and the markerId and amount/length\nof args should be kept as small as possible.\nNote that there is a potential problem of slicing through the argument string at\nthe end of a textBox. That is another reason to keep the length of the arguments short.\nAnd not to use any spaces, etc. inside the markerId.\nPossible slicing through line-endings is not a problem, as the raw string ignores them.", 
            "title": "function getMarker"
        }, 
        {
            "location": "/pagebot/#function-textpositionsearch", 
            "text": "", 
            "title": "function textPositionSearch"
        }, 
        {
            "location": "/pagebot/#function-setgradient", 
            "text": "Define the gradient call to match the size of element e., Gradient position\nis from the origin of the page, so we need the current origin of e.", 
            "title": "function setGradient"
        }, 
        {
            "location": "/pagebot/#marker_pattern", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "MARKER_PATTERN"
        }, 
        {
            "location": "/pagebot/#function-getglobals", 
            "text": "In order to let PageBot scripts and/applications exchange information, without the\nneed to save as files, the pbglobals module supports the storage of non-persistent information.\nThis way, applications with Vanilla windows can be used as UI for scripts that perform as batch process.\nNote that it is up to the responsibilty of individual scripts to create uniqued ids for\nattributes. Also they need to know from each other, in case information is exchanged.", 
            "title": "function getGlobals"
        }, 
        {
            "location": "/pagebot/#function-css", 
            "text": "Answer the named style values. Search in optional style dict first, otherwise up the\nparent tree of styles in element e. Both e and style can be None. In that case None is answered.", 
            "title": "function css"
        }, 
        {
            "location": "/pagebot/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/#function-y2cy", 
            "text": "Transform from y value to column y value, using the e.css for colunn values.", 
            "title": "function y2cy"
        }, 
        {
            "location": "/pagebot/#function-deepfind", 
            "text": "Perform a dynamic deep find the for all elements with the name. Don't include self.\nEither name or pattern should be defined.", 
            "title": "function deepFind"
        }, 
        {
            "location": "/pagebot/#function-cw2w", 
            "text": "", 
            "title": "function cw2w"
        }, 
        {
            "location": "/pagebot/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/#function-z2cz", 
            "text": "Transform from z value to column z value, using the e.css for colunn values.", 
            "title": "function z2cz"
        }, 
        {
            "location": "/pagebot/#shadow", 
            "text": "", 
            "title": "Shadow"
        }, 
        {
            "location": "/pagebot/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/#function-setshadow", 
            "text": "", 
            "title": "function setShadow"
        }, 
        {
            "location": "/pagebot/#function-findmarkers", 
            "text": "Answer a dictionary of markers with their arguments in a given FormattedString.", 
            "title": "function findMarkers"
        }, 
        {
            "location": "/pagebot/#pbglobals", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "pbGlobals"
        }, 
        {
            "location": "/pagebot/#function-baseline2y", 
            "text": "Convert columns index and line index to page position. Answered (x, y) is point position based on\nmarginTop + yIndex*baseLine.", 
            "title": "function baseline2y"
        }, 
        {
            "location": "/pagebot/#find_fs_markers", 
            "text": "Compiled regular expression objects", 
            "title": "FIND_FS_MARKERS"
        }, 
        {
            "location": "/pagebot/#globals", 
            "text": "", 
            "title": "Globals"
        }, 
        {
            "location": "/pagebot/#function-x2cx", 
            "text": "Transform from y value to column y value, using the e.css for colunn values.", 
            "title": "function x2cx"
        }, 
        {
            "location": "/pagebot/#function-getfontpath", 
            "text": "Answer the standard font path of the pagebot module.", 
            "title": "function getFontPath"
        }, 
        {
            "location": "/pagebot/#function-w2cw", 
            "text": "", 
            "title": "function w2cw"
        }, 
        {
            "location": "/pagebot/#function-cx2x", 
            "text": "", 
            "title": "function cx2x"
        }, 
        {
            "location": "/pagebot/composer/", 
            "text": "composer\n\n\nFunctions\n\n\nComposer\n\n\nA Composer takes a galley and tries to make a \u201cnice\u201d layout (on existing or new document pages),\nby taking the elements from the galley pasteboard and finding the best place in pages, e.g. in\npage-flows that are copied from their templates.\nIf necessary elements can be split, new elements can be made on the page and element can be\nreshaped byt width and height, if that results in better placements.", 
            "title": "Composer"
        }, 
        {
            "location": "/pagebot/composer/#composer", 
            "text": "", 
            "title": "composer"
        }, 
        {
            "location": "/pagebot/composer/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/composer/#composer_1", 
            "text": "A Composer takes a galley and tries to make a \u201cnice\u201d layout (on existing or new document pages),\nby taking the elements from the galley pasteboard and finding the best place in pages, e.g. in\npage-flows that are copied from their templates.\nIf necessary elements can be split, new elements can be made on the page and element can be\nreshaped byt width and height, if that results in better placements.", 
            "title": "Composer"
        }, 
        {
            "location": "/pagebot/document/", 
            "text": "document\n\n\nFunctions\n\n\nDocument\n\n\nA Document is just another kind of container.\n\n\nBOTTOM\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nSingleView\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nThumbView\n\n\nScore\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\nPage\n\n\nDefaultView\n\n\nTOP\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Document"
        }, 
        {
            "location": "/pagebot/document/#document", 
            "text": "", 
            "title": "document"
        }, 
        {
            "location": "/pagebot/document/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/document/#document_1", 
            "text": "A Document is just another kind of container.", 
            "title": "Document"
        }, 
        {
            "location": "/pagebot/document/#bottom", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "BOTTOM"
        }, 
        {
            "location": "/pagebot/document/#singleview", 
            "text": "", 
            "title": "SingleView"
        }, 
        {
            "location": "/pagebot/document/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/document/#thumbview", 
            "text": "", 
            "title": "ThumbView"
        }, 
        {
            "location": "/pagebot/document/#score", 
            "text": "", 
            "title": "Score"
        }, 
        {
            "location": "/pagebot/document/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/document/#page", 
            "text": "", 
            "title": "Page"
        }, 
        {
            "location": "/pagebot/document/#defaultview", 
            "text": "", 
            "title": "DefaultView"
        }, 
        {
            "location": "/pagebot/document/#top", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "TOP"
        }, 
        {
            "location": "/pagebot/document/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/style/", 
            "text": "style\n\n\nFunctions\n\n\nBACK\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nMIN_DEPTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nStatement\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nJUSTIFIED\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nBOTTOM\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nDEFAULT_DEPTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nMAX_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nFRONT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nMAX_DEPTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nFIT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nONLINE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nA9\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nfunction newStyle\n\n\nMAX_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nB4\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nDEFAULT_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nB6\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB7\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB0\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB1\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB2\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB3\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB8\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB9\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nFolio\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nDEFAULT_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nLegal\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nMIN_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nCENTER\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nA4Letter\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nXXXL\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\nYALIGNS\n\n\nset() -\n new empty set object\nset(iterable) -\n new set object\n\n\nBuild an unordered collection of unique elements.\n\n\nOUTLINE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nUSPostcardMin\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nMIDDLE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nBASELINE_GRID\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nW\n\n\nfloat(x) -\n floating point number\n\n\nConvert a string or number to a floating point number, if possible.\n\n\nUSPostcardMax\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nSize10x14\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nMM\n\n\nfloat(x) -\n floating point number\n\n\nConvert a string or number to a floating point number, if possible.\n\n\nINTERPOLATING_TIME_KEYS\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nHalfLetter\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nZALIGNS\n\n\nset() -\n new empty set object\nset(iterable) -\n new set object\n\n\nBuild an unordered collection of unique elements.\n\n\nDEFAULT_FONT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\ndrawBotSizes\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nLedger\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nIntPostcardMin\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB10\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nDEFAULT_FALLBACK_FONT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nScreen\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nMIN_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nC9\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC8\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nQuarto\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nB5\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC3\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC2\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC1\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC0\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC7\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC5\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nLetter\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nXALIGNS\n\n\nset() -\n new empty set object\nset(iterable) -\n new set object\n\n\nBuild an unordered collection of unique elements.\n\n\nC6\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nINLINE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nC4\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nTabloid\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nTOP\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nJuniorLegal\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nORIGIN_POINT\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nC10\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA10\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA1\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA0\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA3\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA2\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA5\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA4\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA7\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nA6\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nINCH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nA8\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nU\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nRIGHT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nExecutive\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nIntPostcardMax\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.", 
            "title": "Style"
        }, 
        {
            "location": "/pagebot/style/#style", 
            "text": "", 
            "title": "style"
        }, 
        {
            "location": "/pagebot/style/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/style/#back", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "BACK"
        }, 
        {
            "location": "/pagebot/style/#min_depth", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_DEPTH"
        }, 
        {
            "location": "/pagebot/style/#statement", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Statement"
        }, 
        {
            "location": "/pagebot/style/#justified", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "JUSTIFIED"
        }, 
        {
            "location": "/pagebot/style/#bottom", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "BOTTOM"
        }, 
        {
            "location": "/pagebot/style/#default_depth", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_DEPTH"
        }, 
        {
            "location": "/pagebot/style/#max_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MAX_WIDTH"
        }, 
        {
            "location": "/pagebot/style/#front", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "FRONT"
        }, 
        {
            "location": "/pagebot/style/#max_depth", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MAX_DEPTH"
        }, 
        {
            "location": "/pagebot/style/#fit", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "FIT"
        }, 
        {
            "location": "/pagebot/style/#h", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "H"
        }, 
        {
            "location": "/pagebot/style/#online", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "ONLINE"
        }, 
        {
            "location": "/pagebot/style/#a9", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A9"
        }, 
        {
            "location": "/pagebot/style/#function-newstyle", 
            "text": "", 
            "title": "function newStyle"
        }, 
        {
            "location": "/pagebot/style/#max_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MAX_HEIGHT"
        }, 
        {
            "location": "/pagebot/style/#b4", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B4"
        }, 
        {
            "location": "/pagebot/style/#default_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_HEIGHT"
        }, 
        {
            "location": "/pagebot/style/#b6", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B6"
        }, 
        {
            "location": "/pagebot/style/#b7", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B7"
        }, 
        {
            "location": "/pagebot/style/#b0", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B0"
        }, 
        {
            "location": "/pagebot/style/#b1", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B1"
        }, 
        {
            "location": "/pagebot/style/#b2", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B2"
        }, 
        {
            "location": "/pagebot/style/#b3", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B3"
        }, 
        {
            "location": "/pagebot/style/#b8", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B8"
        }, 
        {
            "location": "/pagebot/style/#b9", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B9"
        }, 
        {
            "location": "/pagebot/style/#folio", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Folio"
        }, 
        {
            "location": "/pagebot/style/#default_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_WIDTH"
        }, 
        {
            "location": "/pagebot/style/#legal", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Legal"
        }, 
        {
            "location": "/pagebot/style/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/style/#min_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_WIDTH"
        }, 
        {
            "location": "/pagebot/style/#center", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "CENTER"
        }, 
        {
            "location": "/pagebot/style/#a4letter", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A4Letter"
        }, 
        {
            "location": "/pagebot/style/#xxxl", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "XXXL"
        }, 
        {
            "location": "/pagebot/style/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/style/#yaligns", 
            "text": "set() -  new empty set object\nset(iterable) -  new set object  Build an unordered collection of unique elements.", 
            "title": "YALIGNS"
        }, 
        {
            "location": "/pagebot/style/#outline", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "OUTLINE"
        }, 
        {
            "location": "/pagebot/style/#uspostcardmin", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "USPostcardMin"
        }, 
        {
            "location": "/pagebot/style/#middle", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "MIDDLE"
        }, 
        {
            "location": "/pagebot/style/#baseline_grid", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "BASELINE_GRID"
        }, 
        {
            "location": "/pagebot/style/#w", 
            "text": "float(x) -  floating point number  Convert a string or number to a floating point number, if possible.", 
            "title": "W"
        }, 
        {
            "location": "/pagebot/style/#uspostcardmax", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "USPostcardMax"
        }, 
        {
            "location": "/pagebot/style/#size10x14", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Size10x14"
        }, 
        {
            "location": "/pagebot/style/#mm", 
            "text": "float(x) -  floating point number  Convert a string or number to a floating point number, if possible.", 
            "title": "MM"
        }, 
        {
            "location": "/pagebot/style/#interpolating_time_keys", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "INTERPOLATING_TIME_KEYS"
        }, 
        {
            "location": "/pagebot/style/#halfletter", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "HalfLetter"
        }, 
        {
            "location": "/pagebot/style/#zaligns", 
            "text": "set() -  new empty set object\nset(iterable) -  new set object  Build an unordered collection of unique elements.", 
            "title": "ZALIGNS"
        }, 
        {
            "location": "/pagebot/style/#default_font", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "DEFAULT_FONT"
        }, 
        {
            "location": "/pagebot/style/#drawbotsizes", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "drawBotSizes"
        }, 
        {
            "location": "/pagebot/style/#ledger", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Ledger"
        }, 
        {
            "location": "/pagebot/style/#intpostcardmin", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "IntPostcardMin"
        }, 
        {
            "location": "/pagebot/style/#b10", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B10"
        }, 
        {
            "location": "/pagebot/style/#default_fallback_font", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "DEFAULT_FALLBACK_FONT"
        }, 
        {
            "location": "/pagebot/style/#screen", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Screen"
        }, 
        {
            "location": "/pagebot/style/#min_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_HEIGHT"
        }, 
        {
            "location": "/pagebot/style/#c9", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C9"
        }, 
        {
            "location": "/pagebot/style/#c8", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C8"
        }, 
        {
            "location": "/pagebot/style/#quarto", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Quarto"
        }, 
        {
            "location": "/pagebot/style/#b5", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "B5"
        }, 
        {
            "location": "/pagebot/style/#c3", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C3"
        }, 
        {
            "location": "/pagebot/style/#c2", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C2"
        }, 
        {
            "location": "/pagebot/style/#c1", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C1"
        }, 
        {
            "location": "/pagebot/style/#c0", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C0"
        }, 
        {
            "location": "/pagebot/style/#c7", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C7"
        }, 
        {
            "location": "/pagebot/style/#c5", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C5"
        }, 
        {
            "location": "/pagebot/style/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/style/#letter", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Letter"
        }, 
        {
            "location": "/pagebot/style/#xaligns", 
            "text": "set() -  new empty set object\nset(iterable) -  new set object  Build an unordered collection of unique elements.", 
            "title": "XALIGNS"
        }, 
        {
            "location": "/pagebot/style/#c6", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C6"
        }, 
        {
            "location": "/pagebot/style/#inline", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "INLINE"
        }, 
        {
            "location": "/pagebot/style/#c4", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C4"
        }, 
        {
            "location": "/pagebot/style/#tabloid", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Tabloid"
        }, 
        {
            "location": "/pagebot/style/#top", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "TOP"
        }, 
        {
            "location": "/pagebot/style/#juniorlegal", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "JuniorLegal"
        }, 
        {
            "location": "/pagebot/style/#origin_point", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "ORIGIN_POINT"
        }, 
        {
            "location": "/pagebot/style/#c10", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "C10"
        }, 
        {
            "location": "/pagebot/style/#a10", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A10"
        }, 
        {
            "location": "/pagebot/style/#a1", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A1"
        }, 
        {
            "location": "/pagebot/style/#a0", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A0"
        }, 
        {
            "location": "/pagebot/style/#a3", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A3"
        }, 
        {
            "location": "/pagebot/style/#a2", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A2"
        }, 
        {
            "location": "/pagebot/style/#a5", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A5"
        }, 
        {
            "location": "/pagebot/style/#a4", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A4"
        }, 
        {
            "location": "/pagebot/style/#a7", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A7"
        }, 
        {
            "location": "/pagebot/style/#a6", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A6"
        }, 
        {
            "location": "/pagebot/style/#inch", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "INCH"
        }, 
        {
            "location": "/pagebot/style/#a8", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A8"
        }, 
        {
            "location": "/pagebot/style/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/style/#u", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "U"
        }, 
        {
            "location": "/pagebot/style/#right", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "RIGHT"
        }, 
        {
            "location": "/pagebot/style/#executive", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "Executive"
        }, 
        {
            "location": "/pagebot/style/#intpostcardmax", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "IntPostcardMax"
        }, 
        {
            "location": "/pagebot/typesetter/", 
            "text": "typesetter\n\n\nFunctions\n\n\nImage\n\n\nThe Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.\n\n\nfunction getMarker\n\n\nAnswer a formatted string with markerId that can be used as non-display marker.\nThis way the Composer can find the position of markers in text boxes, after\nFS-slicing has been done. Note there is always a very small \"white-space\"\nadded to the string, so there is a potential difference in width that matters.\nFor that reason markers should not be changed after slicing (which would theoretically\nalter the flow of the FormattedString in an box) and the markerId and amount/length\nof args should be kept as small as possible.\nNote that there is a potential problem of slicing through the argument string at\nthe end of a textBox. That is another reason to keep the length of the arguments short.\nAnd not to use any spaces, etc. inside the markerId.\nPossible slicing through line-endings is not a problem, as the raw string ignores them.\n\n\nNl2BrExtension\n\n\nET\n\n\nfromstring\n\n\nfromstring(text, parser=None, base_url=None)\n\n\nParses an XML document or fragment from a string.  Returns the\nroot node (or the result returned by a parser target).\n\n\nTo override the default parser with a different parser you can pass it to\nthe \nparser\n keyword argument.\n\n\nThe \nbase_url\n keyword argument allows to set the original base URL of\nthe document to support relative Paths when looking up external entities\n(DTD, XInclude, ...).\n\n\nLiteratureExtension\n\n\nLiterature Extension.\n\n\nGalley\n\n\nA Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nTypesetter\n\n\nRuler\n\n\nFootnoteExtension\n\n\nFootnote Extension.\n\n\nTextBox", 
            "title": "Typesetter"
        }, 
        {
            "location": "/pagebot/typesetter/#typesetter", 
            "text": "", 
            "title": "typesetter"
        }, 
        {
            "location": "/pagebot/typesetter/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/typesetter/#image", 
            "text": "The Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.", 
            "title": "Image"
        }, 
        {
            "location": "/pagebot/typesetter/#function-getmarker", 
            "text": "Answer a formatted string with markerId that can be used as non-display marker.\nThis way the Composer can find the position of markers in text boxes, after\nFS-slicing has been done. Note there is always a very small \"white-space\"\nadded to the string, so there is a potential difference in width that matters.\nFor that reason markers should not be changed after slicing (which would theoretically\nalter the flow of the FormattedString in an box) and the markerId and amount/length\nof args should be kept as small as possible.\nNote that there is a potential problem of slicing through the argument string at\nthe end of a textBox. That is another reason to keep the length of the arguments short.\nAnd not to use any spaces, etc. inside the markerId.\nPossible slicing through line-endings is not a problem, as the raw string ignores them.", 
            "title": "function getMarker"
        }, 
        {
            "location": "/pagebot/typesetter/#nl2brextension", 
            "text": "", 
            "title": "Nl2BrExtension"
        }, 
        {
            "location": "/pagebot/typesetter/#et", 
            "text": "", 
            "title": "ET"
        }, 
        {
            "location": "/pagebot/typesetter/#fromstring", 
            "text": "fromstring(text, parser=None, base_url=None)  Parses an XML document or fragment from a string.  Returns the\nroot node (or the result returned by a parser target).  To override the default parser with a different parser you can pass it to\nthe  parser  keyword argument.  The  base_url  keyword argument allows to set the original base URL of\nthe document to support relative Paths when looking up external entities\n(DTD, XInclude, ...).", 
            "title": "fromstring"
        }, 
        {
            "location": "/pagebot/typesetter/#literatureextension", 
            "text": "Literature Extension.", 
            "title": "LiteratureExtension"
        }, 
        {
            "location": "/pagebot/typesetter/#galley", 
            "text": "A Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.", 
            "title": "Galley"
        }, 
        {
            "location": "/pagebot/typesetter/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/typesetter/#typesetter_1", 
            "text": "", 
            "title": "Typesetter"
        }, 
        {
            "location": "/pagebot/typesetter/#ruler", 
            "text": "", 
            "title": "Ruler"
        }, 
        {
            "location": "/pagebot/typesetter/#footnoteextension", 
            "text": "Footnote Extension.", 
            "title": "FootnoteExtension"
        }, 
        {
            "location": "/pagebot/typesetter/#textbox", 
            "text": "", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/md/", 
            "text": "md\n\n\nClasses\n\n\n\n\npagebot.md.footnotes\n\n\npagebot.md.literature\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/md/#md", 
            "text": "", 
            "title": "md"
        }, 
        {
            "location": "/pagebot/md/#classes", 
            "text": "pagebot.md.footnotes  pagebot.md.literature", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/md/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/md/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/md/footnotes/", 
            "text": "md.footnotes\n\n\nFunctions\n\n\nOrderedDict\n\n\nA dictionary that keeps its keys in the order in which they're inserted.\n\n\nCopied from Django's SortedDict with some modifications.\n\n\nunicode_literals\n\n\nPattern\n\n\nBase class that inline patterns subclass.\n\n\nabsolute_import\n\n\nPostprocessor\n\n\nPostprocessors are run after the ElementTree it converted back into text.\n\n\nEach Postprocessor implements a \"run\" method that takes a pointer to a\ntext string, modifies it as necessary and returns a text string.\n\n\nPostprocessors must extend markdown.Postprocessor.\n\n\nNBSP_PLACEHOLDER\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nTreeprocessor\n\n\nTreeprocessors are run on the ElementTree object before serialization.\n\n\nEach Treeprocessor implements a \"run\" method that takes a pointer to an\nElementTree, modifies it as necessary and returns an ElementTree\nobject.\n\n\nTreeprocessors must extend markdown.Treeprocessor.\n\n\nfunction makeExtension\n\n\nReturn an instance of the FootnoteExtension\n\n\nFootnotePostprocessor\n\n\nReplace placeholders with html entities.\n\n\nFN_BACKLINK_TEXT\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nPreprocessor\n\n\nPreprocessors are run after the text is broken into lines.\n\n\nEach preprocessor implements a \"run\" method that takes a pointer to a\nlist of lines of the document, modifies it as necessary and returns\neither the same pointer or a pointer to a new list.\n\n\nPreprocessors must extend markdown.Preprocessor.\n\n\netree\n\n\nExtension\n\n\nBase class for extensions to subclass.\n\n\nFootnotePattern\n\n\nInlinePattern for footnote markers in a document's body text.\n\n\ntext_type\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nFootnotePreprocessor\n\n\nFind all footnote references and store for later use.\n\n\nTABBED_RE\n\n\nCompiled regular expression objects\n\n\nDEF_RE\n\n\nCompiled regular expression objects\n\n\nFootnoteTreeprocessor\n\n\nBuild and append footnote div to end of document.\n\n\nFootnoteExtension\n\n\nFootnote Extension.", 
            "title": "Footnotes"
        }, 
        {
            "location": "/pagebot/md/footnotes/#mdfootnotes", 
            "text": "", 
            "title": "md.footnotes"
        }, 
        {
            "location": "/pagebot/md/footnotes/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/md/footnotes/#ordereddict", 
            "text": "A dictionary that keeps its keys in the order in which they're inserted.  Copied from Django's SortedDict with some modifications.", 
            "title": "OrderedDict"
        }, 
        {
            "location": "/pagebot/md/footnotes/#unicode_literals", 
            "text": "", 
            "title": "unicode_literals"
        }, 
        {
            "location": "/pagebot/md/footnotes/#pattern", 
            "text": "Base class that inline patterns subclass.", 
            "title": "Pattern"
        }, 
        {
            "location": "/pagebot/md/footnotes/#absolute_import", 
            "text": "", 
            "title": "absolute_import"
        }, 
        {
            "location": "/pagebot/md/footnotes/#postprocessor", 
            "text": "Postprocessors are run after the ElementTree it converted back into text.  Each Postprocessor implements a \"run\" method that takes a pointer to a\ntext string, modifies it as necessary and returns a text string.  Postprocessors must extend markdown.Postprocessor.", 
            "title": "Postprocessor"
        }, 
        {
            "location": "/pagebot/md/footnotes/#nbsp_placeholder", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "NBSP_PLACEHOLDER"
        }, 
        {
            "location": "/pagebot/md/footnotes/#treeprocessor", 
            "text": "Treeprocessors are run on the ElementTree object before serialization.  Each Treeprocessor implements a \"run\" method that takes a pointer to an\nElementTree, modifies it as necessary and returns an ElementTree\nobject.  Treeprocessors must extend markdown.Treeprocessor.", 
            "title": "Treeprocessor"
        }, 
        {
            "location": "/pagebot/md/footnotes/#function-makeextension", 
            "text": "Return an instance of the FootnoteExtension", 
            "title": "function makeExtension"
        }, 
        {
            "location": "/pagebot/md/footnotes/#footnotepostprocessor", 
            "text": "Replace placeholders with html entities.", 
            "title": "FootnotePostprocessor"
        }, 
        {
            "location": "/pagebot/md/footnotes/#fn_backlink_text", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "FN_BACKLINK_TEXT"
        }, 
        {
            "location": "/pagebot/md/footnotes/#preprocessor", 
            "text": "Preprocessors are run after the text is broken into lines.  Each preprocessor implements a \"run\" method that takes a pointer to a\nlist of lines of the document, modifies it as necessary and returns\neither the same pointer or a pointer to a new list.  Preprocessors must extend markdown.Preprocessor.", 
            "title": "Preprocessor"
        }, 
        {
            "location": "/pagebot/md/footnotes/#etree", 
            "text": "", 
            "title": "etree"
        }, 
        {
            "location": "/pagebot/md/footnotes/#extension", 
            "text": "Base class for extensions to subclass.", 
            "title": "Extension"
        }, 
        {
            "location": "/pagebot/md/footnotes/#footnotepattern", 
            "text": "InlinePattern for footnote markers in a document's body text.", 
            "title": "FootnotePattern"
        }, 
        {
            "location": "/pagebot/md/footnotes/#text_type", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "text_type"
        }, 
        {
            "location": "/pagebot/md/footnotes/#footnotepreprocessor", 
            "text": "Find all footnote references and store for later use.", 
            "title": "FootnotePreprocessor"
        }, 
        {
            "location": "/pagebot/md/footnotes/#tabbed_re", 
            "text": "Compiled regular expression objects", 
            "title": "TABBED_RE"
        }, 
        {
            "location": "/pagebot/md/footnotes/#def_re", 
            "text": "Compiled regular expression objects", 
            "title": "DEF_RE"
        }, 
        {
            "location": "/pagebot/md/footnotes/#footnotetreeprocessor", 
            "text": "Build and append footnote div to end of document.", 
            "title": "FootnoteTreeprocessor"
        }, 
        {
            "location": "/pagebot/md/footnotes/#footnoteextension", 
            "text": "Footnote Extension.", 
            "title": "FootnoteExtension"
        }, 
        {
            "location": "/pagebot/md/literature/", 
            "text": "md.literature\n\n\nFunctions\n\n\nOrderedDict\n\n\nA dictionary that keeps its keys in the order in which they're inserted.\n\n\nCopied from Django's SortedDict with some modifications.\n\n\nunicode_literals\n\n\nPattern\n\n\nBase class that inline patterns subclass.\n\n\nLIT_BACKLINK_TEXT\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nPostprocessor\n\n\nPostprocessors are run after the ElementTree it converted back into text.\n\n\nEach Postprocessor implements a \"run\" method that takes a pointer to a\ntext string, modifies it as necessary and returns a text string.\n\n\nPostprocessors must extend markdown.Postprocessor.\n\n\nNBSP_PLACEHOLDER\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nTreeprocessor\n\n\nTreeprocessors are run on the ElementTree object before serialization.\n\n\nEach Treeprocessor implements a \"run\" method that takes a pointer to an\nElementTree, modifies it as necessary and returns an ElementTree\nobject.\n\n\nTreeprocessors must extend markdown.Treeprocessor.\n\n\nfunction makeExtension\n\n\nReturn an instance of the LiteraturesExtension\n\n\nLiteraturePreprocessor\n\n\nFind all literature references and store for later use.\n\n\nLiteraturePostprocessor\n\n\nReplace placeholders with html entities.\n\n\nPreprocessor\n\n\nPreprocessors are run after the text is broken into lines.\n\n\nEach preprocessor implements a \"run\" method that takes a pointer to a\nlist of lines of the document, modifies it as necessary and returns\neither the same pointer or a pointer to a new list.\n\n\nPreprocessors must extend markdown.Preprocessor.\n\n\netree\n\n\nExtension\n\n\nBase class for extensions to subclass.\n\n\ntext_type\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nLiteratureTreeprocessor\n\n\nBuild and append literature div to end of document.\n\n\nTABBED_RE\n\n\nCompiled regular expression objects\n\n\nDEF_RE\n\n\nCompiled regular expression objects\n\n\nLiteraturePattern\n\n\nInlinePattern for literature markers in a document's body text.\n\n\nLiteratureExtension\n\n\nLiterature Extension.", 
            "title": "Literature"
        }, 
        {
            "location": "/pagebot/md/literature/#mdliterature", 
            "text": "", 
            "title": "md.literature"
        }, 
        {
            "location": "/pagebot/md/literature/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/md/literature/#ordereddict", 
            "text": "A dictionary that keeps its keys in the order in which they're inserted.  Copied from Django's SortedDict with some modifications.", 
            "title": "OrderedDict"
        }, 
        {
            "location": "/pagebot/md/literature/#unicode_literals", 
            "text": "", 
            "title": "unicode_literals"
        }, 
        {
            "location": "/pagebot/md/literature/#pattern", 
            "text": "Base class that inline patterns subclass.", 
            "title": "Pattern"
        }, 
        {
            "location": "/pagebot/md/literature/#lit_backlink_text", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "LIT_BACKLINK_TEXT"
        }, 
        {
            "location": "/pagebot/md/literature/#postprocessor", 
            "text": "Postprocessors are run after the ElementTree it converted back into text.  Each Postprocessor implements a \"run\" method that takes a pointer to a\ntext string, modifies it as necessary and returns a text string.  Postprocessors must extend markdown.Postprocessor.", 
            "title": "Postprocessor"
        }, 
        {
            "location": "/pagebot/md/literature/#nbsp_placeholder", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "NBSP_PLACEHOLDER"
        }, 
        {
            "location": "/pagebot/md/literature/#treeprocessor", 
            "text": "Treeprocessors are run on the ElementTree object before serialization.  Each Treeprocessor implements a \"run\" method that takes a pointer to an\nElementTree, modifies it as necessary and returns an ElementTree\nobject.  Treeprocessors must extend markdown.Treeprocessor.", 
            "title": "Treeprocessor"
        }, 
        {
            "location": "/pagebot/md/literature/#function-makeextension", 
            "text": "Return an instance of the LiteraturesExtension", 
            "title": "function makeExtension"
        }, 
        {
            "location": "/pagebot/md/literature/#literaturepreprocessor", 
            "text": "Find all literature references and store for later use.", 
            "title": "LiteraturePreprocessor"
        }, 
        {
            "location": "/pagebot/md/literature/#literaturepostprocessor", 
            "text": "Replace placeholders with html entities.", 
            "title": "LiteraturePostprocessor"
        }, 
        {
            "location": "/pagebot/md/literature/#preprocessor", 
            "text": "Preprocessors are run after the text is broken into lines.  Each preprocessor implements a \"run\" method that takes a pointer to a\nlist of lines of the document, modifies it as necessary and returns\neither the same pointer or a pointer to a new list.  Preprocessors must extend markdown.Preprocessor.", 
            "title": "Preprocessor"
        }, 
        {
            "location": "/pagebot/md/literature/#etree", 
            "text": "", 
            "title": "etree"
        }, 
        {
            "location": "/pagebot/md/literature/#extension", 
            "text": "Base class for extensions to subclass.", 
            "title": "Extension"
        }, 
        {
            "location": "/pagebot/md/literature/#text_type", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "text_type"
        }, 
        {
            "location": "/pagebot/md/literature/#literaturetreeprocessor", 
            "text": "Build and append literature div to end of document.", 
            "title": "LiteratureTreeprocessor"
        }, 
        {
            "location": "/pagebot/md/literature/#tabbed_re", 
            "text": "Compiled regular expression objects", 
            "title": "TABBED_RE"
        }, 
        {
            "location": "/pagebot/md/literature/#def_re", 
            "text": "Compiled regular expression objects", 
            "title": "DEF_RE"
        }, 
        {
            "location": "/pagebot/md/literature/#literaturepattern", 
            "text": "InlinePattern for literature markers in a document's body text.", 
            "title": "LiteraturePattern"
        }, 
        {
            "location": "/pagebot/md/literature/#literatureextension", 
            "text": "Literature Extension.", 
            "title": "LiteratureExtension"
        }, 
        {
            "location": "/pagebot/elements/", 
            "text": "elements\n\n\nClasses\n\n\n\n\npagebot.elements.element\n\n\npagebot.elements.pbgalley\n\n\npagebot.elements.pbimage\n\n\npagebot.elements.pbline\n\n\npagebot.elements.pboval\n\n\npagebot.elements.pbpage\n\n\npagebot.elements.pbpolygon\n\n\npagebot.elements.pbrect\n\n\npagebot.elements.pbruler\n\n\npagebot.elements.pbtable\n\n\npagebot.elements.pbtext\n\n\npagebot.elements.pbtextbox\n\n\n\n\nModules\n\n\n\n\npagebot.elements.paths\n\n\npagebot.elements.variablefonts\n\n\npagebot.elements.views\n\n\n\n\nFunctions\n\n\nfunction newTextBox\n\n\nCaller must supply formatted string. Note that w and h can also be defined in the style.\n\n\nPolygon\n\n\nThe Polygon element is a simple implementation of the polygon DrawBot function.\nMore complex path-like elements inherit from the Path element.\n\n\nGalley\n\n\nA Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.\n\n\nTemplate\n\n\nfunction newColImage\n\n\nConvert the column size into point size, depending on the column settings of the \ncurrent template, when drawing images \"hard-coded\" directly on a certain page.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller\n\n\nRuler\n\n\nfunction newPolygon\n\n\nfunction newTable\n\n\nfunction newOval\n\n\nDraw the oval. Note that w and h can also be defined in the style. In case h is omitted,\na circle is drawn.\n\n\nfunction newColRect\n\n\nPath\n\n\nLine\n\n\nRect\n\n\nfunction newRect\n\n\nDraw the rectangle. Note that w and h can also be defined in the style. In case h is omitted,\na square is drawn.\n\n\nfunction newColTextBox\n\n\nCaller must supply formatted string.\n\n\nGlyphPath\n\n\nElement\n\n\nfunction newText\n\n\nDraw formatted string. Normally we don't need w and h here, as it is made by the text and \nstyle combinations. But in case the defined font is a Variable Font, then we can use the\nwidth and height to interpolate a font that fits the space for the given string and weight.\nCaller must supply formatted string. Support both (x, y) and x, y as position.\n\n\nfunction newImage\n\n\nCreate Image element as position (x, y) and optional width, height (w, h) of which\nat least one of them should be defined. The path can be None, to be filled later.\nIf the image is drawn with an empty path, a missingImage cross-frame is shown.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller.\n\n\nPage\n\n\nTextBox\n\n\nfunction newColLine\n\n\nfunction newColOval\n\n\nText\n\n\nImage\n\n\nThe Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.\n\n\nfunction newLine\n\n\nfunction newColText\n\n\nDraw formatted string.\nWe don't need w and h here, as it is made by the text and style combinations.\nCaller must supply formatted string.\n\n\nOval\n\n\nTable", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/elements/#elements", 
            "text": "", 
            "title": "elements"
        }, 
        {
            "location": "/pagebot/elements/#classes", 
            "text": "pagebot.elements.element  pagebot.elements.pbgalley  pagebot.elements.pbimage  pagebot.elements.pbline  pagebot.elements.pboval  pagebot.elements.pbpage  pagebot.elements.pbpolygon  pagebot.elements.pbrect  pagebot.elements.pbruler  pagebot.elements.pbtable  pagebot.elements.pbtext  pagebot.elements.pbtextbox", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/elements/#modules", 
            "text": "pagebot.elements.paths  pagebot.elements.variablefonts  pagebot.elements.views", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/elements/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/#function-newtextbox", 
            "text": "Caller must supply formatted string. Note that w and h can also be defined in the style.", 
            "title": "function newTextBox"
        }, 
        {
            "location": "/pagebot/elements/#polygon", 
            "text": "The Polygon element is a simple implementation of the polygon DrawBot function.\nMore complex path-like elements inherit from the Path element.", 
            "title": "Polygon"
        }, 
        {
            "location": "/pagebot/elements/#galley", 
            "text": "A Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.", 
            "title": "Galley"
        }, 
        {
            "location": "/pagebot/elements/#template", 
            "text": "", 
            "title": "Template"
        }, 
        {
            "location": "/pagebot/elements/#function-newcolimage", 
            "text": "Convert the column size into point size, depending on the column settings of the \ncurrent template, when drawing images \"hard-coded\" directly on a certain page.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller", 
            "title": "function newColImage"
        }, 
        {
            "location": "/pagebot/elements/#ruler", 
            "text": "", 
            "title": "Ruler"
        }, 
        {
            "location": "/pagebot/elements/#function-newpolygon", 
            "text": "", 
            "title": "function newPolygon"
        }, 
        {
            "location": "/pagebot/elements/#function-newtable", 
            "text": "", 
            "title": "function newTable"
        }, 
        {
            "location": "/pagebot/elements/#function-newoval", 
            "text": "Draw the oval. Note that w and h can also be defined in the style. In case h is omitted,\na circle is drawn.", 
            "title": "function newOval"
        }, 
        {
            "location": "/pagebot/elements/#function-newcolrect", 
            "text": "", 
            "title": "function newColRect"
        }, 
        {
            "location": "/pagebot/elements/#path", 
            "text": "", 
            "title": "Path"
        }, 
        {
            "location": "/pagebot/elements/#line", 
            "text": "", 
            "title": "Line"
        }, 
        {
            "location": "/pagebot/elements/#rect", 
            "text": "", 
            "title": "Rect"
        }, 
        {
            "location": "/pagebot/elements/#function-newrect", 
            "text": "Draw the rectangle. Note that w and h can also be defined in the style. In case h is omitted,\na square is drawn.", 
            "title": "function newRect"
        }, 
        {
            "location": "/pagebot/elements/#function-newcoltextbox", 
            "text": "Caller must supply formatted string.", 
            "title": "function newColTextBox"
        }, 
        {
            "location": "/pagebot/elements/#glyphpath", 
            "text": "", 
            "title": "GlyphPath"
        }, 
        {
            "location": "/pagebot/elements/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/#function-newtext", 
            "text": "Draw formatted string. Normally we don't need w and h here, as it is made by the text and \nstyle combinations. But in case the defined font is a Variable Font, then we can use the\nwidth and height to interpolate a font that fits the space for the given string and weight.\nCaller must supply formatted string. Support both (x, y) and x, y as position.", 
            "title": "function newText"
        }, 
        {
            "location": "/pagebot/elements/#function-newimage", 
            "text": "Create Image element as position (x, y) and optional width, height (w, h) of which\nat least one of them should be defined. The path can be None, to be filled later.\nIf the image is drawn with an empty path, a missingImage cross-frame is shown.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller.", 
            "title": "function newImage"
        }, 
        {
            "location": "/pagebot/elements/#page", 
            "text": "", 
            "title": "Page"
        }, 
        {
            "location": "/pagebot/elements/#textbox", 
            "text": "", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/elements/#function-newcolline", 
            "text": "", 
            "title": "function newColLine"
        }, 
        {
            "location": "/pagebot/elements/#function-newcoloval", 
            "text": "", 
            "title": "function newColOval"
        }, 
        {
            "location": "/pagebot/elements/#text", 
            "text": "", 
            "title": "Text"
        }, 
        {
            "location": "/pagebot/elements/#image", 
            "text": "The Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.", 
            "title": "Image"
        }, 
        {
            "location": "/pagebot/elements/#function-newline", 
            "text": "", 
            "title": "function newLine"
        }, 
        {
            "location": "/pagebot/elements/#function-newcoltext", 
            "text": "Draw formatted string.\nWe don't need w and h here, as it is made by the text and style combinations.\nCaller must supply formatted string.", 
            "title": "function newColText"
        }, 
        {
            "location": "/pagebot/elements/#oval", 
            "text": "", 
            "title": "Oval"
        }, 
        {
            "location": "/pagebot/elements/#table", 
            "text": "", 
            "title": "Table"
        }, 
        {
            "location": "/pagebot/elements/element/", 
            "text": "elements.element\n\n\nFunctions\n\n\nfunction w2cw\n\n\nfunction cd2d\n\n\nfunction setGradient\n\n\nDefine the gradient call to match the size of element e., Gradient position\nis from the origin of the page, so we need the current origin of e.\n\n\nMIN_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nScore\n\n\nfunction d2cd\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction uniqueID\n\n\nZALIGNS\n\n\nset() -\n new empty set object\nset(iterable) -\n new set object\n\n\nBuild an unordered collection of unique elements.\n\n\nORIGIN_POINT\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nfunction point3D\n\n\nAnswer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.\n\n\nXXXL\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nCENTER\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nBOTTOM\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nDEFAULT_DEPTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nTimeMark\n\n\nTimeMarks are used by elements to keep style attributes sorted in a time line.\n\n\nMAX_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nMIN_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nRIGHT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction setShadow\n\n\nONLINE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nFRONT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction ch2h\n\n\ndivision\n\n\nfunction cx2x\n\n\nfunction y2cy\n\n\nTransform from y value to column y value, using the e.css for colunn values.\n\n\nElement\n\n\nXALIGNS\n\n\nset() -\n new empty set object\nset(iterable) -\n new set object\n\n\nBuild an unordered collection of unique elements.\n\n\nfunction cw2w\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nBACK\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nMIDDLE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nDEFAULT_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction asFormatted\n\n\nfunction cz2z\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nOUTLINE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction cy2y\n\n\nTransform from column y value to y value, using the e.css for colunn values.\n\n\nTOP\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nINTERPOLATING_TIME_KEYS\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nMAX_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nMAX_DEPTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nMIN_DEPTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nYALIGNS\n\n\nset() -\n new empty set object\nset(iterable) -\n new set object\n\n\nBuild an unordered collection of unique elements.\n\n\nfunction h2ch\n\n\nINLINE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction x2cx\n\n\nTransform from y value to column y value, using the e.css for colunn values.\n\n\nDEFAULT_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction z2cz\n\n\nTransform from z value to column z value, using the e.css for colunn values.\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/element/#elementselement", 
            "text": "", 
            "title": "elements.element"
        }, 
        {
            "location": "/pagebot/elements/element/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/element/#function-w2cw", 
            "text": "", 
            "title": "function w2cw"
        }, 
        {
            "location": "/pagebot/elements/element/#function-cd2d", 
            "text": "", 
            "title": "function cd2d"
        }, 
        {
            "location": "/pagebot/elements/element/#function-setgradient", 
            "text": "Define the gradient call to match the size of element e., Gradient position\nis from the origin of the page, so we need the current origin of e.", 
            "title": "function setGradient"
        }, 
        {
            "location": "/pagebot/elements/element/#min_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/element/#score", 
            "text": "", 
            "title": "Score"
        }, 
        {
            "location": "/pagebot/elements/element/#function-d2cd", 
            "text": "", 
            "title": "function d2cd"
        }, 
        {
            "location": "/pagebot/elements/element/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/element/#function-uniqueid", 
            "text": "", 
            "title": "function uniqueID"
        }, 
        {
            "location": "/pagebot/elements/element/#zaligns", 
            "text": "set() -  new empty set object\nset(iterable) -  new set object  Build an unordered collection of unique elements.", 
            "title": "ZALIGNS"
        }, 
        {
            "location": "/pagebot/elements/element/#origin_point", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "ORIGIN_POINT"
        }, 
        {
            "location": "/pagebot/elements/element/#function-point3d", 
            "text": "Answer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "function point3D"
        }, 
        {
            "location": "/pagebot/elements/element/#xxxl", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "XXXL"
        }, 
        {
            "location": "/pagebot/elements/element/#center", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "CENTER"
        }, 
        {
            "location": "/pagebot/elements/element/#bottom", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "BOTTOM"
        }, 
        {
            "location": "/pagebot/elements/element/#default_depth", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_DEPTH"
        }, 
        {
            "location": "/pagebot/elements/element/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/elements/element/#timemark", 
            "text": "TimeMarks are used by elements to keep style attributes sorted in a time line.", 
            "title": "TimeMark"
        }, 
        {
            "location": "/pagebot/elements/element/#max_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MAX_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/element/#min_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/element/#right", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "RIGHT"
        }, 
        {
            "location": "/pagebot/elements/element/#function-setshadow", 
            "text": "", 
            "title": "function setShadow"
        }, 
        {
            "location": "/pagebot/elements/element/#online", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "ONLINE"
        }, 
        {
            "location": "/pagebot/elements/element/#front", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "FRONT"
        }, 
        {
            "location": "/pagebot/elements/element/#function-ch2h", 
            "text": "", 
            "title": "function ch2h"
        }, 
        {
            "location": "/pagebot/elements/element/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/element/#function-cx2x", 
            "text": "", 
            "title": "function cx2x"
        }, 
        {
            "location": "/pagebot/elements/element/#function-y2cy", 
            "text": "Transform from y value to column y value, using the e.css for colunn values.", 
            "title": "function y2cy"
        }, 
        {
            "location": "/pagebot/elements/element/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/element/#xaligns", 
            "text": "set() -  new empty set object\nset(iterable) -  new set object  Build an unordered collection of unique elements.", 
            "title": "XALIGNS"
        }, 
        {
            "location": "/pagebot/elements/element/#function-cw2w", 
            "text": "", 
            "title": "function cw2w"
        }, 
        {
            "location": "/pagebot/elements/element/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/element/#back", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "BACK"
        }, 
        {
            "location": "/pagebot/elements/element/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/element/#middle", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "MIDDLE"
        }, 
        {
            "location": "/pagebot/elements/element/#default_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/element/#function-asformatted", 
            "text": "", 
            "title": "function asFormatted"
        }, 
        {
            "location": "/pagebot/elements/element/#function-cz2z", 
            "text": "", 
            "title": "function cz2z"
        }, 
        {
            "location": "/pagebot/elements/element/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/element/#outline", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "OUTLINE"
        }, 
        {
            "location": "/pagebot/elements/element/#function-cy2y", 
            "text": "Transform from column y value to y value, using the e.css for colunn values.", 
            "title": "function cy2y"
        }, 
        {
            "location": "/pagebot/elements/element/#top", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "TOP"
        }, 
        {
            "location": "/pagebot/elements/element/#interpolating_time_keys", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "INTERPOLATING_TIME_KEYS"
        }, 
        {
            "location": "/pagebot/elements/element/#max_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MAX_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/element/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/elements/element/#max_depth", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MAX_DEPTH"
        }, 
        {
            "location": "/pagebot/elements/element/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/elements/element/#min_depth", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_DEPTH"
        }, 
        {
            "location": "/pagebot/elements/element/#yaligns", 
            "text": "set() -  new empty set object\nset(iterable) -  new set object  Build an unordered collection of unique elements.", 
            "title": "YALIGNS"
        }, 
        {
            "location": "/pagebot/elements/element/#function-h2ch", 
            "text": "", 
            "title": "function h2ch"
        }, 
        {
            "location": "/pagebot/elements/element/#inline", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "INLINE"
        }, 
        {
            "location": "/pagebot/elements/element/#function-x2cx", 
            "text": "Transform from y value to column y value, using the e.css for colunn values.", 
            "title": "function x2cx"
        }, 
        {
            "location": "/pagebot/elements/element/#default_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/element/#function-z2cz", 
            "text": "Transform from z value to column z value, using the e.css for colunn values.", 
            "title": "function z2cz"
        }, 
        {
            "location": "/pagebot/elements/element/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/", 
            "text": "elements.pbgalley\n\n\nFunctions\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nGalley\n\n\nA Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nElement\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Pbgalley"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#elementspbgalley", 
            "text": "", 
            "title": "elements.pbgalley"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#galley", 
            "text": "A Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.", 
            "title": "Galley"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbgalley/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/pbimage/", 
            "text": "elements.pbimage\n\n\nFunctions\n\n\nCenter2LeftSide\n\n\nMove center of e bounding box on parent left side.\n\n\nRight2RightSide\n\n\nAlign left of e bounding box on parent right side.\n\n\nFit\n\n\nFit the element on all sides of the parent paddings.\n\n\nFit2HeightSide\n\n\nShrink2BlockHeightSide\n\n\nOrigin2RightSide\n\n\nAlign origin of e bounding box horizontal between parent right side.\n\n\nShrink\n\n\nShrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.\n\n\nSolveBlock\n\n\nUsed as a condition in the sequence of conditions, to fix the block of child elements first.\n\n\nRight2CenterSides\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nOrigin2CenterSides\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Top\n\n\nAlign the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.\n\n\nOverflow2Next\n\n\nIf there is overflow in the element, then try to solve it.\n\n\nBottom2BottomSide\n\n\nAlign bottom of e bounding box on parent bottom side.\n\n\nFit2Left\n\n\nCenter2Right\n\n\nMove center of e bounding box on parent right margin.\n\n\nFloat2BottomLeft\n\n\nFloat2RightTop\n\n\nFloat2Right\n\n\nAlign the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.\n\n\nEqualizeFlow2Height\n\n\nTest if all elements in the flow the same height and/or same amount text lines.\n\n\nOrigin2TopSide\n\n\nAlign left of e bounding box horizontal between parent top side.\n\n\nRight2Center\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nLeft2Left\n\n\nAlign left of e bounding box on parent left margin.\n\n\nBottom2Middle\n\n\nAlign bottom of e bounding box on vertical middle between parent margins.\n\n\nTop2MiddleSides\n\n\nAlign top of e bounding box on vertical middle between parent sides.\n\n\nFit2WidthSides\n\n\nBottom2MiddleSides\n\n\nAlign right of e bounding box on vertical middle between parent sides.\n\n\ncondition\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nFloat2TopLeft\n\n\nShrink2BlockBottomSide\n\n\nDEFAULT_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nShrink2BlockTopSide\n\n\nOrigin2Top\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Left\n\n\nAlign the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.\n\n\nDEFAULT_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nFit2BottomSide\n\n\nOrigin2LeftSide\n\n\nAlign left of e bounding box horizontal between parent left side.\n\n\nBottom2Top\n\n\nAlign bottom of e bounding box on parent top margin.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nTop2Bottom\n\n\nAlign top of e bounding box on parent bottom margin.\n\n\nImage\n\n\nThe Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.\n\n\nMiddle2BottomSide\n\n\nMove middle (vertical center) of e bounding box on parent bottom side.\n\n\nscore\n\n\nFloat2RightTopSides\n\n\nOrigin2BottomSide\n\n\nAlign origin of e bounding box horizontal between parent bottom side.\n\n\nShrink2BlockTop\n\n\nShrink2BlockLeftSide\n\n\nFloat2BottomLeftSides\n\n\nFloat2BottomSide\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.\n\n\nFloat2LeftBottom\n\n\nFloat2BottomRight\n\n\nLeft2LeftSide\n\n\nAlign left of e bounding box on parent left side.\n\n\nLeft2CenterSides\n\n\nAlign left of e bounding box horizontal between parent sides.\n\n\nFloat2LeftTopSides\n\n\nRight2Left\n\n\nAlign right of e bounding box to parent left margin.\n\n\nOrigin2Right\n\n\nAlign origin of e bounding box to parent right margin.\n\n\nRight2Right\n\n\nAlign right of e bounding box to parent right margin.\n\n\nFloat2BottomRightSides\n\n\nLeft2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Bottom\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.\n\n\nCenter2Left\n\n\nMove center of e bounding box on parent left margin.\n\n\nTop2TopSide\n\n\nAlign left of e bounding box on parent top side.\n\n\nFit2Right\n\n\nFit2LeftSide\n\n\nOrigin2MiddleSides\n\n\nAlign origin of e bounding box to vertical middle between parent sides.\n\n\nMiddle2TopSide\n\n\nMove middle (vertical center) of e bounding box on parent top side.\n\n\nMiddle2MiddleSides\n\n\nMiddle e bounding box vertical between parent vertical sides.\n\n\nCondition\n\n\nFloat2RightBottomSides\n\n\nFit2Height\n\n\nShrink2BlockRight\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nFit2Bottom\n\n\nFit2Top\n\n\nMiddle2Bottom\n\n\nMove middle (vertical center) of e bounding box on parent bottom margin.\n\n\nTop2Top\n\n\nAlign top of e bounding box on parent top margin.\n\n\nTop2Middle\n\n\nAlign top of e bounding box vertical middle between parent margins.\n\n\nShrink2BlockLeft\n\n\nalign\n\n\nPixelMap\n\n\nThe PixelMap contains the reference to the actual binary image data. eId can be (unique) file path or eId.\n\n\nFloat2TopRightSides\n\n\nCenter2Center\n\n\nCenter e bounding box horizontal between parent margins.\n\n\nFloat2TopSide\n\n\nAlign the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.\n\n\ndivision\n\n\nOrigin2Bottom\n\n\nAlign origin of e bounding box to parent bottom margin.\n\n\nFloat2LeftTop\n\n\nBottom2Bottom\n\n\nAlign bottom of e bounding box to parent bottom margin.\n\n\nCenter2CenterSides\n\n\nCenter e bounding box horizontal between parent sides.\n\n\nfloating\n\n\nFloat2TopRight\n\n\nMiddle2Middle\n\n\nMiddle (vertical center) e bounding box vertical between parent margins.\n\n\nCenter2RightSide\n\n\nMove center of e bounding box on parent right side.\n\n\nFloat2RightBottom\n\n\nShrink2BlockRightSide\n\n\nFloat2TopLeftSides\n\n\nOrigin2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2RightSide\n\n\nAlign the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.\n\n\nElement\n\n\nOrigin2Left\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nLeft2Right\n\n\nAlign left of e bounding box on parent right margin.\n\n\nFit2RightSide\n\n\nFit2Sides\n\n\nFit the element on all sides of the parent sides.\n\n\nFloat2LeftSide\n\n\nAlign the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.\n\n\nFit2Width\n\n\nFloat2LeftBottomSides\n\n\nShrink2BlockWidthSides\n\n\nflow\n\n\nMiddle2Top\n\n\nMove middle (vertical center) of e bounding box on parent top margin.\n\n\nShrink2BlockBottom\n\n\nOrigin2Middle\n\n\nAlign origin of e bounding box to vertical middle between parent margin.\n\n\nFit2TopSide\n\n\nShrink2BlockSides\n\n\nShirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Pbimage"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#elementspbimage", 
            "text": "", 
            "title": "elements.pbimage"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#center2leftside", 
            "text": "Move center of e bounding box on parent left side.", 
            "title": "Center2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#right2rightside", 
            "text": "Align left of e bounding box on parent right side.", 
            "title": "Right2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit", 
            "text": "Fit the element on all sides of the parent paddings.", 
            "title": "Fit"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2heightside", 
            "text": "", 
            "title": "Fit2HeightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockheightside", 
            "text": "", 
            "title": "Shrink2BlockHeightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2rightside", 
            "text": "Align origin of e bounding box horizontal between parent right side.", 
            "title": "Origin2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink", 
            "text": "Shrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.", 
            "title": "Shrink"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#solveblock", 
            "text": "Used as a condition in the sequence of conditions, to fix the block of child elements first.", 
            "title": "SolveBlock"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#right2centersides", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2centersides", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2top", 
            "text": "Align the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Top"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#overflow2next", 
            "text": "If there is overflow in the element, then try to solve it.", 
            "title": "Overflow2Next"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#bottom2bottomside", 
            "text": "Align bottom of e bounding box on parent bottom side.", 
            "title": "Bottom2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2left", 
            "text": "", 
            "title": "Fit2Left"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#center2right", 
            "text": "Move center of e bounding box on parent right margin.", 
            "title": "Center2Right"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2bottomleft", 
            "text": "", 
            "title": "Float2BottomLeft"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2righttop", 
            "text": "", 
            "title": "Float2RightTop"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2right", 
            "text": "Align the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Right"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#equalizeflow2height", 
            "text": "Test if all elements in the flow the same height and/or same amount text lines.", 
            "title": "EqualizeFlow2Height"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2topside", 
            "text": "Align left of e bounding box horizontal between parent top side.", 
            "title": "Origin2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#right2center", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2Center"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#left2left", 
            "text": "Align left of e bounding box on parent left margin.", 
            "title": "Left2Left"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#bottom2middle", 
            "text": "Align bottom of e bounding box on vertical middle between parent margins.", 
            "title": "Bottom2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#top2middlesides", 
            "text": "Align top of e bounding box on vertical middle between parent sides.", 
            "title": "Top2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2widthsides", 
            "text": "", 
            "title": "Fit2WidthSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#bottom2middlesides", 
            "text": "Align right of e bounding box on vertical middle between parent sides.", 
            "title": "Bottom2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#condition", 
            "text": "", 
            "title": "condition"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2topleft", 
            "text": "", 
            "title": "Float2TopLeft"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockbottomside", 
            "text": "", 
            "title": "Shrink2BlockBottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#default_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blocktopside", 
            "text": "", 
            "title": "Shrink2BlockTopSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2top", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Top"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2left", 
            "text": "Align the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Left"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#default_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2bottomside", 
            "text": "", 
            "title": "Fit2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2leftside", 
            "text": "Align left of e bounding box horizontal between parent left side.", 
            "title": "Origin2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#bottom2top", 
            "text": "Align bottom of e bounding box on parent top margin.", 
            "title": "Bottom2Top"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#top2bottom", 
            "text": "Align top of e bounding box on parent bottom margin.", 
            "title": "Top2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#image", 
            "text": "The Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.", 
            "title": "Image"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#middle2bottomside", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom side.", 
            "title": "Middle2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#score", 
            "text": "", 
            "title": "score"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2righttopsides", 
            "text": "", 
            "title": "Float2RightTopSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2bottomside", 
            "text": "Align origin of e bounding box horizontal between parent bottom side.", 
            "title": "Origin2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blocktop", 
            "text": "", 
            "title": "Shrink2BlockTop"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockleftside", 
            "text": "", 
            "title": "Shrink2BlockLeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2bottomleftsides", 
            "text": "", 
            "title": "Float2BottomLeftSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2bottomside", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2leftbottom", 
            "text": "", 
            "title": "Float2LeftBottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2bottomright", 
            "text": "", 
            "title": "Float2BottomRight"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#left2leftside", 
            "text": "Align left of e bounding box on parent left side.", 
            "title": "Left2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#left2centersides", 
            "text": "Align left of e bounding box horizontal between parent sides.", 
            "title": "Left2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2lefttopsides", 
            "text": "", 
            "title": "Float2LeftTopSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#right2left", 
            "text": "Align right of e bounding box to parent left margin.", 
            "title": "Right2Left"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2right", 
            "text": "Align origin of e bounding box to parent right margin.", 
            "title": "Origin2Right"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#right2right", 
            "text": "Align right of e bounding box to parent right margin.", 
            "title": "Right2Right"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2bottomrightsides", 
            "text": "", 
            "title": "Float2BottomRightSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#left2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Left2Center"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2bottom", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#center2left", 
            "text": "Move center of e bounding box on parent left margin.", 
            "title": "Center2Left"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#top2topside", 
            "text": "Align left of e bounding box on parent top side.", 
            "title": "Top2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2right", 
            "text": "", 
            "title": "Fit2Right"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2leftside", 
            "text": "", 
            "title": "Fit2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2middlesides", 
            "text": "Align origin of e bounding box to vertical middle between parent sides.", 
            "title": "Origin2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#middle2topside", 
            "text": "Move middle (vertical center) of e bounding box on parent top side.", 
            "title": "Middle2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#middle2middlesides", 
            "text": "Middle e bounding box vertical between parent vertical sides.", 
            "title": "Middle2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#condition_1", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2rightbottomsides", 
            "text": "", 
            "title": "Float2RightBottomSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2height", 
            "text": "", 
            "title": "Fit2Height"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockright", 
            "text": "", 
            "title": "Shrink2BlockRight"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2bottom", 
            "text": "", 
            "title": "Fit2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2top", 
            "text": "", 
            "title": "Fit2Top"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#middle2bottom", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom margin.", 
            "title": "Middle2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#top2top", 
            "text": "Align top of e bounding box on parent top margin.", 
            "title": "Top2Top"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#top2middle", 
            "text": "Align top of e bounding box vertical middle between parent margins.", 
            "title": "Top2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockleft", 
            "text": "", 
            "title": "Shrink2BlockLeft"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#align", 
            "text": "", 
            "title": "align"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#pixelmap", 
            "text": "The PixelMap contains the reference to the actual binary image data. eId can be (unique) file path or eId.", 
            "title": "PixelMap"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2toprightsides", 
            "text": "", 
            "title": "Float2TopRightSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#center2center", 
            "text": "Center e bounding box horizontal between parent margins.", 
            "title": "Center2Center"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2topside", 
            "text": "Align the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2bottom", 
            "text": "Align origin of e bounding box to parent bottom margin.", 
            "title": "Origin2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2lefttop", 
            "text": "", 
            "title": "Float2LeftTop"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#bottom2bottom", 
            "text": "Align bottom of e bounding box to parent bottom margin.", 
            "title": "Bottom2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#center2centersides", 
            "text": "Center e bounding box horizontal between parent sides.", 
            "title": "Center2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#floating", 
            "text": "", 
            "title": "floating"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2topright", 
            "text": "", 
            "title": "Float2TopRight"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#middle2middle", 
            "text": "Middle (vertical center) e bounding box vertical between parent margins.", 
            "title": "Middle2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#center2rightside", 
            "text": "Move center of e bounding box on parent right side.", 
            "title": "Center2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2rightbottom", 
            "text": "", 
            "title": "Float2RightBottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockrightside", 
            "text": "", 
            "title": "Shrink2BlockRightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2topleftsides", 
            "text": "", 
            "title": "Float2TopLeftSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Center"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2rightside", 
            "text": "Align the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2left", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Left"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#left2right", 
            "text": "Align left of e bounding box on parent right margin.", 
            "title": "Left2Right"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2rightside", 
            "text": "", 
            "title": "Fit2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2sides", 
            "text": "Fit the element on all sides of the parent sides.", 
            "title": "Fit2Sides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2leftside", 
            "text": "Align the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2width", 
            "text": "", 
            "title": "Fit2Width"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#float2leftbottomsides", 
            "text": "", 
            "title": "Float2LeftBottomSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockwidthsides", 
            "text": "", 
            "title": "Shrink2BlockWidthSides"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#flow", 
            "text": "", 
            "title": "flow"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#middle2top", 
            "text": "Move middle (vertical center) of e bounding box on parent top margin.", 
            "title": "Middle2Top"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blockbottom", 
            "text": "", 
            "title": "Shrink2BlockBottom"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#origin2middle", 
            "text": "Align origin of e bounding box to vertical middle between parent margin.", 
            "title": "Origin2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#fit2topside", 
            "text": "", 
            "title": "Fit2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbimage/#shrink2blocksides", 
            "text": "Shirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Shrink2BlockSides"
        }, 
        {
            "location": "/pagebot/elements/pbline/", 
            "text": "elements.pbline\n\n\nFunctions\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nLine\n\n\nElement\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Pbline"
        }, 
        {
            "location": "/pagebot/elements/pbline/#elementspbline", 
            "text": "", 
            "title": "elements.pbline"
        }, 
        {
            "location": "/pagebot/elements/pbline/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbline/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbline/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pbline/#line", 
            "text": "", 
            "title": "Line"
        }, 
        {
            "location": "/pagebot/elements/pbline/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbline/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/pboval/", 
            "text": "elements.pboval\n\n\nFunctions\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\ndivision\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nOval\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nElement\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Pboval"
        }, 
        {
            "location": "/pagebot/elements/pboval/#elementspboval", 
            "text": "", 
            "title": "elements.pboval"
        }, 
        {
            "location": "/pagebot/elements/pboval/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pboval/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pboval/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/pboval/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/pboval/#oval", 
            "text": "", 
            "title": "Oval"
        }, 
        {
            "location": "/pagebot/elements/pboval/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pboval/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pboval/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/pbpage/", 
            "text": "elements.pbpage\n\n\nFunctions\n\n\nElement\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nTemplate\n\n\nPage", 
            "title": "Pbpage"
        }, 
        {
            "location": "/pagebot/elements/pbpage/#elementspbpage", 
            "text": "", 
            "title": "elements.pbpage"
        }, 
        {
            "location": "/pagebot/elements/pbpage/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbpage/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbpage/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbpage/#template", 
            "text": "", 
            "title": "Template"
        }, 
        {
            "location": "/pagebot/elements/pbpage/#page", 
            "text": "", 
            "title": "Page"
        }, 
        {
            "location": "/pagebot/elements/pbpolygon/", 
            "text": "elements.pbpolygon\n\n\nFunctions\n\n\nPolygon\n\n\nThe Polygon element is a simple implementation of the polygon DrawBot function.\nMore complex path-like elements inherit from the Path element.\n\n\nElement\n\n\nXXXL\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4", 
            "title": "Pbpolygon"
        }, 
        {
            "location": "/pagebot/elements/pbpolygon/#elementspbpolygon", 
            "text": "", 
            "title": "elements.pbpolygon"
        }, 
        {
            "location": "/pagebot/elements/pbpolygon/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbpolygon/#polygon", 
            "text": "The Polygon element is a simple implementation of the polygon DrawBot function.\nMore complex path-like elements inherit from the Path element.", 
            "title": "Polygon"
        }, 
        {
            "location": "/pagebot/elements/pbpolygon/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbpolygon/#xxxl", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "XXXL"
        }, 
        {
            "location": "/pagebot/elements/pbrect/", 
            "text": "elements.pbrect\n\n\nFunctions\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\ndivision\n\n\nRect\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nElement\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Pbrect"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#elementspbrect", 
            "text": "", 
            "title": "elements.pbrect"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#rect", 
            "text": "", 
            "title": "Rect"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbrect/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/pbruler/", 
            "text": "elements.pbruler\n\n\nFunctions\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nRuler\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nElement", 
            "title": "Pbruler"
        }, 
        {
            "location": "/pagebot/elements/pbruler/#elementspbruler", 
            "text": "", 
            "title": "elements.pbruler"
        }, 
        {
            "location": "/pagebot/elements/pbruler/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbruler/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbruler/#ruler", 
            "text": "", 
            "title": "Ruler"
        }, 
        {
            "location": "/pagebot/elements/pbruler/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/pbruler/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbtable/", 
            "text": "elements.pbtable\n\n\nFunctions\n\n\nRight2RightSide\n\n\nAlign left of e bounding box on parent right side.\n\n\nFit\n\n\nFit the element on all sides of the parent paddings.\n\n\nCenter2LeftSide\n\n\nMove center of e bounding box on parent left side.\n\n\nFit2HeightSide\n\n\nOrigin2RightSide\n\n\nAlign origin of e bounding box horizontal between parent right side.\n\n\nShrink\n\n\nShrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.\n\n\nSolveBlock\n\n\nUsed as a condition in the sequence of conditions, to fix the block of child elements first.\n\n\nRight2CenterSides\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nOrigin2CenterSides\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Top\n\n\nAlign the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.\n\n\nOverflow2Next\n\n\nIf there is overflow in the element, then try to solve it.\n\n\nBottom2BottomSide\n\n\nAlign bottom of e bounding box on parent bottom side.\n\n\nFit2Left\n\n\nCenter2Right\n\n\nMove center of e bounding box on parent right margin.\n\n\nFloat2BottomLeft\n\n\nFloat2RightTop\n\n\nFloat2Right\n\n\nAlign the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.\n\n\nEqualizeFlow2Height\n\n\nTest if all elements in the flow the same height and/or same amount text lines.\n\n\nOrigin2TopSide\n\n\nAlign left of e bounding box horizontal between parent top side.\n\n\nRight2Center\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nLeft2Left\n\n\nAlign left of e bounding box on parent left margin.\n\n\nBottom2Middle\n\n\nAlign bottom of e bounding box on vertical middle between parent margins.\n\n\nTop2MiddleSides\n\n\nAlign top of e bounding box on vertical middle between parent sides.\n\n\nFit2WidthSides\n\n\nBottom2MiddleSides\n\n\nAlign right of e bounding box on vertical middle between parent sides.\n\n\ncondition\n\n\nCell\n\n\nFloat2TopLeft\n\n\nShrink2BlockBottomSide\n\n\nShrink2BlockTopSide\n\n\nGlyph\n\n\nThis Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n g = f['a']\n\n g.name\n'a'\n\n\n len(g.points)\n48\n\n\n g.points[-1].onCurve\nTrue\n\n\n contours = g.contours\n\n len(contours)\n3\n\n\n path = g.path\n\n print path\n\nBezierPath\n\n\n\n nspath = path.getNSBezierPath()\n\n bounds = nspath.bounds()\n\n print bounds\n\nNSRect origin=\nNSPoint x=40.0 y=-16.0\n size=\nNSSize width=529.0 height=572.0\n\n\n\n len(bounds)\n2\n\n\n len(bounds[0])\n2\n\n\n len(bounds[1])\n2\n\n\n print bounds[0]\n\nNSPoint x=40.0 y=-16.0\n\n\n\n bounds[0][0]\n40.0\n\n\n\nShrink2BlockRightSide\n\n\nOrigin2Top\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Left\n\n\nAlign the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.\n\n\nFit2BottomSide\n\n\nOrigin2LeftSide\n\n\nAlign left of e bounding box horizontal between parent left side.\n\n\nBottom2Top\n\n\nAlign bottom of e bounding box on parent top margin.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nTop2Bottom\n\n\nAlign top of e bounding box on parent bottom margin.\n\n\nMIN_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nCENTER\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nMiddle2BottomSide\n\n\nMove middle (vertical center) of e bounding box on parent bottom side.\n\n\nscore\n\n\nFloat2RightTopSides\n\n\nOrigin2BottomSide\n\n\nAlign origin of e bounding box horizontal between parent bottom side.\n\n\nShrink2BlockTop\n\n\nShrink2BlockLeftSide\n\n\nFloat2BottomLeftSides\n\n\nFloat2RightSide\n\n\nAlign the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.\n\n\nFloat2BottomSide\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.\n\n\nMIDDLE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nFloat2LeftBottom\n\n\nMiddle2TopSide\n\n\nMove middle (vertical center) of e bounding box on parent top side.\n\n\nFloat2BottomRight\n\n\nLeft2LeftSide\n\n\nAlign left of e bounding box on parent left side.\n\n\nHeaderCell\n\n\nTextBox\n\n\nOrigin2Left\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2LeftTopSides\n\n\nRight2Left\n\n\nAlign right of e bounding box to parent left margin.\n\n\nOrigin2Right\n\n\nAlign origin of e bounding box to parent right margin.\n\n\nFit2Height\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nFloat2BottomRightSides\n\n\nShrink2BlockWidthSides\n\n\nRow\n\n\nLeft2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Bottom\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.\n\n\nCenter2Left\n\n\nMove center of e bounding box on parent left margin.\n\n\nTop2TopSide\n\n\nAlign left of e bounding box on parent top side.\n\n\nFit2Right\n\n\nFit2LeftSide\n\n\nOrigin2MiddleSides\n\n\nAlign origin of e bounding box to vertical middle between parent sides.\n\n\nMIN_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nMiddle2MiddleSides\n\n\nMiddle e bounding box vertical between parent vertical sides.\n\n\nCondition\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nFloat2RightBottomSides\n\n\nShrink2BlockRight\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nFit2Bottom\n\n\nFloat2LeftBottomSides\n\n\nLeft2CenterSides\n\n\nAlign left of e bounding box horizontal between parent sides.\n\n\nMiddle2Bottom\n\n\nMove middle (vertical center) of e bounding box on parent bottom margin.\n\n\nTop2Top\n\n\nAlign top of e bounding box on parent top margin.\n\n\nTop2Middle\n\n\nAlign top of e bounding box vertical middle between parent margins.\n\n\nShrink2BlockLeft\n\n\nalign\n\n\nHeader\n\n\nThe Table header is a special kind of row. The header holds the titles of \nthe columns and is reference for their widthts.\n\n\nFloat2TopRightSides\n\n\nCenter2Center\n\n\nCenter e bounding box horizontal between parent margins.\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.\n\n\nFloat2TopSide\n\n\nAlign the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.\n\n\ndivision\n\n\nOrigin2Bottom\n\n\nAlign origin of e bounding box to parent bottom margin.\n\n\nRight2Right\n\n\nAlign right of e bounding box to parent right margin.\n\n\nFloat2LeftTop\n\n\nBottom2Bottom\n\n\nAlign bottom of e bounding box to parent bottom margin.\n\n\nCenter2CenterSides\n\n\nCenter e bounding box horizontal between parent sides.\n\n\nfloating\n\n\nFloat2TopRight\n\n\nMiddle2Middle\n\n\nMiddle (vertical center) e bounding box vertical between parent margins.\n\n\nCenter2RightSide\n\n\nMove center of e bounding box on parent right side.\n\n\nFloat2RightBottom\n\n\nFloat2TopLeftSides\n\n\nOrigin2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nElement\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nLeft2Right\n\n\nAlign left of e bounding box on parent right margin.\n\n\nFit2RightSide\n\n\nFit2Sides\n\n\nFit the element on all sides of the parent sides.\n\n\nFloat2LeftSide\n\n\nAlign the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.\n\n\nFit2Width\n\n\nRIGHT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nFit2Top\n\n\nShrink2BlockHeightSide\n\n\nflow\n\n\nMiddle2Top\n\n\nMove middle (vertical center) of e bounding box on parent top margin.\n\n\nShrink2BlockBottom\n\n\nTable\n\n\nOrigin2Middle\n\n\nAlign origin of e bounding box to vertical middle between parent margin.\n\n\nFit2TopSide\n\n\nEmptyCell\n\n\nPlaceholder cell to make index of columns match up if there are empty areas,\nsuch as colspan and rowspan.\n\n\nShrink2BlockSides\n\n\nShirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Pbtable"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#elementspbtable", 
            "text": "", 
            "title": "elements.pbtable"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#right2rightside", 
            "text": "Align left of e bounding box on parent right side.", 
            "title": "Right2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit", 
            "text": "Fit the element on all sides of the parent paddings.", 
            "title": "Fit"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center2leftside", 
            "text": "Move center of e bounding box on parent left side.", 
            "title": "Center2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2heightside", 
            "text": "", 
            "title": "Fit2HeightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2rightside", 
            "text": "Align origin of e bounding box horizontal between parent right side.", 
            "title": "Origin2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink", 
            "text": "Shrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.", 
            "title": "Shrink"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#solveblock", 
            "text": "Used as a condition in the sequence of conditions, to fix the block of child elements first.", 
            "title": "SolveBlock"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#right2centersides", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2centersides", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2top", 
            "text": "Align the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Top"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#overflow2next", 
            "text": "If there is overflow in the element, then try to solve it.", 
            "title": "Overflow2Next"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#bottom2bottomside", 
            "text": "Align bottom of e bounding box on parent bottom side.", 
            "title": "Bottom2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2left", 
            "text": "", 
            "title": "Fit2Left"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center2right", 
            "text": "Move center of e bounding box on parent right margin.", 
            "title": "Center2Right"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2bottomleft", 
            "text": "", 
            "title": "Float2BottomLeft"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2righttop", 
            "text": "", 
            "title": "Float2RightTop"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2right", 
            "text": "Align the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Right"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#equalizeflow2height", 
            "text": "Test if all elements in the flow the same height and/or same amount text lines.", 
            "title": "EqualizeFlow2Height"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2topside", 
            "text": "Align left of e bounding box horizontal between parent top side.", 
            "title": "Origin2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#right2center", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2Center"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#left2left", 
            "text": "Align left of e bounding box on parent left margin.", 
            "title": "Left2Left"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#bottom2middle", 
            "text": "Align bottom of e bounding box on vertical middle between parent margins.", 
            "title": "Bottom2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#top2middlesides", 
            "text": "Align top of e bounding box on vertical middle between parent sides.", 
            "title": "Top2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2widthsides", 
            "text": "", 
            "title": "Fit2WidthSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#bottom2middlesides", 
            "text": "Align right of e bounding box on vertical middle between parent sides.", 
            "title": "Bottom2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#condition", 
            "text": "", 
            "title": "condition"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#cell", 
            "text": "", 
            "title": "Cell"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2topleft", 
            "text": "", 
            "title": "Float2TopLeft"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockbottomside", 
            "text": "", 
            "title": "Shrink2BlockBottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blocktopside", 
            "text": "", 
            "title": "Shrink2BlockTopSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#glyph", 
            "text": "This Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.   import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  g = f['a']  g.name\n'a'  len(g.points)\n48  g.points[-1].onCurve\nTrue  contours = g.contours  len(contours)\n3  path = g.path  print path BezierPath   nspath = path.getNSBezierPath()  bounds = nspath.bounds()  print bounds NSRect origin= NSPoint x=40.0 y=-16.0  size= NSSize width=529.0 height=572.0   len(bounds)\n2  len(bounds[0])\n2  len(bounds[1])\n2  print bounds[0] NSPoint x=40.0 y=-16.0   bounds[0][0]\n40.0", 
            "title": "Glyph"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockrightside", 
            "text": "", 
            "title": "Shrink2BlockRightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2top", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Top"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2left", 
            "text": "Align the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Left"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2bottomside", 
            "text": "", 
            "title": "Fit2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2leftside", 
            "text": "Align left of e bounding box horizontal between parent left side.", 
            "title": "Origin2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#bottom2top", 
            "text": "Align bottom of e bounding box on parent top margin.", 
            "title": "Bottom2Top"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#top2bottom", 
            "text": "Align top of e bounding box on parent bottom margin.", 
            "title": "Top2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#min_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "CENTER"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle2bottomside", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom side.", 
            "title": "Middle2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#score", 
            "text": "", 
            "title": "score"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2righttopsides", 
            "text": "", 
            "title": "Float2RightTopSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2bottomside", 
            "text": "Align origin of e bounding box horizontal between parent bottom side.", 
            "title": "Origin2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blocktop", 
            "text": "", 
            "title": "Shrink2BlockTop"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockleftside", 
            "text": "", 
            "title": "Shrink2BlockLeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2bottomleftsides", 
            "text": "", 
            "title": "Float2BottomLeftSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2rightside", 
            "text": "Align the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2bottomside", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2BottomSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "MIDDLE"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2leftbottom", 
            "text": "", 
            "title": "Float2LeftBottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle2topside", 
            "text": "Move middle (vertical center) of e bounding box on parent top side.", 
            "title": "Middle2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2bottomright", 
            "text": "", 
            "title": "Float2BottomRight"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#left2leftside", 
            "text": "Align left of e bounding box on parent left side.", 
            "title": "Left2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#headercell", 
            "text": "", 
            "title": "HeaderCell"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#textbox", 
            "text": "", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2left", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Left"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2lefttopsides", 
            "text": "", 
            "title": "Float2LeftTopSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#right2left", 
            "text": "Align right of e bounding box to parent left margin.", 
            "title": "Right2Left"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2right", 
            "text": "Align origin of e bounding box to parent right margin.", 
            "title": "Origin2Right"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2height", 
            "text": "", 
            "title": "Fit2Height"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2bottomrightsides", 
            "text": "", 
            "title": "Float2BottomRightSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockwidthsides", 
            "text": "", 
            "title": "Shrink2BlockWidthSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#row", 
            "text": "", 
            "title": "Row"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#left2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Left2Center"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2bottom", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center2left", 
            "text": "Move center of e bounding box on parent left margin.", 
            "title": "Center2Left"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#top2topside", 
            "text": "Align left of e bounding box on parent top side.", 
            "title": "Top2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2right", 
            "text": "", 
            "title": "Fit2Right"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2leftside", 
            "text": "", 
            "title": "Fit2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2middlesides", 
            "text": "Align origin of e bounding box to vertical middle between parent sides.", 
            "title": "Origin2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#min_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle2middlesides", 
            "text": "Middle e bounding box vertical between parent vertical sides.", 
            "title": "Middle2MiddleSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#condition_1", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2rightbottomsides", 
            "text": "", 
            "title": "Float2RightBottomSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockright", 
            "text": "", 
            "title": "Shrink2BlockRight"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2bottom", 
            "text": "", 
            "title": "Fit2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2leftbottomsides", 
            "text": "", 
            "title": "Float2LeftBottomSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#left2centersides", 
            "text": "Align left of e bounding box horizontal between parent sides.", 
            "title": "Left2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle2bottom", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom margin.", 
            "title": "Middle2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#top2top", 
            "text": "Align top of e bounding box on parent top margin.", 
            "title": "Top2Top"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#top2middle", 
            "text": "Align top of e bounding box vertical middle between parent margins.", 
            "title": "Top2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockleft", 
            "text": "", 
            "title": "Shrink2BlockLeft"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#align", 
            "text": "", 
            "title": "align"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#header", 
            "text": "The Table header is a special kind of row. The header holds the titles of \nthe columns and is reference for their widthts.", 
            "title": "Header"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2toprightsides", 
            "text": "", 
            "title": "Float2TopRightSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center2center", 
            "text": "Center e bounding box horizontal between parent margins.", 
            "title": "Center2Center"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2topside", 
            "text": "Align the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2bottom", 
            "text": "Align origin of e bounding box to parent bottom margin.", 
            "title": "Origin2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#right2right", 
            "text": "Align right of e bounding box to parent right margin.", 
            "title": "Right2Right"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2lefttop", 
            "text": "", 
            "title": "Float2LeftTop"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#bottom2bottom", 
            "text": "Align bottom of e bounding box to parent bottom margin.", 
            "title": "Bottom2Bottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center2centersides", 
            "text": "Center e bounding box horizontal between parent sides.", 
            "title": "Center2CenterSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#floating", 
            "text": "", 
            "title": "floating"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2topright", 
            "text": "", 
            "title": "Float2TopRight"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle2middle", 
            "text": "Middle (vertical center) e bounding box vertical between parent margins.", 
            "title": "Middle2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#center2rightside", 
            "text": "Move center of e bounding box on parent right side.", 
            "title": "Center2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2rightbottom", 
            "text": "", 
            "title": "Float2RightBottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2topleftsides", 
            "text": "", 
            "title": "Float2TopLeftSides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Center"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#left2right", 
            "text": "Align left of e bounding box on parent right margin.", 
            "title": "Left2Right"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2rightside", 
            "text": "", 
            "title": "Fit2RightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2sides", 
            "text": "Fit the element on all sides of the parent sides.", 
            "title": "Fit2Sides"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#float2leftside", 
            "text": "Align the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2LeftSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2width", 
            "text": "", 
            "title": "Fit2Width"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#right", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "RIGHT"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2top", 
            "text": "", 
            "title": "Fit2Top"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockheightside", 
            "text": "", 
            "title": "Shrink2BlockHeightSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#flow", 
            "text": "", 
            "title": "flow"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#middle2top", 
            "text": "Move middle (vertical center) of e bounding box on parent top margin.", 
            "title": "Middle2Top"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blockbottom", 
            "text": "", 
            "title": "Shrink2BlockBottom"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#table", 
            "text": "", 
            "title": "Table"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#origin2middle", 
            "text": "Align origin of e bounding box to vertical middle between parent margin.", 
            "title": "Origin2Middle"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#fit2topside", 
            "text": "", 
            "title": "Fit2TopSide"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#emptycell", 
            "text": "Placeholder cell to make index of columns match up if there are empty areas,\nsuch as colspan and rowspan.", 
            "title": "EmptyCell"
        }, 
        {
            "location": "/pagebot/elements/pbtable/#shrink2blocksides", 
            "text": "Shirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Shrink2BlockSides"
        }, 
        {
            "location": "/pagebot/elements/pbtext/", 
            "text": "elements.pbtext\n\n\nFunctions\n\n\nText\n\n\nTextBox", 
            "title": "Pbtext"
        }, 
        {
            "location": "/pagebot/elements/pbtext/#elementspbtext", 
            "text": "", 
            "title": "elements.pbtext"
        }, 
        {
            "location": "/pagebot/elements/pbtext/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbtext/#text", 
            "text": "", 
            "title": "Text"
        }, 
        {
            "location": "/pagebot/elements/pbtext/#textbox", 
            "text": "", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/", 
            "text": "elements.pbtextbox\n\n\nFunctions\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nMIN_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nGlyph\n\n\nThis Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n g = f['a']\n\n g.name\n'a'\n\n\n len(g.points)\n48\n\n\n g.points[-1].onCurve\nTrue\n\n\n contours = g.contours\n\n len(contours)\n3\n\n\n path = g.path\n\n print path\n\nBezierPath\n\n\n\n nspath = path.getNSBezierPath()\n\n bounds = nspath.bounds()\n\n print bounds\n\nNSRect origin=\nNSPoint x=40.0 y=-16.0\n size=\nNSSize width=529.0 height=572.0\n\n\n\n len(bounds)\n2\n\n\n len(bounds[0])\n2\n\n\n len(bounds[1])\n2\n\n\n print bounds[0]\n\nNSPoint x=40.0 y=-16.0\n\n\n\n bounds[0][0]\n40.0\n\n\n\nCENTER\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nBOTTOM\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nMIN_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nFoundPattern\n\n\nTextRun\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nElement\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nMIDDLE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nTextLine\n\n\nTextBox\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nRIGHT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Pbtextbox"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#elementspbtextbox", 
            "text": "", 
            "title": "elements.pbtextbox"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#min_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#glyph", 
            "text": "This Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.   import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  g = f['a']  g.name\n'a'  len(g.points)\n48  g.points[-1].onCurve\nTrue  contours = g.contours  len(contours)\n3  path = g.path  print path BezierPath   nspath = path.getNSBezierPath()  bounds = nspath.bounds()  print bounds NSRect origin= NSPoint x=40.0 y=-16.0  size= NSSize width=529.0 height=572.0   len(bounds)\n2  len(bounds[0])\n2  len(bounds[1])\n2  print bounds[0] NSPoint x=40.0 y=-16.0   bounds[0][0]\n40.0", 
            "title": "Glyph"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#center", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "CENTER"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#bottom", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "BOTTOM"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#min_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#foundpattern", 
            "text": "", 
            "title": "FoundPattern"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#textrun", 
            "text": "", 
            "title": "TextRun"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#middle", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "MIDDLE"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#textline", 
            "text": "", 
            "title": "TextLine"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#textbox", 
            "text": "", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#right", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "RIGHT"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/elements/pbtextbox/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/paths/", 
            "text": "elements.paths\n\n\nClasses\n\n\n\n\npagebot.elements.paths.glyphpath\n\n\npagebot.elements.paths.pbpath\n\n\n\n\nModules\n\n\nFunctions\n\n\npbpath", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/elements/paths/#elementspaths", 
            "text": "", 
            "title": "elements.paths"
        }, 
        {
            "location": "/pagebot/elements/paths/#classes", 
            "text": "pagebot.elements.paths.glyphpath  pagebot.elements.paths.pbpath", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/elements/paths/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/elements/paths/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/paths/#pbpath", 
            "text": "", 
            "title": "pbpath"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/", 
            "text": "elements.paths.glyphpath\n\n\nFunctions\n\n\nDEFAULT_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nGlyphPath\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nDEFAULT_HEIGHT\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nPath\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.", 
            "title": "Glyphpath"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#elementspathsglyphpath", 
            "text": "", 
            "title": "elements.paths.glyphpath"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#default_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#glyphpath", 
            "text": "", 
            "title": "GlyphPath"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#default_height", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEFAULT_HEIGHT"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#path", 
            "text": "", 
            "title": "Path"
        }, 
        {
            "location": "/pagebot/elements/paths/glyphpath/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/paths/pbpath/", 
            "text": "elements.paths.pbpath\n\n\nFunctions\n\n\nElement\n\n\nPath", 
            "title": "Pbpath"
        }, 
        {
            "location": "/pagebot/elements/paths/pbpath/#elementspathspbpath", 
            "text": "", 
            "title": "elements.paths.pbpath"
        }, 
        {
            "location": "/pagebot/elements/paths/pbpath/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/paths/pbpath/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/paths/pbpath/#path", 
            "text": "", 
            "title": "Path"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/", 
            "text": "elements.variablefonts\n\n\nClasses\n\n\n\n\npagebot.elements.variablefonts.variablecircle\n\n\npagebot.elements.variablefonts.variablecube\n\n\npagebot.elements.variablefonts.variablecube2\n\n\npagebot.elements.variablefonts.variableeditor\n\n\npagebot.elements.variablefonts.variableglyphs\n\n\npagebot.elements.variablefonts.variablescatter\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/#elementsvariablefonts", 
            "text": "", 
            "title": "elements.variablefonts"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/#classes", 
            "text": "pagebot.elements.variablefonts.variablecircle  pagebot.elements.variablefonts.variablecube  pagebot.elements.variablefonts.variablecube2  pagebot.elements.variablefonts.variableeditor  pagebot.elements.variablefonts.variableglyphs  pagebot.elements.variablefonts.variablescatter", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/", 
            "text": "elements.variablefonts.variablecircle\n\n\nFunctions\n\n\nfunction getVarLocation\n\n\nTranslate the normalized location dict (all values between 0 and 1) to what the font expects\nby its min/max values for each axis.\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nMIN_WIDTH\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction generateInstance\n\n\nInstantiate an instance of a variable font at the specified location.\nKeyword arguments:\nvarfilename -- a variable font file path\nlocation -- a dictionary of axis tag and value {\"wght\": 0.75, \"wdth\": -0.5}\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nVariableCircle\n\n\nInterpret the content of the self.font variable font and draw a circle info graphic on that info.\nInformation is derived from the Variable Font and automatic converted into\nan info-grapgic, showing a simplified model of the design space.\nTo show all possible interpoaltion, it would need to visualize an n-dimensional\nspace (where n is the amount of axes in the font). In the simplified model\nall axes are represented as spikes/needles on a wheel, where the amount of\npenetration in the neutral glyph defined the influence of that axis.\nIn that respect is it not much better than a list of sliders, but at least this\nmodel allows to show interactions between axes, by putting them on another \nangle on the circle.\n\n\nfunction drawGlyphPath\n\n\nfunction getVariableFont\n\n\nThe variablesFontPath refers to the file of the source variable font.\nThe nLocation is dictionary axis locations of the instance with values between (0, 1000), e.g.\n{\"wght\": 0, \"wdth\": 1000}\n\n\ndivision\n\n\nElement\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.", 
            "title": "Variablecircle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#elementsvariablefontsvariablecircle", 
            "text": "", 
            "title": "elements.variablefonts.variablecircle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-getvarlocation", 
            "text": "Translate the normalized location dict (all values between 0 and 1) to what the font expects\nby its min/max values for each axis.", 
            "title": "function getVarLocation"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#min_width", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "MIN_WIDTH"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-generateinstance", 
            "text": "Instantiate an instance of a variable font at the specified location.\nKeyword arguments:\nvarfilename -- a variable font file path\nlocation -- a dictionary of axis tag and value {\"wght\": 0.75, \"wdth\": -0.5}", 
            "title": "function generateInstance"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#variablecircle", 
            "text": "Interpret the content of the self.font variable font and draw a circle info graphic on that info.\nInformation is derived from the Variable Font and automatic converted into\nan info-grapgic, showing a simplified model of the design space.\nTo show all possible interpoaltion, it would need to visualize an n-dimensional\nspace (where n is the amount of axes in the font). In the simplified model\nall axes are represented as spikes/needles on a wheel, where the amount of\npenetration in the neutral glyph defined the influence of that axis.\nIn that respect is it not much better than a list of sliders, but at least this\nmodel allows to show interactions between axes, by putting them on another \nangle on the circle.", 
            "title": "VariableCircle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-drawglyphpath", 
            "text": "", 
            "title": "function drawGlyphPath"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-getvariablefont", 
            "text": "The variablesFontPath refers to the file of the source variable font.\nThe nLocation is dictionary axis locations of the instance with values between (0, 1000), e.g.\n{\"wght\": 0, \"wdth\": 1000}", 
            "title": "function getVariableFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecircle/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/", 
            "text": "elements.variablefonts.variablecube\n\n\nFunctions\n\n\ndivision\n\n\nElement\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nVariableCube", 
            "title": "Variablecube"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#elementsvariablefontsvariablecube", 
            "text": "", 
            "title": "elements.variablefonts.variablecube"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube/#variablecube", 
            "text": "", 
            "title": "VariableCube"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/", 
            "text": "elements.variablefonts.variablecube2\n\n\nFunctions\n\n\ndivision\n\n\nElement\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nVariableCube", 
            "title": "Variablecube2"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#elementsvariablefontsvariablecube2", 
            "text": "", 
            "title": "elements.variablefonts.variablecube2"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablecube2/#variablecube", 
            "text": "", 
            "title": "VariableCube"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/", 
            "text": "elements.variablefonts.variableeditor\n\n\nFunctions\n\n\nDatePicker\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the date picker control.\n\n\n+-------------------------------------+\n| \nStandard Dimensions - Text Mode\n |\n+---------+---+-----------------------+\n| Regular | H | 22|\n+---------+---+-----------------------+\n| Small   | H | 19|\n+---------+---+-----------------------+\n| Mini| H | 16|\n+---------+---+-----------------------+\n\n\n+------------------------------------------+\n| \nStandard Dimensions - Graphical Mode\n |\n+--------------------+---------------------+\n| Calendar and Clock | 227w 148h   |\n+--------------------+---------------------+\n| Calendar   | 139w 148h   |\n+--------------------+---------------------+\n| Clock  | 122w 123h   |\n+--------------------+---------------------+\n\n\ndate\n A \nNSDate\n object representing the date and time that should be set in the control.\n\n\nminDate\n A \nNSDate\n object representing the lowest date and time that can be set in the control.\n\n\nmaxDate\n A \nNSDate\n object representing the highest date and time that can be set in the control.\n\n\nshowStepper\n A boolean indicating if the thumb stepper should be shown in text mode.\n\n\nmode\n A string representing the desired mode for the date picker control. The options are:\n\n\n+-------------+\n| \"text\"  |\n+-------------+\n| \"graphical\" |\n+-------------+\n\n\ntimeDisplay\n A string representing the desired time units that should be displayed in the\ndate picker control. The options are:\n\n\n+--------------------+-------------------------------+\n| None   | Do not display time.  |\n+--------------------+-------------------------------+\n| \"hourMinute\"   | Display hour and minute.  |\n+--------------------+-------------------------------+\n| \"hourMinuteSecond\" | Display hour, minute, second. |\n+--------------------+-------------------------------+\n\n\ndateDisplay\n A string representing the desired date units that should be displayed in the\ndate picker control. The options are:\n\n\n+----------------+------------------------------+\n| None   | Do not display date. |\n+----------------+------------------------------+\n| \"yearMonth\"| Display year and month.  |\n+----------------+------------------------------+\n| \"yearMonthDay\" | Display year, month and day. |\n+----------------+------------------------------+\n\n\nsizeStyle\n A string representing the desired size style of the date picker control. This only\napplies in text mode. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nFloatingWindow\n\n\nA window that floats above all other windows.\n\n\nTo add a control to a window, simply set it as an attribute of the window.\n\n\nfrom vanilla import *\n\n\nclass FloatingWindowDemo(object):\n\n\ndef \ninit\n(self):\nself.w = FloatingWindow((200, 70), \"FloatingWindow Demo\")\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()\n\n\nFloatingWindowDemo()\n\n\nNo special naming is required for the attributes. However, each attribute\nmust have a unique name.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the window. It may also be a tuple of form \n(width, height)\n.\nIn this case, the window will be positioned on screen automatically.\n\n\ntitle\n The title to be set in the title bar of the window.\n\n\nminSize\n Tuple of the form \n(width, height)\n representing the minimum size\nthat the window can be resized to.\n\n\nmaxSize\n Tuple of the form \n(width, height)\n representing the maximum size\nthat the window can be resized to.\n\n\ntextured\n Boolean value representing if the window should have a textured\nappearance or not.\n\n\nautosaveName\n A string representing a unique name for the window. If given,\nthis name will be used to store the window position and size in the application\npreferences.\n\n\nclosable\n Boolean value representing if the window should have a close button\nin the title bar.\n\n\nscreen\n A \nNSScreen \nhttp://tinyurl.com/NSScreen\n_ object indicating the screen that\nthe window should be drawn to. When None the window will be drawn to the main screen.\n\n\nCheckBox\n\n\nGroup\n\n\nAn invisible container for controls.\n\n\nTo add a control to a group, simply set it as an attribute of the group.::\n\n\nfrom vanilla import *\n\n\nclass GroupDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((150, 50))\nself.w.group = Group((10, 10, -10, -10))\nself.w.group.text = TextBox((0, 0, -0, -0),\n\"This is a group\")\nself.w.open()\n\n\nGroupDemo()\n\n\nNo special naming is required for the attributes. However, each attribute must have a unique name.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the group.\n\n\nblendingMode\n The blending mode for the window. These are the possible options:\n\n\n+----------------+-------------------------------------------+\n| None   | No special blending.  |\n+----------------+-------------------------------------------+\n| \"behindWindow\" | Blend with the content behind the window. |\n+----------------+-------------------------------------------+\n| \"withinWindow\" | Blend with the content within the window. |\n+----------------+-------------------------------------------+\n\n\nPopUpButton\n\n\nA button which, when selected, displays a list of items for the user to choose from.::\n\n\nfrom vanilla import *\n\n\nclass PopUpButtonDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 40))\nself.w.popUpButton = PopUpButton((10, 10, -10, 20),\n  [\"A\", \"B\", \"C\"],\n  callback=self.popUpButtonCallback)\nself.w.open()\n\n\ndef popUpButtonCallback(self, sender):\nprint \"pop up button selection!\", sender.get()\n\n\nPopUpButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and\nsize of the pop up button. The size of the button sould match the appropriate value\nfor the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 20|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+\n\n\nitems\n A list of items to appear in the pop up list.\n\n\ncallback\n The method to be called when the user selects an item in the pop up list.\n\n\nsizeStyle\n A string representing the desired size style of the pop up button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nfunction ImageListCell\n\n\nhorizontalAlignment\n A string representing the desired horizontal\nalignment of the image in the view. The options are:\n\n\n+-------------+-------------------------+\n| \"left\"  | Image is aligned left.  |\n+-------------+-------------------------+\n| \"right\" | Image is aligned right. |\n+-------------+-------------------------+\n| \"center\"| Image is centered.  |\n+-------------+-------------------------+\n\n\nverticalAlignment\n A string representing the desired vertical alignment\nof the image in the view. The options are:\n\n\n+-------------+--------------------------+\n| \"top\"   | Image is aligned top.|\n+-------------+--------------------------+\n| \"bottom\"| Image is aligned bottom. |\n+-------------+--------------------------+\n| \"center\"| Image is centered.   |\n+-------------+--------------------------+\n\n\nscale\n A string representing the desired scale style of the image in the\nview. The options are:\n\n\n+----------------+----------------------------------------------+\n| \"porportional\" | Proportionally scale the image to fit in the |\n|| view if it is larger than the view.  |\n+----------------+----------------------------------------------+\n| \"fit\"  | Distort the proportions of the image until   |\n|| it fits exactly in the view. |\n+----------------+----------------------------------------------+\n| \"none\" | Do not scale the image.  |\n+----------------+----------------------------------------------+\n\n\nExample::\n\n\nfrom AppKit import *\nfrom vanilla import *\n\n\nclass ImageListCellDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n[\n{\"image\": NSImage.imageNamed_(\"NSActionTemplate\")},\n{\"image\": NSImage.imageNamed_(\"NSRefreshTemplate\")}\n],\ncolumnDescriptions=[\n{\"title\": \"image\", \"cell\": ImageListCell()}\n])\nself.w.open()\n\n\nImageListCellDemo()\n\n\nVanillaBaseControl\n\n\nEditText\n\n\nStandard short text entry control.::\n\n\nfrom vanilla import *\n\n\nclass EditTextDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 42))\nself.w.editText = EditText((10, 10, -10, 22),\ncallback=self.editTextCallback)\nself.w.open()\n\n\ndef editTextCallback(self, sender):\nprint \"text entry!\", sender.get()\n\n\nEditTextDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the text entry control.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 19|\n+---------+---+-----------+\n| Mini| H | 16|\n+---------+---+-----------+\n\n\ntext\n An object representing the contents of the text entry control. If no formatter has been assigned to the control,\nthis should be a string. If a formatter has been assigned, this should be an object of the type that the formatter expects.\n\n\ncallback\n The method to be called when the user enters text.\n\n\ncontinuous\n If True, the callback (if any) will be called upon each keystroke, if False, only call the callback when\nediting finishes. Default is True.\n\n\nreadOnly\n Boolean representing if the text can be edited or not.\n\n\nformatter\n An \nNSFormatter \nhttp://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html\n_\nfor controlling the display and input of the text entry.\n\n\nplaceholder\n A placeholder string to be shown when the text entry control is empty.\n\n\nsizeStyle\n A string representing the desired size style of the text entry control. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nTabs\n\n\nA drawer attached to a window. Drawers are capable of containing controls.\n\n\nTo add a control to a tab, simply set it as an attribute of the tab.::\n\n\nfrom vanilla import *\n\n\nclass TabDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((250, 100))\nself.w.tabs = Tabs((10, 10, -10, -10), [\"Tab One\", \"Tab Two\"])\ntab1 = self.w.tabs[0]\ntab1.text = TextBox((10, 10, -10, -10), \"This is tab 1\")\ntab2 = self.w.tabs[1]\ntab2.text = TextBox((10, 10, -10, -10), \"This is tab 2\")\nself.w.open()\n\n\nTabDemo()\n\n\nNo special naming is required for the attributes. However, each attribute\nmust have a unique name.\n\n\nTo retrieve a particular tab, access it by index:::\n\n\nmyTab = self.w.tabs[0]\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the tabs.\n\n\ntitles\n An ordered list of tab titles.\n\n\ncallback\n The method to be called when the user selects a new tab.\n\n\nsizeStyle\n A string representing the desired size style of the tabs.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nfunction CheckBoxListCell\n\n\nAn object that displays a check box in a List column.\n\n\nThis object should only be used in the \ncolumnDescriptions\n\nargument during the construction of a List.\n\n\ntitle\n The title to be set in \nall\n items in the List column.\n\n\nExample::\n\n\nfrom vanilla import *\n\n\nclass CheckBoxListCellDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n [{\"value\": True}, {\"value\": False}],\n columnDescriptions=[{\"title\": \"value\", \"cell\": CheckBoxListCell()}],\n editCallback=self.editCallback)\nself.w.open()\n\n\ndef editCallback(self, sender):\nprint sender.get()\n\n\nCheckBoxListCellDemo()\n\n\nWindow\n\n\nA window capable of containing controls.\n\n\nTo add a control to a window, simply set it as an attribute of the window.::\n\n\nfrom vanilla import *\n\n\nclass WindowDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 70), \"Window Demo\")\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()\n\n\nWindowDemo()\n\n\nNo special naming is required for the attributes. However, each attribute\nmust have a unique name.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and\nsize of the window. It may also be a tuple of form \n(width, height)\n. In this case,\nthe window will be positioned on screen automatically.\n\n\ntitle\n The title to be set in the title bar of the window.\n\n\nminSize\n Tuple of the form \n(width, height)\n representing the minimum size that\nthe window can be resized to.\n\n\nmaxSize\n Tuple of the form \n(width, height)\n representing the maximum size that\nthe window can be resized to.\n\n\ntextured\n Boolean value representing if the window should have a textured\nappearance or not.\n\n\nautosaveName\n A string representing a unique name for the window. If given,\nthis name will be used to store the window position and size in the application preferences.\n\n\nclosable\n Boolean value representing if the window should have a close button in the\ntitle bar.\n\n\nminiaturizable\n Boolean value representing if the window should have a minimize button\nin the title bar.\n\n\ninitiallyVisible\n Boolean value representing if the window will be initially visible.\nDefault is \nTrue\n. If \nFalse\n, you can show the window later by calling \nwindow.show()\n.\n\n\nfullScreenMode\n An indication of the full screen mode. These are the options:\n\n\n+---------------+---------------------------------------------------------------+\n| \nNone\n| The window does not allow full screen.|\n+---------------+---------------------------------------------------------------+\n| \n\"primary\"\n   | Corresponds to NSWindowCollectionBehaviorFullScreenPrimary.   |\n+---------------+---------------------------------------------------------------+\n| \n\"auxiliary\"\n | Corresponds to NSWindowCollectionBehaviorFullScreenAuxiliary. |\n+---------------+---------------------------------------------------------------+\n\n\ntitleVisible\n Boolean value indicating if the window title should be displayed.\n\n\nfullSizeContentView\n Boolean value indicating if the content view should be the\nfull size of the window, including the area underneath the titlebar and toolbar.\n\n\nscreen\n A \nNSScreen \nhttp://tinyurl.com/NSScreen\n_ object indicating the screen that\nthe window should be drawn to. When None the window will be drawn to the main screen.\n\n\nRadioGroup\n\n\nA collection of radio buttons.::\n\n\nfrom vanilla import *\n\n\nclass RadioGroupDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 60))\nself.w.radioGroup = RadioGroup((10, 10, -10, 40),\n[\"Option 1\", \"Option 2\"],\ncallback=self.radioGroupCallback)\nself.w.open()\n\n\ndef radioGroupCallback(self, sender):\nprint \"radio group edit!\", sender.get()\n\n\nRadioGroupDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the radio group.\n\n\ntitles\n A list of titles to be shown next to the radio buttons.\n\n\nisVertical\n Boolean representing if the radio group is\nvertical or horizontal.\n\n\ncallback\n The method to be caled when a radio button is selected.\n\n\nsizeStyle\n A string representing the desired size style of the radio group.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nPopover\n\n\nA popover capable of containing controls.\n\n\nsize\n Tuple of form \n(width, height)\n representing the size of the content\nin the popover.\n\n\nsize\n The parent view that the popover should pop out from. This can be either\na vanilla object or an instance of NSView or NSView subclass.\n\n\npreferredEdge\n The edge of the parent view that you want the popover\nto pop out from. These are the options:\n+------------+\n| \n\"left\"\n   |\n+------------+\n| \n\"right\"\n  |\n+------------+\n| \n\"top\"\n|\n+------------+\n| \n\"bottom\"\n |\n+------------+\n\n\nbehavior\n The desired behavior of the popover. These are the options:\n+------------------------+-----------------------------------------------------+\n| \n\"applicationDefined\"\n | Corresponds to NSPopoverBehaviorApplicationDefined. |\n+------------------------+-----------------------------------------------------+\n| \n\"transient\"\n  | Corresponds to NSPopoverBehaviorTransient.  |\n+------------------------+-----------------------------------------------------+\n| \n\"semitransient\"\n  | Corresponds to NSPopoverBehaviorSemitransient.  |\n+------------------------+-----------------------------------------------------+\n\n\nSheet\n\n\nA window that is attached to another window.\n\n\nTo add a control to a sheet, simply set it as an attribute of the sheet.::\n\n\nfrom vanilla import *\n\n\nclass SheetDemo(object):\n\n\ndef \ninit\n(self, parentWindow):\nself.w = Sheet((200, 70), parentWindow)\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()\n\n\nSheetDemo()\n\n\nNo special naming is required for the attributes. However, each attribute\nmust have a unique name.\n\n\nposSize\n Tuple of form \n(width, height)\n representing the size of the sheet.\n\n\nparentWindow\n The window that the sheet should be attached to.\n\n\nminSize\n Tuple of the form \n(width, height)\n representing the minimum size that\nthe sheet can be resized to.\n\n\nmaxSize\n Tuple of the form \n(width, height)\n representing the maximum size that\nthe sheet can be resized to.\n\n\nautosaveName\n A string representing a unique name for the sheet. If given,\nthis name will be used to store the sheet size in the application preferences.\n\n\nfunction SegmentedButtonListCell\n\n\nsegmentDescriptions\n An ordered list of dictionaries describing the segments.\n\n\n+------------------------+--------------------------------------------------------------------------------------------------+\n| title (optional)   | The title of the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imagePath (optional)   | A file path to an image to display in the segment.   |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageNamed (optional)  | The name of an image already loaded as a \nNSImage\n by the application to display in the segment. |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageObject (optional) | A \nNSImage\n object to display in the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n\n\nNote: when using this cell in a List, the \nbinding\n in the\ncolumn description must be set to \nselectedIndex\n.\n\n\nExample::\n\n\nfrom vanilla import *\n\n\nclass SegmentedButtonListCellDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n[{\"value\": 0}, {\"value\": 1}],\ncolumnDescriptions=[\n{\n\"title\": \"value\",\n\"cell\": SegmentedButtonListCell([dict(title=\"0\"), dict(title=\"1\")]),\n\"binding\": \"selectedIndex\"\n}\n],\neditCallback=self.editCallback)\nself.w.open()\n\n\ndef editCallback(self, sender):\nprint sender.get()\n\n\nSegmentedButtonListCellDemo()\n\n\nColorWell\n\n\nA control that allows for showing and choosing a color value.\n\n\nColorWell objects handle\n\nNSColor \nhttp://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSColor_Class/index.html\n_\nobjects.::\nfrom AppKit import NSColor\nfrom vanilla import *\n\n\nclass ColorWellDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 50))\nself.w.colorWell = ColorWell((10, 10, -10, -10),\ncallback=self.colorWellEdit,\ncolor=NSColor.redColor())\nself.w.open()\n\n\ndef colorWellEdit(self, sender):\nprint \"color well edit!\", sender.get()\n\n\nColorWellDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the color well.\n\n\ncallback\n The method to be caled when the user selects a new color.\n\n\ncolor\n A \nNSColor\n object. If \nNone\n is given, the color shown will be white.\n\n\nHorizontalLine\n\n\nA horizontal line.::\n\n\nfrom vanilla import *\n\n\nclass HorizontalLineDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 20))\nself.w.line = HorizontalLine((10, 10, -10, 1))\nself.w.open()\n\n\nHorizontalLineDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the line.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---+---------------------+\n| H | 1   |\n+---+---------------------+\n\n\nHelpButton\n\n\nA standard help button.::\n\n\nfrom vanilla import *\n\n\nclass HelpButtonDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((90, 40))\n self.w.button = HelpButton((10, 10, 21, 20),\ncallback=self.buttonCallback)\n self.w.open()\n\n\ndef buttonCallback(self, sender):\n print \"help button hit!\"\n\n\nHelpButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and\nsize of the button. The size of the button sould match the standard dimensions.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+--------+----------------+\n| Width  | 21 |\n+--------+----------------+\n| Height | 20 |\n+--------+----------------+\n\n\ncallback\n The method to be called when the user presses the button.\n\n\nfunction getAxisInfo\n\n\nDrawer\n\n\nA drawer attached to a window. Drawers are capable of containing controls.\n\n\nTo add a control to a drawer, simply set it as an attribute of the drawer.::\n\n\nfrom vanilla import *\n\n\nclass DrawerDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 200))\nself.w.button = Button((10, 10, -10, 20), \"Toggle Drawer\",\ncallback=self.toggleDrawer)\nself.d = Drawer((100, 150), self.w)\nself.d.textBox = TextBox((10, 10, -10, -10),\n\"This is a drawer.\")\nself.w.open()\nself.d.open()\n\n\ndef toggleDrawer(self, sender):\nself.d.toggle()\n\n\nDrawerDemo()\n\n\nNo special naming is required for the attributes. However, each attribute must have a unique name.\n\n\nsize\n Tuple of form \n(width, height)\n representing the size of the drawer.\n\n\nparentWindow\n The window that the drawer should be attached to.\n\n\nminSize\n Tuple of form \n(width, height)\n representing the minimum size of the drawer.\n\n\nmaxSize\n Tuple of form \n(width, height)\n representing the maximum size of the drawer.\n\n\npreferredEdge\n The preferred edge of the window that the drawe should be attached to. If the\ndrawer cannot be opened on the preferred edge, it will be opened on the opposite edge. The options are:\n\n\n+----------+\n| \"left\"   |\n+----------+\n| \"right\"  |\n+----------+\n| \"top\"|\n+----------+\n| \"bottom\" |\n+----------+\n\n\nforceEdge\n Boolean representing if the drawer should \nalways\n be opened on the preferred edge.\n\n\nleadingOffset\n Distance between the top or left edge of the drawer and the parent window.\n\n\ntrailingOffset\n Distance between the bottom or right edge of the drawer and the parent window.\n\n\nfunction intToTag\n\n\nComboBox\n\n\nA text entry control that allows direct text entry or selection for a list of options.::\n\n\nfrom vanilla import *\n\n\nclass ComboBoxDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 41))\nself.w.comboBox = ComboBox((10, 10, -10, 21),\n[\"AA\", \"BB\", \"CC\", \"DD\"],\ncallback=self.comboBoxCallback)\nself.w.open()\n\n\ndef comboBoxCallback(self, sender):\nprint \"combo box entry!\", sender.get()\n\n\nComboBoxDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the\ncombo box control. The size of the combo box sould match the appropriate value for the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 21|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 14|\n+---------+---+-----------+\n\n\nitems\n The items to be displayed in the combo box.\n\n\ncompletes\n Boolean representing if the combo box auto completes entered text.\n\n\ncontinuous\n If True, the callback (if any) will be called upon each keystroke, if False, only call the callback when\nediting finishes or after item selection. Default is False.\n\n\ncallback\n The method to be called when the user enters text.\n\n\nformatter\n An \nNSFormatter \nhttp://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html\n_\nfor controlling the display and input of the combo box.\n\n\nsizeStyle\n A string representing the desired size style of the combo box. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nSecureEditText\n\n\nStandard secure text entry control.::\n\n\nfrom vanilla import *\n\n\nclass SecureEditTextDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 42))\nself.w.secureEditText = SecureEditText((10, 10, -10, 22),\ncallback=self.secureEditTextCallback)\nself.w.open()\n\n\ndef secureEditTextCallback(self, sender):\nprint \"text entry!\", sender.get()\n\n\nSecureEditTextDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the text entry control.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 19|\n+---------+---+-----------+\n| Mini| H | 16|\n+---------+---+-----------+\n\n\ntext\n An object representing the contents of the text entry control. If no formatter has been assigned to the control,\nthis should be a string. If a formatter has been assigned, this should be an object of the type that the formatter expects.\n\n\ncallback\n The method to be called when the user enters text.\n\n\ncontinuous\n If True, the callback (if any) will be called upon each keystroke, if False, only call the callback when\nediting finishes. Default is True.\n\n\nreadOnly\n Boolean representing if the text can be edited or not.\n\n\nformatter\n An \nNSFormatter \nhttp://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html\n_\nfor controlling the display and input of the text entry.\n\n\nplaceholder\n A placeholder string to be shown when the text entry control is empty.\n\n\nsizeStyle\n A string representing the desired size style of the text entry control. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nActionButton\n\n\nAn Action Button with a menu.\n\n\nfrom vanilla import *\n\n\nclass ActionPopUpButtonDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 40))\n\n\nitems = [\ndict(title=\"first\", callback=self.firstCallback),\ndict(title=\"second\", callback=self.secondCallback),\ndict(title=\"third\", items=[\ndict(title=\"sub first\", callback=self.subFirstCallback)\n])\n]\n\n\nself.w.actionPopUpButton = ActionButton((10, 10, 30, 20),\n  items,\n  )\nself.w.open()\n\n\ndef firstCallback(self, sender):\nprint \"first\"\n\n\ndef secondCallback(self, sender):\nprint \"second\"\n\n\ndef subFirstCallback(self, sender):\nprint \"sub first\"\n\n\nActionPopUpButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and\nsize of the pop up button. The size of the button sould match the appropriate value\nfor the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 20|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+\n\n\nitems\n A list of items to appear in the pop up list as dictionaries. Optionally an item could be a NSMenuItem. \nwhen an item is set to \"----\" will be a menu item separator.\n\n\n+------------+--------------------------------------------------------------------------------+\n| \"title\"*   | The title of the item. |\n+------------+--------------------------------------------------------------------------------+\n| \"callback\" | The callback fo the item.  |\n+------------+--------------------------------------------------------------------------------+\n| \"items\"| Each item could have sub menu's, as list of dictionaries with the same format. |\n+------------+--------------------------------------------------------------------------------+\n\n\nsizeStyle\n A string representing the desired size style of the pop up button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nbordered\n Boolean representing if the button should be bordered.\n\n\nSlider\n\n\nA standard slider control. Sliders can be vertical or horizontal and\nthey can show tick marks or not show tick marks.::\n\n\nfrom vanilla import *\n\n\nclass SliderDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((200, 43))\n self.w.slider = Slider((10, 10, -10, 23),\ntickMarkCount=10,\ncallback=self.sliderCallback)\n self.w.open()\n\n\ndef sliderCallback(self, sender):\n print \"slider edit!\", sender.get()\n\n\nSliderDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and\nsize of the slider. The size of the slider sould match the appropriate value for\nthe given \nsizeStyle\n.\n\n\n+---------------------------+\n| \nStandard Dimensions\n   |\n+---------------------------+\n| \nwithout ticks\n   |\n+---------+---+----+---+----+\n| Regular | W | 15 | H | 15 |\n+---------+---+----+---+----+\n| Small   | W | 12 | H | 11 |\n+---------+---+----+---+----+\n| Mini| W | 10 | H | 10 |\n+---------+---+----+---+----+\n| \nwith ticks\n  |\n+---------+---+----+---+----+\n| Regular | W | 24 | H | 23 |\n+---------+---+----+---+----+\n| Small   | W | 17 | H | 17 |\n+---------+---+----+---+----+\n| Mini| W | 16 | H | 16 |\n+---------+---+----+---+----+\n\n\nminValue\n The minimum value allowed by the slider.\n\n\nmaxValue\n The maximum value allowed by the slider.\n\n\nvalue\n The initial value of the slider.\n\n\ntickMarkCount\n The number of tick marcks to be displayed on the slider.\nIf \nNone\n is given, no tick marks will be displayed.\n\n\nstopOnTickMarks\n Boolean representing if the slider knob should only\nstop on the tick marks.\n\n\ncontinuous\n Boolean representing if the assigned callback should be\ncalled during slider editing. If \nFalse\n is given, the callback will be\ncalled after the editing has finished.\n\n\ncallback\n The method to be called when the slider has been edited.\n\n\nsizeStyle\n A string representing the desired size style of the slider.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nSplitView2\n\n\nView that can be split into two or more subviews with dividers.::\n\n\nfrom vanilla import *\n\n\nclass SplitViewDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 200), \"SplitView Demo\", minSize=(100, 100))\nlist1 = List((0, 0, -0, 100), [\"A\", \"B\", \"C\"])\nlist2 = List((0, 0, -0, 100), [\"a\", \"b\", \"c\"])\npaneDescriptors = [\ndict(view=list1, identifier=\"pane1\"),\ndict(view=list2, identifier=\"pane2\"),\n]\nself.w.splitView = SplitView((0, 0, -0, -0), paneDescriptors)\nself.w.open()\n\n\nSplitViewDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the split view.\n\n\npaneDescriptions\n An ordered list of dictionaries describing the\nsubviews, or \"panes\". Those dictionaries can have the following keys:\n\n\n+-----------------------+-----------------------------------------------------------------------------+\n| \nview\n| A view, either a Vanilla object or a NSView. Required.  |\n+-----------------------+-----------------------------------------------------------------------------+\n| \n\"identifier\"\n| A string identifying the pane. Required.|\n+-----------------------+-----------------------------------------------------------------------------+\n| \n\"size\"\n  | The initial size of the pane. Optional. |\n+-----------------------+-----------------------------------------------------------------------------+\n| \n\"minSize\"\n   | The minimum size of the pane. Optional. The default is 0.   |\n+-----------------------+-----------------------------------------------------------------------------+\n| \n\"maxSize\"\n   | The maximum size of the pane. Optional. The default is no maximum size. |\n+-----------------------+-----------------------------------------------------------------------------+\n| \n\"canCollapse\"\n   | Boolean indicating if the pane can collapse. Optional. The default is True. |\n+-----------------------+-----------------------------------------------------------------------------+\n| \n\"resizeFlexibility\"\n | Boolean indicating if the pane can adjust its size automatically when the   |\n|   | SplitView size changes. Optional. The default is True unless the pane has a |\n|   | fixed size. |\n+-----------------------+-----------------------------------------------------------------------------+\n\n\nisVertical\n Boolean representing if the split view is vertical.\nDefault is \nTrue\n.\n\n\ndividerStyle\n String representing the style of the divider.\nThese are the options:\n+----------+\n| splitter |\n+----------+\n| thin |\n+----------+\n| thick|\n+----------+\n| None |\n+----------+\n\n\ndividerThickness\n An integer representing the desired thickness of the divider.\n\n\ndividerColor\n A NSColor that should be used to paint the divider.\n\n\nautosaveName\n The autosave name for the SplitView.\n\n\nVarFontTextEditor\n\n\nBox\n\n\nA bordered container for other controls.\n\n\nTo add a control to a box, simply set it as an attribute of the box.::\n\n\nfrom vanilla import *\n\n\nclass BoxDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((150, 70))\nself.w.box = Box((10, 10, -10, -10))\nself.w.box.text = TextBox((10, 10, -10, -10), \"This is a box\")\nself.w.open()\n\n\nBoxDemo()\n\n\nNo special naming is required for the attributes. However, each attribute must have a unique name.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the box.\n\n\ntitle\n The title to be displayed dabove the box. Pass \nNone\n if no title is desired.\n\n\nGradientButton\n\n\nfunction LevelIndicatorListCell\n\n\nAn object that displays a level indicator in a List column.\n\n\nThis object should only be used in the \ncolumnDescriptions\n argument\nduring the construction of a List.\n::\n\n\nfrom vanilla import *\n\n\nclass LevelIndicatorListCellDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((340, 140))\n items = [\n {\"discrete\": 3, \"continuous\": 4, \"rating\": 1, \"relevancy\": 9},\n {\"discrete\": 8, \"continuous\": 3, \"rating\": 5, \"relevancy\": 5},\n {\"discrete\": 3, \"continuous\": 7, \"rating\": 3, \"relevancy\": 4},\n {\"discrete\": 2, \"continuous\": 5, \"rating\": 4, \"relevancy\": 7},\n {\"discrete\": 6, \"continuous\": 9, \"rating\": 3, \"relevancy\": 2},\n {\"discrete\": 4, \"continuous\": 0, \"rating\": 6, \"relevancy\": 8},\n ]\n columnDescriptions = [\n {\"title\": \"discrete\",\n \"cell\": LevelIndicatorListCell(style=\"discrete\", warningValue=7, criticalValue=9)},\n {\"title\": \"continuous\", \n \"cell\": LevelIndicatorListCell(style=\"continuous\", warningValue=7, criticalValue=9)},\n {\"title\": \"rating\",\n \"cell\": LevelIndicatorListCell(style=\"rating\", maxValue=6)},\n {\"title\": \"relevancy\",\n \"cell\": LevelIndicatorListCell(style=\"relevancy\")},\n ]\n self.w.list = List((0, 0, -0, -0), items=items,\ncolumnDescriptions=columnDescriptions)\n self.w.open()\n\n\nLevelIndicatorListCellDemo()\n\n\nstyle\n The style of the level indicator. The options are:\n\n\n+--------------+-----------------------------------------+\n| \"continuous\" | A continuous bar.   |\n+--------------+-----------------------------------------+\n| \"discrete\"   | A segmented bar.|\n+--------------+-----------------------------------------+\n| \"rating\" | A row of stars. Similar to the rating   |\n|  | indicator in iTunes.|\n+--------------+-----------------------------------------+\n| \"relevancy\"  | A row of lines. Similar to the search   |\n|  | result relevancy indicator in Mail. |\n+--------------+-----------------------------------------+\n\n\nminValue\n The minimum value allowed by the level indicator.\n\n\nmaxValue\n The maximum value allowed by the level indicator.\n\n\nwarningValue\n The value at which the filled portions of the\nlevel indicator should display the warning color. Applies only to\ndiscrete and continuous level indicators.\n\n\ncriticalValue\n The value at which the filled portions of the\nlevel indicator should display the critical color. Applies only to\ndiscrete and continuous level indicators.\n\n\nHUDFloatingWindow\n\n\nA window that floats above all other windows and has the HUD appearance.\n\n\nTo add a control to a window, simply set it as an attribute of the window.\n\n\nfrom vanilla import *\n\n\nclass HUDFloatingWindowDemo(object):\n\n\ndef \ninit\n(self):\nself.w = HUDFloatingWindow((200, 70), \"HUDFloatingWindow Demo\")\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()\n\n\nHUDFloatingWindowDemo()\n\n\nNo special naming is required for the attributes. However, each attribute\nmust have a unique name.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the window. It may also be a tuple of form \n(width, height)\n.\nIn this case, the window will be positioned on screen automatically.\n\n\ntitle\n The title to be set in the title bar of the window.\n\n\nminSize\n Tuple of the form \n(width, height)\n representing the minimum size\nthat the window can be resized to.\n\n\nmaxSize\n Tuple of the form \n(width, height)\n representing the maximum size\nthat the window can be resized to.\n\n\ntextured\n Boolean value representing if the window should have a textured\nappearance or not.\n\n\nautosaveName\n A string representing a unique name for the window. If given,\nthis name will be used to store the window position and size in the application\npreferences.\n\n\nclosable\n Boolean value representing if the window should have a close button\nin the title bar.\n\n\nscreen\n A \nNSScreen \nhttp://tinyurl.com/NSScreen\n_ object indicating the screen that\nthe window should be drawn to. When None the window will be drawn to the main screen.\n\n\nList\n\n\nA control that shows a list of items. These lists can contain one or more columns.\n\n\nA single column example::\n\n\nfrom vanilla import *\n\n\nclass ListDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0), [\"A\", \"B\", \"C\"],\n selectionCallback=self.selectionCallback)\nself.w.open()\n\n\ndef selectionCallback(self, sender):\nprint sender.getSelection()\n\n\nListDemo()\n\n\nA mutliple column example::\n\n\nfrom vanilla import *\n\n\nclass ListDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n [{\"One\": \"A\", \"Two\": \"a\"}, {\"One\": \"B\", \"Two\": \"b\"}],\n columnDescriptions=[{\"title\": \"One\"}, {\"title\": \"Two\"}],\n selectionCallback=self.selectionCallback)\nself.w.open()\n\n\ndef selectionCallback(self, sender):\nprint sender.getSelection()\n\n\nListDemo()\n\n\nList objects behave like standard Python lists. For xample, given this List:::\n\n\nself.w.myList = List((10, 10, 200, 100), [\"A\", \"B\", \"C\"])\n\n\nThe following Python list methods work:::\n\n\nGetting the length of the List.\n\n\n len(self.w.myList)\n3\n\n\n\nRetrieving an item or items from a List.\n\n\n self.w.myList[1]\n\"B\"\n\n\n self.w.myList[:2]\n[\"A\", \"B\"]\n\n\n\nSetting an item in a List.\n\n\n self.w.myList[1] = \"XYZ\"\n\n self.w.myList.get()\n[\"A\", \"XYZ\", \"C\"]\n\n\n\nDeleting an item at an index in a List.\n\n\n del self.w.myList[1]\n\n self.w.myList.get()\n[\"A\", \"C\"]\n\n\n\nAppending an item to a List.\n\n\n self.w.myList.append(\"Z\")\n\n self.w.myList.get()\n[\"A\", \"B\", \"C\", \"Z\"]\n\n\n\nRemoving the first occurance of an item in a List.\n\n\n self.w.myList.remove(\"A\")\n\n self.w.myList.get()\n[\"B\", \"C\"]\n\n\n\nGetting the index for the first occurance of an item in a List.\n\n\n self.w.myList.index(\"B\")\n1\n\n\n\nInserting an item into a List.\n\n\n self.w.myList.insert(1, \"XYZ\")\n\n self.w.myList.get()\n[\"A\", \"XYZ\", \"B\", \"C\"]\n\n\n\nExtending a List.\n\n\n self.w.myList.extend([\"X\", \"Y\", \"Z\"])\n\n self.w.myList.get()\n[\"A\", \"B\", \"C\", \"X\", \"Y\", \"Z\"]\n\n\n\nIterating over a List.\n\n\n for i in self.w.myList:\n\n i\n\"A\"\n\n\n\n\"B\"\n\"C\"\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the\nposition and size of the list.\n\n\nitems\n The items to be displayed in the list. In the case of multiple\ncolumn lists, this should be a list of dictionaries with the data for\neach column keyed by the column key as defined in columnDescriptions.\nIf you intend to use a dataSource, \nitems\n must be \nNone\n.\n\n\ndataSource\n A Cocoa object supporting the \nNSTableDataSource\n\nprotocol. If \ndataSource\n is given, \nitems\n must be \nNone\n.\n\n\ncolumnDescriptions\n An ordered list of dictionaries describing the\ncolumns. This is only necessary for multiple column lists.\n\n\n+--------------------------------+--------------------------------------------------------------------------------+\n| \n\"title\"\n  | The title to appear in the column header.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| \n\"key\"\n (optional) | The key from which this column should get  |\n|| its data from each dictionary in \nitems\n. If   |\n|| nothing is given, the key will be the string   |\n|| given in \ntitle\n.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| \n\"formatter\"\n (optional)   | An \nNSFormatter\n \nhttp://tinyurl.com/NSFormatter\n_|\n|| for cntrolling the display and input of the|\n|| column's cells.|\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"cell\"* (optional)| A cell type to be displayed in the column. |\n|| If nothing is given, a text cell is used.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"editable\"* (optional)| Enable or disable editing in the column. If|\n|| nothing is given, it will follow the   |\n|| editability of the rest of the list.   |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"width\"* (optional)   | The width of the column.   |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"minWidth\"* (optional)| The minimum width of the column. The fallback is\nwidth\n.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"maxWidth\"* (optional)| The maximum width of the column. The fallback is\nwidth\n.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"allowsSorting\"* (optional)   | A boolean representing that this column allows the user|\n|| to sort the table by clicking the column's header. |\n|| The fallback is\nTrue\n. If a List is set to disallow   |\n|| sorting the column level settings will be ignored  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"typingSensitive\"* (optional) | A boolean representing that this column|\n|| should be the column that responds to user |\n|| key input. Only one column can be flagged as   |\n|| True. If no column is flagged, the first   |\n|| column will automatically be flagged.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *binding* (optional)   | A string indicating which\nbinding object \nhttp://tinyurl.com/CocoaBindings\n`_ |\n|| the column's cell should be bound to. By   |\n|| default, this is \"value.\" You should only  |\n|| override this in very specific cases.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n\n\nshowColumnTitles\n Boolean representing if the column titles should be shown or not.\nColumn titles will not be shown in single column lists.\n\n\nselectionCallback\n Callback to be called when the selection in the list changes.\n\n\ndoubleClickCallback\n Callback to be called when an item is double clicked.\n\n\neditCallback\n Callback to be called after an item has been edited.\n\n\nenableDelete\n A boolean representing if items in the list can be deleted via the interface.\n\n\nenableTypingSensitivity\n A boolean representing if typing in the list will jump to the\nclosest match as the entered keystrokes. \nAvailable only in single column lists.\n\n\nallowsMultipleSelection\n A boolean representing if the list allows more than one item to be selected.\n\n\nallowsEmptySelection\n A boolean representing if the list allows zero items to be selected.\n\n\nallowsSorting\n A boolean indicating if the list allows user sorting by clicking column headers.\n\n\ndrawVerticalLines\n Boolean representing if vertical lines should be drawn in the list.\n\n\ndrawHorizontalLines\n Boolean representing if horizontal lines should be drawn in the list.\n\n\ndrawFocusRing\n Boolean representing if the standard focus ring should be drawn when the list is selected.\n\n\nrowHeight\n The height of the rows in the list.\n\n\nautohidesScrollers\n Boolean representing if scrollbars should automatically be hidden if possible.\n\n\nselfDropSettings\n A dictionary defining the drop settings when the source of the drop\nis this list. The dictionary form is described below.\n\n\nselfWindowDropSettings\n A dictionary defining the drop settings when the source of the drop\nis contained the same document as this list. The dictionary form is described below.\n\n\nselfDocumentDropSettings\n A dictionary defining the drop settings when the source of the drop\nis contained the same window as this list. The dictionary form is described below.\n\n\nselfApplicationDropSettings\n A dictionary defining the drop settings when the source of the drop\nis contained the same application as this list. The dictionary form is described below.\n\n\notherApplicationDropSettings\n A dictionary defining the drop settings when the source of the drop\nis contained an application other than the one that contains this list. The dictionary form is described below.\n\n\nThe drop settings dictionaries should be of this form:\n\n\n+-----------------------------------+--------------------------------------------------------------------+\n| \ntype\n| A single drop type indicating what drop types the list accepts.|\n|   | For example, NSFilenamesPboardType or \"MyCustomPboardType\".|\n+-----------------------------------+--------------------------------------------------------------------+\n| \noperation\n (optional)| A \"drag operation \nhttp://tinyurl.com/NSDraggingIn\n`\n that |\n|   | the list accepts. The default is \nNSDragOperationCopy\n.|\n+-----------------------------------+--------------------------------------------------------------------+\n| \nallowDropBetweenRows\n (optional) | A boolean indicating if the list accepts drops between rows.   |\n|   | The default is True.   |\n+-----------------------------------+--------------------------------------------------------------------+\n| \nallowDropOnRow\n (optional)   | A boolean indicating if the list accepts drops on rows.|\n|   | The default is False.  |\n+-----------------------------------+--------------------------------------------------------------------+\n| \ncallback\n| Callback to be called when a drop is proposed and when a drop  |\n|   | is to occur. This method should return a boolean representing  |\n|   | if the drop is acceptable or not. This method must accept \nsender\n |\n|   | and \ndropInfo\n arguments. The _dropInfo\n will be a dictionary as   |\n|   | described below.   |\n+-----------------------------------+--------------------------------------------------------------------+\n\n\nThe dropInfo dictionary passed to drop callbacks will be of this form:\n\n\n+--------------+--------------------------------------------------------------------------------------------+\n| \ndata\n   | The data proposed for the drop. This data will be of the type specified by dropDataFormat. |\n+--------------+--------------------------------------------------------------------------------------------+\n| \nrowIndex\n   | The row where the drop is proposed.|\n+--------------+--------------------------------------------------------------------------------------------+\n| \nsource\n | The source from which items are being dragged. If this object is wrapped by Vanilla, the   |\n|  | Vanilla object will be passed as the source.   |\n+--------------+--------------------------------------------------------------------------------------------+\n| \ndropOnRow\n  | A boolean representing if the row is being dropped on. If this is False, the drop should   |\n|  | occur between rows.|\n+--------------+--------------------------------------------------------------------------------------------+\n| \nisProposal\n | A boolean representing if this call is simply proposing the drop or if it is time to   |\n|  | accept the drop.   |\n+--------------+--------------------------------------------------------------------------------------------+\n\n\nImageView\n\n\nA view that displays an image.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the view.\n\n\nhorizontalAlignment\n A string representing the desired horizontal\nalignment of the image in the view. The options are:\n\n\n+-------------+-------------------------+\n| \"left\"  | Image is aligned left.  |\n+-------------+-------------------------+\n| \"right\" | Image is aligned right. |\n+-------------+-------------------------+\n| \"center\"| Image is centered.  |\n+-------------+-------------------------+\n\n\nverticalAlignment\n A string representing the desired vertical alignment\nof the image in the view. The options are:\n\n\n+-------------+--------------------------+\n| \"top\"   | Image is aligned top.|\n+-------------+--------------------------+\n| \"bottom\"| Image is aligned bottom. |\n+-------------+--------------------------+\n| \"center\"| Image is centered.   |\n+-------------+--------------------------+\n\n\nscale\n A string representing the desired scale style of the image in the\nview. The options are:\n\n\n+----------------+----------------------------------------------+\n| \"porportional\" | Proportionally scale the image to fit in the |\n|| view if it is larger than the view.  |\n+----------------+----------------------------------------------+\n| \"fit\"  | Distort the proportions of the image until   |\n|| it fits exactly in the view. |\n+----------------+----------------------------------------------+\n| \"none\" | Do not scale the image.  |\n+----------------+----------------------------------------------+\n\n\nScrollView\n\n\nA view with scrollers for containing another view.::\n\n\nfrom AppKit import NSView, NSColor, NSRectFill\nfrom vanilla import *\n\n\nclass DemoView(NSView):\n\n\ndef drawRect_(self, rect):\nNSColor.redColor().set()\nNSRectFill(self.bounds())\n\n\nclass ScrollViewDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 200))\nself.view = DemoView.alloc().init()\nself.view.setFrame_(((0, 0), (300, 300)))\nself.w.scrollView = ScrollView((10, 10, -10, -10),\nself.view)\nself.w.open()\n\n\nScrollViewDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the\nposition and size of the scroll view.\n\n\nnsView\n A \nNSView\n object.\n\n\nhasHorizontalScroller\n Boolean representing if the scroll view has\nhorizontal scrollers.\n\n\nhasVerticalScroller\n Boolean representing if the scroll view has\nvertical scrollers.\n\n\nautohidesScrollers\n Boolean representing if the scroll view auto-hides\nits scrollers.\n\n\nbackgroundColor\n A \nNSColor\n object representing the background\ncolor of the scroll view.\n\n\ndrawsBackground\n Boolean representing if the background should be drawn.\n\n\nProgressSpinner\n\n\nAn animated, spinning progress indicator.::\n\n\nfrom vanilla import *\n\n\nclass ProgressSpinnerDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((80, 52))\nself.w.spinner = ProgressSpinner((24, 10, 32, 32),\ndisplayWhenStopped=True)\nself.w.spinner.start()\nself.w.open()\n\n\nProgressSpinnerDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the\nposition and size of the spinner. The size of the spinner sould match the\nappropriate value for the given \nsizeStyle\n.\n\n\n+---------------------------+\n| \nStandard Dimensions\n   |\n+---------+---+----+---+----+\n| Regular | W | 32 | H | 32 |\n+---------+---+----+---+----+\n| Small   | W | 16 | H | 16 |\n+---------+---+----+---+----+\n\n\ndisplayWhenStopped\n Boolean representing if the spiiner should be\ndisplayed when it is not spinning.\n\n\nsizeStyle\n A string representing the desired size style of the spinner.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n\n\nButton\n\n\nA standard button.::\n\n\nfrom vanilla import *\n\n\nclass ButtonDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((100, 40))\n self.w.button = Button((10, 10, -10, 20), \"A Button\",\ncallback=self.buttonCallback)\n self.w.open()\n\n\ndef buttonCallback(self, sender):\n print \"button hit!\"\n\n\nButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the button. The size of the button sould match the appropriate value\nfor the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+=========+===+===========+\n| Regular | H | 20|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 14|\n+---------+---+-----------+\n\n\ntitle\n The text to be displayed on the button. Pass \nNone\n is no title is desired.\n\n\ncallback\n The method to be called when the user presses the button.\n\n\nsizeStyle\n A string representing the desired size style of the button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nObjectBrowser\n\n\nAn object browser.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and\nsize of the browser.\n\n\nobj\n The object to be displayed.\n\n\nPathControl\n\n\nA path control.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the control. The size of the control sould match the appropriate value\nfor the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+=========+===+===========+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 20|\n+---------+---+-----------+\n| Mini| H | 18|\n+---------+---+-----------+\n\n\nurl\n The url to be displayed in the control. This should be a NSURL object.\n\n\neditable\n A boolean indicating if this control is editable or not.\n\n\ncallback\n The method to be called when the user presses the control.\n\n\nsizeStyle\n A string representing the desired size style of the button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nTextEditor\n\n\nStandard long text entry control.::\n\n\nfrom vanilla import *\n\n\nclass TextEditorDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 200))\nself.w.textEditor = TextEditor((10, 10, -10, 22),\ncallback=self.textEditorCallback)\nself.w.open()\n\n\ndef textEditorCallback(self, sender):\nprint \"text entry!\", sender.get()\n\n\nTextEditorDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the text entry control.\n\n\ntext\n The text to be displayed in the text entry control.\n\n\ncallback\n The method to be called when the user presses the text\nentry control.\n\n\nreadOnly\n Boolean representing if the text can be edited or not.\n\n\nchecksSpelling\n Boolean representing if spelling should be automatically\nchecked or not.\n\n\nfunction getFont\n\n\nTextBox\n\n\nA rectangle containing static text.::\n\n\nfrom vanilla import *\n\n\nclass TextBoxDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((100, 37))\n self.w.textBox = TextBox((10, 10, -10, 17), \"A TextBox\")\n self.w.open()\n\n\nTextBoxDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the text box.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 17|\n+---------+---+-----------+\n| Small   | H | 14|\n+---------+---+-----------+\n| Mini| H | 12|\n+---------+---+-----------+\n\n\ntext\n The text to be displayed in the text box. If the object is a\n\nNSAttributedString\n, the attributes will be used for display.\n\n\nalignment\n A string representing the desired visual alignment of the\ntext in the text box. The options are:\n\n\n+-------------+-----------------------------------------------------+\n| \"left\"  | Text is aligned left.   |\n+-------------+-----------------------------------------------------+\n| \"right\" | Text is aligned right.  |\n+-------------+-----------------------------------------------------+\n| \"center\"| Text is centered.   |\n+-------------+-----------------------------------------------------+\n| \"justified\" | Text is justified.  |\n+-------------+-----------------------------------------------------+\n| \"natural\"   | Follows the natural alignment of the text's script. |\n+-------------+-----------------------------------------------------+\n\n\nselectable\n Boolean representing if the text is selectable or not.\n\n\nsizeStyle\n A string representing the desired size style of the button.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nSplitView\n\n\nView that can be split into two or more subviews with dividers.::\n\n\nfrom vanilla import *\n\n\nclass SplitViewDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 200), \"SplitView Demo\", minSize=(100, 100))\nlist1 = List((0, 0, -0, 100), [\"A\", \"B\", \"C\"])\nlist2 = List((0, 0, -0, 100), [\"a\", \"b\", \"c\"])\npaneDescriptors = [\ndict(view=list1, identifier=\"pane1\"),\ndict(view=list2, identifier=\"pane2\"),\n]\nself.w.splitView = SplitView((0, 0, -0, -0), paneDescriptors)\nself.w.open()\n\n\nSplitViewDemo()\n\n\nThe wrapped object is an \nRBSplitView \nhttp://www.brockerhoff.net/src/rbs.html\n_ object.\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the split view.\n\n\npaneDescriptions\n An ordered list of dictionaries describing the\nsubviews, or \"panes\". Those dictionaries can have the following keys:\n\n\n+-----------------+-----------------------------------------------------------------------------+\n| \nview\n  | A view, either a Vanilla object or a NSView. Required.  |\n+-----------------+-----------------------------------------------------------------------------+\n| \n\"identifier\"\n  | A string identifying the pane. Required.|\n+-----------------+-----------------------------------------------------------------------------+\n| \n\"size\"\n| The initial size of the pane. Optional. |\n+-----------------+-----------------------------------------------------------------------------+\n| \n\"minSize\"\n | The minimum size of the pane. Optional. The default is 1.   |\n+-----------------+-----------------------------------------------------------------------------+\n| \n\"maxSize\"\n | The maximum size of the pane. Optional. The default is no maximum size. |\n+-----------------+-----------------------------------------------------------------------------+\n| \n\"canCollapse\"\n | Boolean indicating if the pane can collapse. Optional. The default is True. |\n+-----------------+-----------------------------------------------------------------------------+\n\n\nisVertical\n Boolean representing if the split view is vertical.\nDefault is \nTrue\n.\n\n\nImageButton\n\n\nA button with an image.::\n\n\nfrom vanilla import *\n\n\nclass ImageButtonDemo(object):\n\n\ndef \ninit\n(self):\n path = \"/path/to/an/image\"\n self.w = Window((50, 50))\n self.w.button = ImageButton((10, 10, 30, 30), imagePath=path,\ncallback=self.buttonCallback)\n self.w.open()\n\n\ndef buttonCallback(self, sender):\n print \"button hit!\"\n\n\nImageButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the button.\n\n\ntitle\n The text to be displayed on the button. Pass \nNone\n is no title is desired.\n\n\nbordered\n Boolean representing if the button should be bordered.\n\n\nimagePath\n A file path to an image.\n\n\nimageNamed\n The name of an image already load as a \nNSImage\n by the application.\n\n\nimageObject\n A \nNSImage\n object.\n\n\nOnly one of imagePath, imageNamed, imageObject should be set.\n\n\nimagePosition\n The position of the image relative to the title. The options are:\n\n\n+----------+\n| \"top\"|\n+----------+\n| \"bottom\" |\n+----------+\n| \"left\"   |\n+----------+\n| \"right\"  |\n+----------+\n\n\ncallback\n The method to be called when the user presses the button.\n\n\nsizeStyle\n A string representing the desired size style of the button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nSquareButton\n\n\nA standard square button.::\n\n\nfrom vanilla import *\n\n\nclass SquareButtonDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((200, 100))\n self.w.button = SquareButton((10, 10, -10, -10), \"A Button\",\ncallback=self.buttonCallback)\n self.w.open()\n\n\ndef buttonCallback(self, sender):\n print \"button hit!\"\n\n\nSquareButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the button.\n\n\ntitle\n The text to be displayed on the button. Pass \nNone\n is no title is desired.\n\n\ncallback\n The method to be called when the user presses the button.\n\n\nsizeStyle\n A string representing the desired size style of the button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nVanillaBaseObject\n\n\nSegmentedButton\n\n\nA standard segmented button.::\n\n\nfrom vanilla import *\n\n\nclass SegmentedButtonDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((100, 40))\n self.w.button = SegmentedButton((10, 10, -10, 20),\n [dict(title=\"A\"), dict(title=\"B\"), dict(title=\"C\")],\ncallback=self.buttonCallback)\n self.w.open()\n\n\ndef buttonCallback(self, sender):\n print \"button hit!\"\n\n\nSegmentedButtonDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the segmented button. The size of the segmented button sould match\nthe appropriate value for the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+=========+===+===========+\n| Regular | H | 21|\n+---------+---+-----------+\n| Small   | H | 18|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+\n\n\nsegmentDescriptions\n An ordered list of dictionaries describing the segments.\n\n\n+------------------------+--------------------------------------------------------------------------------------------------+\n| width (optional)   | The desired width of the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n| title (optional)   | The title of the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n| enabled (optional) | The enabled state of the segment. The default is \nTrue\n. |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imagePath (optional)   | A file path to an image to display in the segment.   |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageNamed (optional)  | The name of an image already loaded as a \nNSImage\n by the application to display in the segment. |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageObject (optional) | A \nNSImage\n object to display in the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n\n\ncallback\n The method to be called when the user presses the segmented button.\n\n\nselectionStyle\n The selection style in the segmented button.\n\n\n+-----------+---------------------------------------------+\n| one   | Only one segment may be selected.   |\n+-----------+---------------------------------------------+\n| any   | Any number of segments may be selected. |\n+-----------+---------------------------------------------+\n| momentary | A segmented is only selected when tracking. |\n+-----------+---------------------------------------------+\n\n\nsizeStyle\n A string representing the desired size style of the segmented button. The options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nProgressBar\n\n\nA standard progress bar.::\n\n\nfrom vanilla import *\n\n\nclass ProgressBarDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 65))\nself.w.bar = ProgressBar((10, 10, -10, 16))\nself.w.button = Button((10, 35, -10, 20), \"Go!\",\ncallback=self.showProgress)\nself.w.open()\n\n\ndef showProgress(self, sender):\nimport time\nself.w.bar.set(0)\nfor i in range(10):\nself.w.bar.increment(10)\ntime.sleep(.2)\n\n\nProgressBarDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the progress bar. The height of the progress\nbar sould match the appropriate value for the given \nsizeStyle\n.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 16|\n+---------+---+-----------+\n| Small   | H | 10|\n+---------+---+-----------+\n\n\nminValue\n The minimum value of the progress bar.\n\n\nmaxValue\n The maximum value of the progress bar.\n\n\nisIndeterminate\n Boolean representing if the progress bar is indeterminate.\nDeterminate progress bars show how much of the task has been completed.\nIndeterminate progress bars simply show that the application is busy.\n\n\nsizeStyle\n A string representing the desired size style of the pregress bar.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n\n\nVanillaError\n\n\nVerticalLine\n\n\nA vertical line.::\n\n\nfrom vanilla import *\n\n\nclass VerticalLineDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((80, 100))\nself.w.line = VerticalLine((40, 10, 1, -10))\nself.w.open()\n\n\nVerticalLineDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position and size of the line.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---+---------------------+\n| V | 1   |\n+---+---------------------+\n\n\nfunction tagToInt\n\n\nfunction PopUpButtonListCell\n\n\nAn object that displays a pop up list in a List column.\n\n\nThis object should only be used in the \ncolumnDescriptions\n\nargument during the construction of a List.\n\n\nitems\n The items that should appear in the pop up list.\n\n\nNote: when using this cell in a List, the \nbinding\n in the\ncolumn description must be set to \nselectedValue\n.\n\n\nExample::\n\n\nfrom vanilla import *\n\n\nclass PopUpButtonListCellDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n[{\"value\": \"A\"}, {\"value\": \"B\"}],\ncolumnDescriptions=[\n{\"title\": \"value\", \"cell\": PopUpButtonListCell([\"A\", \"B\", \"C\"]), \"binding\": \"selectedValue\"}\n],\neditCallback=self.editCallback)\nself.w.open()\n\n\ndef editCallback(self, sender):\nprint sender.get()\n\n\nPopUpButtonListCellDemo()\n\n\nfunction SliderListCell\n\n\nAn object that displays a slider in a List column.\n\n\nThis object should only be used in the \ncolumnDescriptions\n\nargument during the construction of a List.\n\n\nminValue\n The minimum value for the slider.\n\n\nmaxValue\n The maximum value for the slider.\n\n\ntickMarkCount\n The number of tick marcks to be displayed on the slider.\nIf \nNone\n is given, no tick marks will be displayed.\n\n\nstopOnTickMarks\n Boolean representing if the slider knob should only\nstop on the tick marks.\n\n\nExample::\n\n\nfrom vanilla import *\n\n\nclass SliderListCellDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((200, 100))\nself.w.myList = List((0, 0, -0, -0),\n[{\"value1\": 30, \"value2\": 70}],\ncolumnDescriptions=[\n{\"title\": \"value1\", \"cell\": SliderListCell()},\n{\"title\": \"value2\", \"cell\": SliderListCell(tickMarkCount=10)},\n],\neditCallback=self.editCallback)\nself.w.open()\n\n\ndef editCallback(self, sender):\nprint sender.get()\n\n\nSliderListCellDemo()\n\n\nSearchBox\n\n\nA text entry field similar to the search field in Safari.::\n\n\nfrom vanilla import *\n\n\nclass SearchBoxDemo(object):\n\n\ndef \ninit\n(self):\nself.w = Window((100, 42))\nself.w.searchBox = SearchBox((10, 10, -10, 22),\ncallback=self.searchBoxCallback)\nself.w.open()\n\n\ndef searchBoxCallback(self, sender):\nprint \"search box entry!\", sender.get()\n\n\nSearchBoxDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing\nthe position and size of the search box.\n\n\n+-------------------------+\n| \nStandard Dimensions\n |\n+---------+---+-----------+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 19|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+\n\n\ntext\n The text to be displayed in the search box.\n\n\ncallback\n The method to be called when the user presses the search box.\n\n\nformatter\n A \nNSFormatter \nhttp://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html\n_\nfor controlling the display and input of the text entry.\n\n\nplaceholder\n A placeholder string to be shown when the text entry\ncontrol is empty.\n\n\nsizeStyle\n A string representing the desired size style of the search box.\nThe options are:\n\n\n+-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+\n\n\nLevelIndicator\n\n\nA control which shows a value on a linear scale.::\n\n\nfrom vanilla import *\n\n\nclass LevelIndicatorDemo(object):\n\n\ndef \ninit\n(self):\n self.w = Window((200, 68))\n self.w.discreteIndicator = LevelIndicator(\n(10, 10, -10, 18), callback=self.levelIndicatorCallback)\n self.w.continuousIndicator = LevelIndicator(\n(10, 40, -10, 18), style=\"continuous\",\ncallback=self.levelIndicatorCallback)\n self.w.open()\n\n\ndef levelIndicatorCallback(self, sender):\n print \"level indicator edit!\", sender.get()\n\n\nLevelIndicatorDemo()\n\n\nposSize\n Tuple of form \n(left, top, width, height)\n representing the position\nand size of the level indicator.\n\n\n+-------------------------------+\n| \nStandard Dimensions()\n |\n+-------------------------------+\n| \ndiscrete without ticks\n  |\n+-------------------------------+\n| H | 18|\n+-------------------------------+\n| \ndiscrete with minor ticks\n   |\n+-------------------------------+\n| H | 22|\n+-------------------------------+\n| \ndiscrete with major ticks\n   |\n+-------------------------------+\n| H | 25|\n+-------------------------------+\n| \ncontinuous without ticks\n|\n+-------------------------------+\n| H | 16|\n+-------------------------------+\n| \ncontinuous with minor ticks\n |\n+-------------------------------+\n| H | 20|\n+-------------------------------+\n| \ncontinuous with major ticks\n |\n+-------------------------------+\n| H | 23|\n+-------------------------------+\n\n\nstyle\n The style of the level indicator. The options are:\n\n\n+--------------+-------------------+\n| \"continuous\" | A continuous bar. |\n+--------------+-------------------+\n| \"discrete\"   | A segmented bar.  |\n+--------------+-------------------+\n\n\nvalue\n The initial value of the level indicator.\n\n\nminValue\n The minimum value allowed by the level indicator.\n\n\nmaxValue\n The maximum value allowed by the level indicator.\n\n\nwarningValue\n The value at which the filled portions of the\nlevel indicator should display the warning color.\n\n\ncriticalValue\n The value at which the filled portions of the\nlevel indicator should display the critical color.\n\n\ntickMarkPosition\n The position of the tick marks in relation\nto the level indicator. The options are:\n\n\n+---------+\n| \"above\" |\n+---------+\n| \"below\" |\n+---------+\n\n\nminorTickMarkCount\n The number of minor tick marcks to be displayed\non the level indicator. If \nNone\n is given, no minor tick marks will be displayed.\n\n\nmajorTickMarkCount\n The number of major tick marcks to be displayed on the level\nindicator. If \nNone\n is given, no major tick marks will be displayed.\n\n\ncallback\n The method to be called when the level indicator has been edited.\nIf no callback is given, the level indicator will not be editable.", 
            "title": "Variableeditor"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#elementsvariablefontsvariableeditor", 
            "text": "", 
            "title": "elements.variablefonts.variableeditor"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#datepicker", 
            "text": "posSize  Tuple of form  (left, top, width, height)  representing the position and size of the date picker control.  +-------------------------------------+\n|  Standard Dimensions - Text Mode  |\n+---------+---+-----------------------+\n| Regular | H | 22|\n+---------+---+-----------------------+\n| Small   | H | 19|\n+---------+---+-----------------------+\n| Mini| H | 16|\n+---------+---+-----------------------+  +------------------------------------------+\n|  Standard Dimensions - Graphical Mode  |\n+--------------------+---------------------+\n| Calendar and Clock | 227w 148h   |\n+--------------------+---------------------+\n| Calendar   | 139w 148h   |\n+--------------------+---------------------+\n| Clock  | 122w 123h   |\n+--------------------+---------------------+  date  A  NSDate  object representing the date and time that should be set in the control.  minDate  A  NSDate  object representing the lowest date and time that can be set in the control.  maxDate  A  NSDate  object representing the highest date and time that can be set in the control.  showStepper  A boolean indicating if the thumb stepper should be shown in text mode.  mode  A string representing the desired mode for the date picker control. The options are:  +-------------+\n| \"text\"  |\n+-------------+\n| \"graphical\" |\n+-------------+  timeDisplay  A string representing the desired time units that should be displayed in the\ndate picker control. The options are:  +--------------------+-------------------------------+\n| None   | Do not display time.  |\n+--------------------+-------------------------------+\n| \"hourMinute\"   | Display hour and minute.  |\n+--------------------+-------------------------------+\n| \"hourMinuteSecond\" | Display hour, minute, second. |\n+--------------------+-------------------------------+  dateDisplay  A string representing the desired date units that should be displayed in the\ndate picker control. The options are:  +----------------+------------------------------+\n| None   | Do not display date. |\n+----------------+------------------------------+\n| \"yearMonth\"| Display year and month.  |\n+----------------+------------------------------+\n| \"yearMonthDay\" | Display year, month and day. |\n+----------------+------------------------------+  sizeStyle  A string representing the desired size style of the date picker control. This only\napplies in text mode. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "DatePicker"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#floatingwindow", 
            "text": "A window that floats above all other windows.  To add a control to a window, simply set it as an attribute of the window.  from vanilla import *  class FloatingWindowDemo(object):  def  init (self):\nself.w = FloatingWindow((200, 70), \"FloatingWindow Demo\")\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()  FloatingWindowDemo()  No special naming is required for the attributes. However, each attribute\nmust have a unique name.  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the window. It may also be a tuple of form  (width, height) .\nIn this case, the window will be positioned on screen automatically.  title  The title to be set in the title bar of the window.  minSize  Tuple of the form  (width, height)  representing the minimum size\nthat the window can be resized to.  maxSize  Tuple of the form  (width, height)  representing the maximum size\nthat the window can be resized to.  textured  Boolean value representing if the window should have a textured\nappearance or not.  autosaveName  A string representing a unique name for the window. If given,\nthis name will be used to store the window position and size in the application\npreferences.  closable  Boolean value representing if the window should have a close button\nin the title bar.  screen  A  NSScreen  http://tinyurl.com/NSScreen _ object indicating the screen that\nthe window should be drawn to. When None the window will be drawn to the main screen.", 
            "title": "FloatingWindow"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#checkbox", 
            "text": "", 
            "title": "CheckBox"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#group", 
            "text": "An invisible container for controls.  To add a control to a group, simply set it as an attribute of the group.::  from vanilla import *  class GroupDemo(object):  def  init (self):\nself.w = Window((150, 50))\nself.w.group = Group((10, 10, -10, -10))\nself.w.group.text = TextBox((0, 0, -0, -0),\n\"This is a group\")\nself.w.open()  GroupDemo()  No special naming is required for the attributes. However, each attribute must have a unique name.  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the group.  blendingMode  The blending mode for the window. These are the possible options:  +----------------+-------------------------------------------+\n| None   | No special blending.  |\n+----------------+-------------------------------------------+\n| \"behindWindow\" | Blend with the content behind the window. |\n+----------------+-------------------------------------------+\n| \"withinWindow\" | Blend with the content within the window. |\n+----------------+-------------------------------------------+", 
            "title": "Group"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#popupbutton", 
            "text": "A button which, when selected, displays a list of items for the user to choose from.::  from vanilla import *  class PopUpButtonDemo(object):  def  init (self):\nself.w = Window((100, 40))\nself.w.popUpButton = PopUpButton((10, 10, -10, 20),\n  [\"A\", \"B\", \"C\"],\n  callback=self.popUpButtonCallback)\nself.w.open()  def popUpButtonCallback(self, sender):\nprint \"pop up button selection!\", sender.get()  PopUpButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and\nsize of the pop up button. The size of the button sould match the appropriate value\nfor the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 20|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+  items  A list of items to appear in the pop up list.  callback  The method to be called when the user selects an item in the pop up list.  sizeStyle  A string representing the desired size style of the pop up button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "PopUpButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-imagelistcell", 
            "text": "horizontalAlignment  A string representing the desired horizontal\nalignment of the image in the view. The options are:  +-------------+-------------------------+\n| \"left\"  | Image is aligned left.  |\n+-------------+-------------------------+\n| \"right\" | Image is aligned right. |\n+-------------+-------------------------+\n| \"center\"| Image is centered.  |\n+-------------+-------------------------+  verticalAlignment  A string representing the desired vertical alignment\nof the image in the view. The options are:  +-------------+--------------------------+\n| \"top\"   | Image is aligned top.|\n+-------------+--------------------------+\n| \"bottom\"| Image is aligned bottom. |\n+-------------+--------------------------+\n| \"center\"| Image is centered.   |\n+-------------+--------------------------+  scale  A string representing the desired scale style of the image in the\nview. The options are:  +----------------+----------------------------------------------+\n| \"porportional\" | Proportionally scale the image to fit in the |\n|| view if it is larger than the view.  |\n+----------------+----------------------------------------------+\n| \"fit\"  | Distort the proportions of the image until   |\n|| it fits exactly in the view. |\n+----------------+----------------------------------------------+\n| \"none\" | Do not scale the image.  |\n+----------------+----------------------------------------------+  Example::  from AppKit import *\nfrom vanilla import *  class ImageListCellDemo(object):  def  init (self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n[\n{\"image\": NSImage.imageNamed_(\"NSActionTemplate\")},\n{\"image\": NSImage.imageNamed_(\"NSRefreshTemplate\")}\n],\ncolumnDescriptions=[\n{\"title\": \"image\", \"cell\": ImageListCell()}\n])\nself.w.open()  ImageListCellDemo()", 
            "title": "function ImageListCell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#vanillabasecontrol", 
            "text": "", 
            "title": "VanillaBaseControl"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#edittext", 
            "text": "Standard short text entry control.::  from vanilla import *  class EditTextDemo(object):  def  init (self):\nself.w = Window((100, 42))\nself.w.editText = EditText((10, 10, -10, 22),\ncallback=self.editTextCallback)\nself.w.open()  def editTextCallback(self, sender):\nprint \"text entry!\", sender.get()  EditTextDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the text entry control.  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 19|\n+---------+---+-----------+\n| Mini| H | 16|\n+---------+---+-----------+  text  An object representing the contents of the text entry control. If no formatter has been assigned to the control,\nthis should be a string. If a formatter has been assigned, this should be an object of the type that the formatter expects.  callback  The method to be called when the user enters text.  continuous  If True, the callback (if any) will be called upon each keystroke, if False, only call the callback when\nediting finishes. Default is True.  readOnly  Boolean representing if the text can be edited or not.  formatter  An  NSFormatter  http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html _\nfor controlling the display and input of the text entry.  placeholder  A placeholder string to be shown when the text entry control is empty.  sizeStyle  A string representing the desired size style of the text entry control. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "EditText"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#tabs", 
            "text": "A drawer attached to a window. Drawers are capable of containing controls.  To add a control to a tab, simply set it as an attribute of the tab.::  from vanilla import *  class TabDemo(object):  def  init (self):\nself.w = Window((250, 100))\nself.w.tabs = Tabs((10, 10, -10, -10), [\"Tab One\", \"Tab Two\"])\ntab1 = self.w.tabs[0]\ntab1.text = TextBox((10, 10, -10, -10), \"This is tab 1\")\ntab2 = self.w.tabs[1]\ntab2.text = TextBox((10, 10, -10, -10), \"This is tab 2\")\nself.w.open()  TabDemo()  No special naming is required for the attributes. However, each attribute\nmust have a unique name.  To retrieve a particular tab, access it by index:::  myTab = self.w.tabs[0]  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the tabs.  titles  An ordered list of tab titles.  callback  The method to be called when the user selects a new tab.  sizeStyle  A string representing the desired size style of the tabs.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "Tabs"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-checkboxlistcell", 
            "text": "An object that displays a check box in a List column.  This object should only be used in the  columnDescriptions \nargument during the construction of a List.  title  The title to be set in  all  items in the List column.  Example::  from vanilla import *  class CheckBoxListCellDemo(object):  def  init (self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n [{\"value\": True}, {\"value\": False}],\n columnDescriptions=[{\"title\": \"value\", \"cell\": CheckBoxListCell()}],\n editCallback=self.editCallback)\nself.w.open()  def editCallback(self, sender):\nprint sender.get()  CheckBoxListCellDemo()", 
            "title": "function CheckBoxListCell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#window", 
            "text": "A window capable of containing controls.  To add a control to a window, simply set it as an attribute of the window.::  from vanilla import *  class WindowDemo(object):  def  init (self):\nself.w = Window((200, 70), \"Window Demo\")\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()  WindowDemo()  No special naming is required for the attributes. However, each attribute\nmust have a unique name.  posSize  Tuple of form  (left, top, width, height)  representing the position and\nsize of the window. It may also be a tuple of form  (width, height) . In this case,\nthe window will be positioned on screen automatically.  title  The title to be set in the title bar of the window.  minSize  Tuple of the form  (width, height)  representing the minimum size that\nthe window can be resized to.  maxSize  Tuple of the form  (width, height)  representing the maximum size that\nthe window can be resized to.  textured  Boolean value representing if the window should have a textured\nappearance or not.  autosaveName  A string representing a unique name for the window. If given,\nthis name will be used to store the window position and size in the application preferences.  closable  Boolean value representing if the window should have a close button in the\ntitle bar.  miniaturizable  Boolean value representing if the window should have a minimize button\nin the title bar.  initiallyVisible  Boolean value representing if the window will be initially visible.\nDefault is  True . If  False , you can show the window later by calling  window.show() .  fullScreenMode  An indication of the full screen mode. These are the options:  +---------------+---------------------------------------------------------------+\n|  None | The window does not allow full screen.|\n+---------------+---------------------------------------------------------------+\n|  \"primary\"    | Corresponds to NSWindowCollectionBehaviorFullScreenPrimary.   |\n+---------------+---------------------------------------------------------------+\n|  \"auxiliary\"  | Corresponds to NSWindowCollectionBehaviorFullScreenAuxiliary. |\n+---------------+---------------------------------------------------------------+  titleVisible  Boolean value indicating if the window title should be displayed.  fullSizeContentView  Boolean value indicating if the content view should be the\nfull size of the window, including the area underneath the titlebar and toolbar.  screen  A  NSScreen  http://tinyurl.com/NSScreen _ object indicating the screen that\nthe window should be drawn to. When None the window will be drawn to the main screen.", 
            "title": "Window"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#radiogroup", 
            "text": "A collection of radio buttons.::  from vanilla import *  class RadioGroupDemo(object):  def  init (self):\nself.w = Window((100, 60))\nself.w.radioGroup = RadioGroup((10, 10, -10, 40),\n[\"Option 1\", \"Option 2\"],\ncallback=self.radioGroupCallback)\nself.w.open()  def radioGroupCallback(self, sender):\nprint \"radio group edit!\", sender.get()  RadioGroupDemo()  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the radio group.  titles  A list of titles to be shown next to the radio buttons.  isVertical  Boolean representing if the radio group is\nvertical or horizontal.  callback  The method to be caled when a radio button is selected.  sizeStyle  A string representing the desired size style of the radio group.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "RadioGroup"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#popover", 
            "text": "A popover capable of containing controls.  size  Tuple of form  (width, height)  representing the size of the content\nin the popover.  size  The parent view that the popover should pop out from. This can be either\na vanilla object or an instance of NSView or NSView subclass.  preferredEdge  The edge of the parent view that you want the popover\nto pop out from. These are the options:\n+------------+\n|  \"left\"    |\n+------------+\n|  \"right\"   |\n+------------+\n|  \"top\" |\n+------------+\n|  \"bottom\"  |\n+------------+  behavior  The desired behavior of the popover. These are the options:\n+------------------------+-----------------------------------------------------+\n|  \"applicationDefined\"  | Corresponds to NSPopoverBehaviorApplicationDefined. |\n+------------------------+-----------------------------------------------------+\n|  \"transient\"   | Corresponds to NSPopoverBehaviorTransient.  |\n+------------------------+-----------------------------------------------------+\n|  \"semitransient\"   | Corresponds to NSPopoverBehaviorSemitransient.  |\n+------------------------+-----------------------------------------------------+", 
            "title": "Popover"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#sheet", 
            "text": "A window that is attached to another window.  To add a control to a sheet, simply set it as an attribute of the sheet.::  from vanilla import *  class SheetDemo(object):  def  init (self, parentWindow):\nself.w = Sheet((200, 70), parentWindow)\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()  SheetDemo()  No special naming is required for the attributes. However, each attribute\nmust have a unique name.  posSize  Tuple of form  (width, height)  representing the size of the sheet.  parentWindow  The window that the sheet should be attached to.  minSize  Tuple of the form  (width, height)  representing the minimum size that\nthe sheet can be resized to.  maxSize  Tuple of the form  (width, height)  representing the maximum size that\nthe sheet can be resized to.  autosaveName  A string representing a unique name for the sheet. If given,\nthis name will be used to store the sheet size in the application preferences.", 
            "title": "Sheet"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-segmentedbuttonlistcell", 
            "text": "segmentDescriptions  An ordered list of dictionaries describing the segments.  +------------------------+--------------------------------------------------------------------------------------------------+\n| title (optional)   | The title of the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imagePath (optional)   | A file path to an image to display in the segment.   |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageNamed (optional)  | The name of an image already loaded as a  NSImage  by the application to display in the segment. |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageObject (optional) | A  NSImage  object to display in the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+  Note: when using this cell in a List, the  binding  in the\ncolumn description must be set to  selectedIndex .  Example::  from vanilla import *  class SegmentedButtonListCellDemo(object):  def  init (self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n[{\"value\": 0}, {\"value\": 1}],\ncolumnDescriptions=[\n{\n\"title\": \"value\",\n\"cell\": SegmentedButtonListCell([dict(title=\"0\"), dict(title=\"1\")]),\n\"binding\": \"selectedIndex\"\n}\n],\neditCallback=self.editCallback)\nself.w.open()  def editCallback(self, sender):\nprint sender.get()  SegmentedButtonListCellDemo()", 
            "title": "function SegmentedButtonListCell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#colorwell", 
            "text": "A control that allows for showing and choosing a color value.  ColorWell objects handle NSColor  http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSColor_Class/index.html _\nobjects.::\nfrom AppKit import NSColor\nfrom vanilla import *  class ColorWellDemo(object):  def  init (self):\nself.w = Window((100, 50))\nself.w.colorWell = ColorWell((10, 10, -10, -10),\ncallback=self.colorWellEdit,\ncolor=NSColor.redColor())\nself.w.open()  def colorWellEdit(self, sender):\nprint \"color well edit!\", sender.get()  ColorWellDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the color well.  callback  The method to be caled when the user selects a new color.  color  A  NSColor  object. If  None  is given, the color shown will be white.", 
            "title": "ColorWell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#horizontalline", 
            "text": "A horizontal line.::  from vanilla import *  class HorizontalLineDemo(object):  def  init (self):\nself.w = Window((100, 20))\nself.w.line = HorizontalLine((10, 10, -10, 1))\nself.w.open()  HorizontalLineDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the line.  +-------------------------+\n|  Standard Dimensions  |\n+---+---------------------+\n| H | 1   |\n+---+---------------------+", 
            "title": "HorizontalLine"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#helpbutton", 
            "text": "A standard help button.::  from vanilla import *  class HelpButtonDemo(object):  def  init (self):\n self.w = Window((90, 40))\n self.w.button = HelpButton((10, 10, 21, 20),\ncallback=self.buttonCallback)\n self.w.open()  def buttonCallback(self, sender):\n print \"help button hit!\"  HelpButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and\nsize of the button. The size of the button sould match the standard dimensions.  +-------------------------+\n|  Standard Dimensions  |\n+--------+----------------+\n| Width  | 21 |\n+--------+----------------+\n| Height | 20 |\n+--------+----------------+  callback  The method to be called when the user presses the button.", 
            "title": "HelpButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-getaxisinfo", 
            "text": "", 
            "title": "function getAxisInfo"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#drawer", 
            "text": "A drawer attached to a window. Drawers are capable of containing controls.  To add a control to a drawer, simply set it as an attribute of the drawer.::  from vanilla import *  class DrawerDemo(object):  def  init (self):\nself.w = Window((200, 200))\nself.w.button = Button((10, 10, -10, 20), \"Toggle Drawer\",\ncallback=self.toggleDrawer)\nself.d = Drawer((100, 150), self.w)\nself.d.textBox = TextBox((10, 10, -10, -10),\n\"This is a drawer.\")\nself.w.open()\nself.d.open()  def toggleDrawer(self, sender):\nself.d.toggle()  DrawerDemo()  No special naming is required for the attributes. However, each attribute must have a unique name.  size  Tuple of form  (width, height)  representing the size of the drawer.  parentWindow  The window that the drawer should be attached to.  minSize  Tuple of form  (width, height)  representing the minimum size of the drawer.  maxSize  Tuple of form  (width, height)  representing the maximum size of the drawer.  preferredEdge  The preferred edge of the window that the drawe should be attached to. If the\ndrawer cannot be opened on the preferred edge, it will be opened on the opposite edge. The options are:  +----------+\n| \"left\"   |\n+----------+\n| \"right\"  |\n+----------+\n| \"top\"|\n+----------+\n| \"bottom\" |\n+----------+  forceEdge  Boolean representing if the drawer should  always  be opened on the preferred edge.  leadingOffset  Distance between the top or left edge of the drawer and the parent window.  trailingOffset  Distance between the bottom or right edge of the drawer and the parent window.", 
            "title": "Drawer"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-inttotag", 
            "text": "", 
            "title": "function intToTag"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#combobox", 
            "text": "A text entry control that allows direct text entry or selection for a list of options.::  from vanilla import *  class ComboBoxDemo(object):  def  init (self):\nself.w = Window((100, 41))\nself.w.comboBox = ComboBox((10, 10, -10, 21),\n[\"AA\", \"BB\", \"CC\", \"DD\"],\ncallback=self.comboBoxCallback)\nself.w.open()  def comboBoxCallback(self, sender):\nprint \"combo box entry!\", sender.get()  ComboBoxDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the\ncombo box control. The size of the combo box sould match the appropriate value for the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 21|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 14|\n+---------+---+-----------+  items  The items to be displayed in the combo box.  completes  Boolean representing if the combo box auto completes entered text.  continuous  If True, the callback (if any) will be called upon each keystroke, if False, only call the callback when\nediting finishes or after item selection. Default is False.  callback  The method to be called when the user enters text.  formatter  An  NSFormatter  http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html _\nfor controlling the display and input of the combo box.  sizeStyle  A string representing the desired size style of the combo box. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "ComboBox"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#secureedittext", 
            "text": "Standard secure text entry control.::  from vanilla import *  class SecureEditTextDemo(object):  def  init (self):\nself.w = Window((100, 42))\nself.w.secureEditText = SecureEditText((10, 10, -10, 22),\ncallback=self.secureEditTextCallback)\nself.w.open()  def secureEditTextCallback(self, sender):\nprint \"text entry!\", sender.get()  SecureEditTextDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the text entry control.  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 19|\n+---------+---+-----------+\n| Mini| H | 16|\n+---------+---+-----------+  text  An object representing the contents of the text entry control. If no formatter has been assigned to the control,\nthis should be a string. If a formatter has been assigned, this should be an object of the type that the formatter expects.  callback  The method to be called when the user enters text.  continuous  If True, the callback (if any) will be called upon each keystroke, if False, only call the callback when\nediting finishes. Default is True.  readOnly  Boolean representing if the text can be edited or not.  formatter  An  NSFormatter  http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html _\nfor controlling the display and input of the text entry.  placeholder  A placeholder string to be shown when the text entry control is empty.  sizeStyle  A string representing the desired size style of the text entry control. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "SecureEditText"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#actionbutton", 
            "text": "An Action Button with a menu.  from vanilla import *  class ActionPopUpButtonDemo(object):  def  init (self):\nself.w = Window((100, 40))  items = [\ndict(title=\"first\", callback=self.firstCallback),\ndict(title=\"second\", callback=self.secondCallback),\ndict(title=\"third\", items=[\ndict(title=\"sub first\", callback=self.subFirstCallback)\n])\n]  self.w.actionPopUpButton = ActionButton((10, 10, 30, 20),\n  items,\n  )\nself.w.open()  def firstCallback(self, sender):\nprint \"first\"  def secondCallback(self, sender):\nprint \"second\"  def subFirstCallback(self, sender):\nprint \"sub first\"  ActionPopUpButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and\nsize of the pop up button. The size of the button sould match the appropriate value\nfor the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 20|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+  items  A list of items to appear in the pop up list as dictionaries. Optionally an item could be a NSMenuItem. \nwhen an item is set to \"----\" will be a menu item separator.  +------------+--------------------------------------------------------------------------------+\n| \"title\"*   | The title of the item. |\n+------------+--------------------------------------------------------------------------------+\n| \"callback\" | The callback fo the item.  |\n+------------+--------------------------------------------------------------------------------+\n| \"items\"| Each item could have sub menu's, as list of dictionaries with the same format. |\n+------------+--------------------------------------------------------------------------------+  sizeStyle  A string representing the desired size style of the pop up button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+  bordered  Boolean representing if the button should be bordered.", 
            "title": "ActionButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#slider", 
            "text": "A standard slider control. Sliders can be vertical or horizontal and\nthey can show tick marks or not show tick marks.::  from vanilla import *  class SliderDemo(object):  def  init (self):\n self.w = Window((200, 43))\n self.w.slider = Slider((10, 10, -10, 23),\ntickMarkCount=10,\ncallback=self.sliderCallback)\n self.w.open()  def sliderCallback(self, sender):\n print \"slider edit!\", sender.get()  SliderDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and\nsize of the slider. The size of the slider sould match the appropriate value for\nthe given  sizeStyle .  +---------------------------+\n|  Standard Dimensions    |\n+---------------------------+\n|  without ticks    |\n+---------+---+----+---+----+\n| Regular | W | 15 | H | 15 |\n+---------+---+----+---+----+\n| Small   | W | 12 | H | 11 |\n+---------+---+----+---+----+\n| Mini| W | 10 | H | 10 |\n+---------+---+----+---+----+\n|  with ticks   |\n+---------+---+----+---+----+\n| Regular | W | 24 | H | 23 |\n+---------+---+----+---+----+\n| Small   | W | 17 | H | 17 |\n+---------+---+----+---+----+\n| Mini| W | 16 | H | 16 |\n+---------+---+----+---+----+  minValue  The minimum value allowed by the slider.  maxValue  The maximum value allowed by the slider.  value  The initial value of the slider.  tickMarkCount  The number of tick marcks to be displayed on the slider.\nIf  None  is given, no tick marks will be displayed.  stopOnTickMarks  Boolean representing if the slider knob should only\nstop on the tick marks.  continuous  Boolean representing if the assigned callback should be\ncalled during slider editing. If  False  is given, the callback will be\ncalled after the editing has finished.  callback  The method to be called when the slider has been edited.  sizeStyle  A string representing the desired size style of the slider.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "Slider"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#splitview2", 
            "text": "View that can be split into two or more subviews with dividers.::  from vanilla import *  class SplitViewDemo(object):  def  init (self):\nself.w = Window((200, 200), \"SplitView Demo\", minSize=(100, 100))\nlist1 = List((0, 0, -0, 100), [\"A\", \"B\", \"C\"])\nlist2 = List((0, 0, -0, 100), [\"a\", \"b\", \"c\"])\npaneDescriptors = [\ndict(view=list1, identifier=\"pane1\"),\ndict(view=list2, identifier=\"pane2\"),\n]\nself.w.splitView = SplitView((0, 0, -0, -0), paneDescriptors)\nself.w.open()  SplitViewDemo()  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the split view.  paneDescriptions  An ordered list of dictionaries describing the\nsubviews, or \"panes\". Those dictionaries can have the following keys:  +-----------------------+-----------------------------------------------------------------------------+\n|  view | A view, either a Vanilla object or a NSView. Required.  |\n+-----------------------+-----------------------------------------------------------------------------+\n|  \"identifier\" | A string identifying the pane. Required.|\n+-----------------------+-----------------------------------------------------------------------------+\n|  \"size\"   | The initial size of the pane. Optional. |\n+-----------------------+-----------------------------------------------------------------------------+\n|  \"minSize\"    | The minimum size of the pane. Optional. The default is 0.   |\n+-----------------------+-----------------------------------------------------------------------------+\n|  \"maxSize\"    | The maximum size of the pane. Optional. The default is no maximum size. |\n+-----------------------+-----------------------------------------------------------------------------+\n|  \"canCollapse\"    | Boolean indicating if the pane can collapse. Optional. The default is True. |\n+-----------------------+-----------------------------------------------------------------------------+\n|  \"resizeFlexibility\"  | Boolean indicating if the pane can adjust its size automatically when the   |\n|   | SplitView size changes. Optional. The default is True unless the pane has a |\n|   | fixed size. |\n+-----------------------+-----------------------------------------------------------------------------+  isVertical  Boolean representing if the split view is vertical.\nDefault is  True .  dividerStyle  String representing the style of the divider.\nThese are the options:\n+----------+\n| splitter |\n+----------+\n| thin |\n+----------+\n| thick|\n+----------+\n| None |\n+----------+  dividerThickness  An integer representing the desired thickness of the divider.  dividerColor  A NSColor that should be used to paint the divider.  autosaveName  The autosave name for the SplitView.", 
            "title": "SplitView2"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#varfonttexteditor", 
            "text": "", 
            "title": "VarFontTextEditor"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#box", 
            "text": "A bordered container for other controls.  To add a control to a box, simply set it as an attribute of the box.::  from vanilla import *  class BoxDemo(object):  def  init (self):\nself.w = Window((150, 70))\nself.w.box = Box((10, 10, -10, -10))\nself.w.box.text = TextBox((10, 10, -10, -10), \"This is a box\")\nself.w.open()  BoxDemo()  No special naming is required for the attributes. However, each attribute must have a unique name.  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the box.  title  The title to be displayed dabove the box. Pass  None  if no title is desired.", 
            "title": "Box"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#gradientbutton", 
            "text": "", 
            "title": "GradientButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-levelindicatorlistcell", 
            "text": "An object that displays a level indicator in a List column.  This object should only be used in the  columnDescriptions  argument\nduring the construction of a List. ::  from vanilla import *  class LevelIndicatorListCellDemo(object):  def  init (self):\n self.w = Window((340, 140))\n items = [\n {\"discrete\": 3, \"continuous\": 4, \"rating\": 1, \"relevancy\": 9},\n {\"discrete\": 8, \"continuous\": 3, \"rating\": 5, \"relevancy\": 5},\n {\"discrete\": 3, \"continuous\": 7, \"rating\": 3, \"relevancy\": 4},\n {\"discrete\": 2, \"continuous\": 5, \"rating\": 4, \"relevancy\": 7},\n {\"discrete\": 6, \"continuous\": 9, \"rating\": 3, \"relevancy\": 2},\n {\"discrete\": 4, \"continuous\": 0, \"rating\": 6, \"relevancy\": 8},\n ]\n columnDescriptions = [\n {\"title\": \"discrete\",\n \"cell\": LevelIndicatorListCell(style=\"discrete\", warningValue=7, criticalValue=9)},\n {\"title\": \"continuous\", \n \"cell\": LevelIndicatorListCell(style=\"continuous\", warningValue=7, criticalValue=9)},\n {\"title\": \"rating\",\n \"cell\": LevelIndicatorListCell(style=\"rating\", maxValue=6)},\n {\"title\": \"relevancy\",\n \"cell\": LevelIndicatorListCell(style=\"relevancy\")},\n ]\n self.w.list = List((0, 0, -0, -0), items=items,\ncolumnDescriptions=columnDescriptions)\n self.w.open()  LevelIndicatorListCellDemo()  style  The style of the level indicator. The options are:  +--------------+-----------------------------------------+\n| \"continuous\" | A continuous bar.   |\n+--------------+-----------------------------------------+\n| \"discrete\"   | A segmented bar.|\n+--------------+-----------------------------------------+\n| \"rating\" | A row of stars. Similar to the rating   |\n|  | indicator in iTunes.|\n+--------------+-----------------------------------------+\n| \"relevancy\"  | A row of lines. Similar to the search   |\n|  | result relevancy indicator in Mail. |\n+--------------+-----------------------------------------+  minValue  The minimum value allowed by the level indicator.  maxValue  The maximum value allowed by the level indicator.  warningValue  The value at which the filled portions of the\nlevel indicator should display the warning color. Applies only to\ndiscrete and continuous level indicators.  criticalValue  The value at which the filled portions of the\nlevel indicator should display the critical color. Applies only to\ndiscrete and continuous level indicators.", 
            "title": "function LevelIndicatorListCell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#hudfloatingwindow", 
            "text": "A window that floats above all other windows and has the HUD appearance.  To add a control to a window, simply set it as an attribute of the window.  from vanilla import *  class HUDFloatingWindowDemo(object):  def  init (self):\nself.w = HUDFloatingWindow((200, 70), \"HUDFloatingWindow Demo\")\nself.w.myButton = Button((10, 10, -10, 20), \"My Button\")\nself.w.myTextBox = TextBox((10, 40, -10, 17), \"My Text Box\")\nself.w.open()  HUDFloatingWindowDemo()  No special naming is required for the attributes. However, each attribute\nmust have a unique name.  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the window. It may also be a tuple of form  (width, height) .\nIn this case, the window will be positioned on screen automatically.  title  The title to be set in the title bar of the window.  minSize  Tuple of the form  (width, height)  representing the minimum size\nthat the window can be resized to.  maxSize  Tuple of the form  (width, height)  representing the maximum size\nthat the window can be resized to.  textured  Boolean value representing if the window should have a textured\nappearance or not.  autosaveName  A string representing a unique name for the window. If given,\nthis name will be used to store the window position and size in the application\npreferences.  closable  Boolean value representing if the window should have a close button\nin the title bar.  screen  A  NSScreen  http://tinyurl.com/NSScreen _ object indicating the screen that\nthe window should be drawn to. When None the window will be drawn to the main screen.", 
            "title": "HUDFloatingWindow"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#list", 
            "text": "A control that shows a list of items. These lists can contain one or more columns.  A single column example::  from vanilla import *  class ListDemo(object):  def  init (self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0), [\"A\", \"B\", \"C\"],\n selectionCallback=self.selectionCallback)\nself.w.open()  def selectionCallback(self, sender):\nprint sender.getSelection()  ListDemo()  A mutliple column example::  from vanilla import *  class ListDemo(object):  def  init (self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n [{\"One\": \"A\", \"Two\": \"a\"}, {\"One\": \"B\", \"Two\": \"b\"}],\n columnDescriptions=[{\"title\": \"One\"}, {\"title\": \"Two\"}],\n selectionCallback=self.selectionCallback)\nself.w.open()  def selectionCallback(self, sender):\nprint sender.getSelection()  ListDemo()  List objects behave like standard Python lists. For xample, given this List:::  self.w.myList = List((10, 10, 200, 100), [\"A\", \"B\", \"C\"])  The following Python list methods work:::", 
            "title": "List"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#getting-the-length-of-the-list", 
            "text": "len(self.w.myList)\n3", 
            "title": "Getting the length of the List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#retrieving-an-item-or-items-from-a-list", 
            "text": "self.w.myList[1]\n\"B\"  self.w.myList[:2]\n[\"A\", \"B\"]", 
            "title": "Retrieving an item or items from a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#setting-an-item-in-a-list", 
            "text": "self.w.myList[1] = \"XYZ\"  self.w.myList.get()\n[\"A\", \"XYZ\", \"C\"]", 
            "title": "Setting an item in a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#deleting-an-item-at-an-index-in-a-list", 
            "text": "del self.w.myList[1]  self.w.myList.get()\n[\"A\", \"C\"]", 
            "title": "Deleting an item at an index in a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#appending-an-item-to-a-list", 
            "text": "self.w.myList.append(\"Z\")  self.w.myList.get()\n[\"A\", \"B\", \"C\", \"Z\"]", 
            "title": "Appending an item to a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#removing-the-first-occurance-of-an-item-in-a-list", 
            "text": "self.w.myList.remove(\"A\")  self.w.myList.get()\n[\"B\", \"C\"]", 
            "title": "Removing the first occurance of an item in a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#getting-the-index-for-the-first-occurance-of-an-item-in-a-list", 
            "text": "self.w.myList.index(\"B\")\n1", 
            "title": "Getting the index for the first occurance of an item in a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#inserting-an-item-into-a-list", 
            "text": "self.w.myList.insert(1, \"XYZ\")  self.w.myList.get()\n[\"A\", \"XYZ\", \"B\", \"C\"]", 
            "title": "Inserting an item into a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#extending-a-list", 
            "text": "self.w.myList.extend([\"X\", \"Y\", \"Z\"])  self.w.myList.get()\n[\"A\", \"B\", \"C\", \"X\", \"Y\", \"Z\"]", 
            "title": "Extending a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#iterating-over-a-list", 
            "text": "for i in self.w.myList:  i\n\"A\"  \"B\"\n\"C\"  posSize  Tuple of form  (left, top, width, height)  representing the\nposition and size of the list.  items  The items to be displayed in the list. In the case of multiple\ncolumn lists, this should be a list of dictionaries with the data for\neach column keyed by the column key as defined in columnDescriptions.\nIf you intend to use a dataSource,  items  must be  None .  dataSource  A Cocoa object supporting the  NSTableDataSource \nprotocol. If  dataSource  is given,  items  must be  None .  columnDescriptions  An ordered list of dictionaries describing the\ncolumns. This is only necessary for multiple column lists.  +--------------------------------+--------------------------------------------------------------------------------+\n|  \"title\"   | The title to appear in the column header.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n|  \"key\"  (optional) | The key from which this column should get  |\n|| its data from each dictionary in  items . If   |\n|| nothing is given, the key will be the string   |\n|| given in  title .  |\n+--------------------------------+--------------------------------------------------------------------------------+\n|  \"formatter\"  (optional)   | An  NSFormatter   http://tinyurl.com/NSFormatter _|\n|| for cntrolling the display and input of the|\n|| column's cells.|\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"cell\"* (optional)| A cell type to be displayed in the column. |\n|| If nothing is given, a text cell is used.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"editable\"* (optional)| Enable or disable editing in the column. If|\n|| nothing is given, it will follow the   |\n|| editability of the rest of the list.   |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"width\"* (optional)   | The width of the column.   |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"minWidth\"* (optional)| The minimum width of the column. The fallback is width .  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"maxWidth\"* (optional)| The maximum width of the column. The fallback is width .  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"allowsSorting\"* (optional)   | A boolean representing that this column allows the user|\n|| to sort the table by clicking the column's header. |\n|| The fallback is True . If a List is set to disallow   |\n|| sorting the column level settings will be ignored  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *\"typingSensitive\"* (optional) | A boolean representing that this column|\n|| should be the column that responds to user |\n|| key input. Only one column can be flagged as   |\n|| True. If no column is flagged, the first   |\n|| column will automatically be flagged.  |\n+--------------------------------+--------------------------------------------------------------------------------+\n| *binding* (optional)   | A string indicating which binding object  http://tinyurl.com/CocoaBindings `_ |\n|| the column's cell should be bound to. By   |\n|| default, this is \"value.\" You should only  |\n|| override this in very specific cases.  |\n+--------------------------------+--------------------------------------------------------------------------------+  showColumnTitles  Boolean representing if the column titles should be shown or not.\nColumn titles will not be shown in single column lists.  selectionCallback  Callback to be called when the selection in the list changes.  doubleClickCallback  Callback to be called when an item is double clicked.  editCallback  Callback to be called after an item has been edited.  enableDelete  A boolean representing if items in the list can be deleted via the interface.  enableTypingSensitivity  A boolean representing if typing in the list will jump to the\nclosest match as the entered keystrokes.  Available only in single column lists.  allowsMultipleSelection  A boolean representing if the list allows more than one item to be selected.  allowsEmptySelection  A boolean representing if the list allows zero items to be selected.  allowsSorting  A boolean indicating if the list allows user sorting by clicking column headers.  drawVerticalLines  Boolean representing if vertical lines should be drawn in the list.  drawHorizontalLines  Boolean representing if horizontal lines should be drawn in the list.  drawFocusRing  Boolean representing if the standard focus ring should be drawn when the list is selected.  rowHeight  The height of the rows in the list.  autohidesScrollers  Boolean representing if scrollbars should automatically be hidden if possible.  selfDropSettings  A dictionary defining the drop settings when the source of the drop\nis this list. The dictionary form is described below.  selfWindowDropSettings  A dictionary defining the drop settings when the source of the drop\nis contained the same document as this list. The dictionary form is described below.  selfDocumentDropSettings  A dictionary defining the drop settings when the source of the drop\nis contained the same window as this list. The dictionary form is described below.  selfApplicationDropSettings  A dictionary defining the drop settings when the source of the drop\nis contained the same application as this list. The dictionary form is described below.  otherApplicationDropSettings  A dictionary defining the drop settings when the source of the drop\nis contained an application other than the one that contains this list. The dictionary form is described below.  The drop settings dictionaries should be of this form:  +-----------------------------------+--------------------------------------------------------------------+\n|  type | A single drop type indicating what drop types the list accepts.|\n|   | For example, NSFilenamesPboardType or \"MyCustomPboardType\".|\n+-----------------------------------+--------------------------------------------------------------------+\n|  operation  (optional)| A \"drag operation  http://tinyurl.com/NSDraggingIn `  that |\n|   | the list accepts. The default is  NSDragOperationCopy .|\n+-----------------------------------+--------------------------------------------------------------------+\n|  allowDropBetweenRows  (optional) | A boolean indicating if the list accepts drops between rows.   |\n|   | The default is True.   |\n+-----------------------------------+--------------------------------------------------------------------+\n|  allowDropOnRow  (optional)   | A boolean indicating if the list accepts drops on rows.|\n|   | The default is False.  |\n+-----------------------------------+--------------------------------------------------------------------+\n|  callback | Callback to be called when a drop is proposed and when a drop  |\n|   | is to occur. This method should return a boolean representing  |\n|   | if the drop is acceptable or not. This method must accept  sender  |\n|   | and  dropInfo  arguments. The _dropInfo  will be a dictionary as   |\n|   | described below.   |\n+-----------------------------------+--------------------------------------------------------------------+  The dropInfo dictionary passed to drop callbacks will be of this form:  +--------------+--------------------------------------------------------------------------------------------+\n|  data    | The data proposed for the drop. This data will be of the type specified by dropDataFormat. |\n+--------------+--------------------------------------------------------------------------------------------+\n|  rowIndex    | The row where the drop is proposed.|\n+--------------+--------------------------------------------------------------------------------------------+\n|  source  | The source from which items are being dragged. If this object is wrapped by Vanilla, the   |\n|  | Vanilla object will be passed as the source.   |\n+--------------+--------------------------------------------------------------------------------------------+\n|  dropOnRow   | A boolean representing if the row is being dropped on. If this is False, the drop should   |\n|  | occur between rows.|\n+--------------+--------------------------------------------------------------------------------------------+\n|  isProposal  | A boolean representing if this call is simply proposing the drop or if it is time to   |\n|  | accept the drop.   |\n+--------------+--------------------------------------------------------------------------------------------+", 
            "title": "Iterating over a List."
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#imageview", 
            "text": "A view that displays an image.  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the view.  horizontalAlignment  A string representing the desired horizontal\nalignment of the image in the view. The options are:  +-------------+-------------------------+\n| \"left\"  | Image is aligned left.  |\n+-------------+-------------------------+\n| \"right\" | Image is aligned right. |\n+-------------+-------------------------+\n| \"center\"| Image is centered.  |\n+-------------+-------------------------+  verticalAlignment  A string representing the desired vertical alignment\nof the image in the view. The options are:  +-------------+--------------------------+\n| \"top\"   | Image is aligned top.|\n+-------------+--------------------------+\n| \"bottom\"| Image is aligned bottom. |\n+-------------+--------------------------+\n| \"center\"| Image is centered.   |\n+-------------+--------------------------+  scale  A string representing the desired scale style of the image in the\nview. The options are:  +----------------+----------------------------------------------+\n| \"porportional\" | Proportionally scale the image to fit in the |\n|| view if it is larger than the view.  |\n+----------------+----------------------------------------------+\n| \"fit\"  | Distort the proportions of the image until   |\n|| it fits exactly in the view. |\n+----------------+----------------------------------------------+\n| \"none\" | Do not scale the image.  |\n+----------------+----------------------------------------------+", 
            "title": "ImageView"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#scrollview", 
            "text": "A view with scrollers for containing another view.::  from AppKit import NSView, NSColor, NSRectFill\nfrom vanilla import *  class DemoView(NSView):  def drawRect_(self, rect):\nNSColor.redColor().set()\nNSRectFill(self.bounds())  class ScrollViewDemo(object):  def  init (self):\nself.w = Window((200, 200))\nself.view = DemoView.alloc().init()\nself.view.setFrame_(((0, 0), (300, 300)))\nself.w.scrollView = ScrollView((10, 10, -10, -10),\nself.view)\nself.w.open()  ScrollViewDemo()  posSize  Tuple of form  (left, top, width, height)  representing the\nposition and size of the scroll view.  nsView  A  NSView  object.  hasHorizontalScroller  Boolean representing if the scroll view has\nhorizontal scrollers.  hasVerticalScroller  Boolean representing if the scroll view has\nvertical scrollers.  autohidesScrollers  Boolean representing if the scroll view auto-hides\nits scrollers.  backgroundColor  A  NSColor  object representing the background\ncolor of the scroll view.  drawsBackground  Boolean representing if the background should be drawn.", 
            "title": "ScrollView"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#progressspinner", 
            "text": "An animated, spinning progress indicator.::  from vanilla import *  class ProgressSpinnerDemo(object):  def  init (self):\nself.w = Window((80, 52))\nself.w.spinner = ProgressSpinner((24, 10, 32, 32),\ndisplayWhenStopped=True)\nself.w.spinner.start()\nself.w.open()  ProgressSpinnerDemo()  posSize  Tuple of form  (left, top, width, height)  representing the\nposition and size of the spinner. The size of the spinner sould match the\nappropriate value for the given  sizeStyle .  +---------------------------+\n|  Standard Dimensions    |\n+---------+---+----+---+----+\n| Regular | W | 32 | H | 32 |\n+---------+---+----+---+----+\n| Small   | W | 16 | H | 16 |\n+---------+---+----+---+----+  displayWhenStopped  Boolean representing if the spiiner should be\ndisplayed when it is not spinning.  sizeStyle  A string representing the desired size style of the spinner.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+", 
            "title": "ProgressSpinner"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#button", 
            "text": "A standard button.::  from vanilla import *  class ButtonDemo(object):  def  init (self):\n self.w = Window((100, 40))\n self.w.button = Button((10, 10, -10, 20), \"A Button\",\ncallback=self.buttonCallback)\n self.w.open()  def buttonCallback(self, sender):\n print \"button hit!\"  ButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the button. The size of the button sould match the appropriate value\nfor the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+=========+===+===========+\n| Regular | H | 20|\n+---------+---+-----------+\n| Small   | H | 17|\n+---------+---+-----------+\n| Mini| H | 14|\n+---------+---+-----------+  title  The text to be displayed on the button. Pass  None  is no title is desired.  callback  The method to be called when the user presses the button.  sizeStyle  A string representing the desired size style of the button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "Button"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#objectbrowser", 
            "text": "An object browser.  posSize  Tuple of form  (left, top, width, height)  representing the position and\nsize of the browser.  obj  The object to be displayed.", 
            "title": "ObjectBrowser"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#pathcontrol", 
            "text": "A path control.  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the control. The size of the control sould match the appropriate value\nfor the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+=========+===+===========+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 20|\n+---------+---+-----------+\n| Mini| H | 18|\n+---------+---+-----------+  url  The url to be displayed in the control. This should be a NSURL object.  editable  A boolean indicating if this control is editable or not.  callback  The method to be called when the user presses the control.  sizeStyle  A string representing the desired size style of the button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "PathControl"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#texteditor", 
            "text": "Standard long text entry control.::  from vanilla import *  class TextEditorDemo(object):  def  init (self):\nself.w = Window((200, 200))\nself.w.textEditor = TextEditor((10, 10, -10, 22),\ncallback=self.textEditorCallback)\nself.w.open()  def textEditorCallback(self, sender):\nprint \"text entry!\", sender.get()  TextEditorDemo()  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the text entry control.  text  The text to be displayed in the text entry control.  callback  The method to be called when the user presses the text\nentry control.  readOnly  Boolean representing if the text can be edited or not.  checksSpelling  Boolean representing if spelling should be automatically\nchecked or not.", 
            "title": "TextEditor"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-getfont", 
            "text": "", 
            "title": "function getFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#textbox", 
            "text": "A rectangle containing static text.::  from vanilla import *  class TextBoxDemo(object):  def  init (self):\n self.w = Window((100, 37))\n self.w.textBox = TextBox((10, 10, -10, 17), \"A TextBox\")\n self.w.open()  TextBoxDemo()  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the text box.  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 17|\n+---------+---+-----------+\n| Small   | H | 14|\n+---------+---+-----------+\n| Mini| H | 12|\n+---------+---+-----------+  text  The text to be displayed in the text box. If the object is a NSAttributedString , the attributes will be used for display.  alignment  A string representing the desired visual alignment of the\ntext in the text box. The options are:  +-------------+-----------------------------------------------------+\n| \"left\"  | Text is aligned left.   |\n+-------------+-----------------------------------------------------+\n| \"right\" | Text is aligned right.  |\n+-------------+-----------------------------------------------------+\n| \"center\"| Text is centered.   |\n+-------------+-----------------------------------------------------+\n| \"justified\" | Text is justified.  |\n+-------------+-----------------------------------------------------+\n| \"natural\"   | Follows the natural alignment of the text's script. |\n+-------------+-----------------------------------------------------+  selectable  Boolean representing if the text is selectable or not.  sizeStyle  A string representing the desired size style of the button.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#splitview", 
            "text": "View that can be split into two or more subviews with dividers.::  from vanilla import *  class SplitViewDemo(object):  def  init (self):\nself.w = Window((200, 200), \"SplitView Demo\", minSize=(100, 100))\nlist1 = List((0, 0, -0, 100), [\"A\", \"B\", \"C\"])\nlist2 = List((0, 0, -0, 100), [\"a\", \"b\", \"c\"])\npaneDescriptors = [\ndict(view=list1, identifier=\"pane1\"),\ndict(view=list2, identifier=\"pane2\"),\n]\nself.w.splitView = SplitView((0, 0, -0, -0), paneDescriptors)\nself.w.open()  SplitViewDemo()  The wrapped object is an  RBSplitView  http://www.brockerhoff.net/src/rbs.html _ object.  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the split view.  paneDescriptions  An ordered list of dictionaries describing the\nsubviews, or \"panes\". Those dictionaries can have the following keys:  +-----------------+-----------------------------------------------------------------------------+\n|  view   | A view, either a Vanilla object or a NSView. Required.  |\n+-----------------+-----------------------------------------------------------------------------+\n|  \"identifier\"   | A string identifying the pane. Required.|\n+-----------------+-----------------------------------------------------------------------------+\n|  \"size\" | The initial size of the pane. Optional. |\n+-----------------+-----------------------------------------------------------------------------+\n|  \"minSize\"  | The minimum size of the pane. Optional. The default is 1.   |\n+-----------------+-----------------------------------------------------------------------------+\n|  \"maxSize\"  | The maximum size of the pane. Optional. The default is no maximum size. |\n+-----------------+-----------------------------------------------------------------------------+\n|  \"canCollapse\"  | Boolean indicating if the pane can collapse. Optional. The default is True. |\n+-----------------+-----------------------------------------------------------------------------+  isVertical  Boolean representing if the split view is vertical.\nDefault is  True .", 
            "title": "SplitView"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#imagebutton", 
            "text": "A button with an image.::  from vanilla import *  class ImageButtonDemo(object):  def  init (self):\n path = \"/path/to/an/image\"\n self.w = Window((50, 50))\n self.w.button = ImageButton((10, 10, 30, 30), imagePath=path,\ncallback=self.buttonCallback)\n self.w.open()  def buttonCallback(self, sender):\n print \"button hit!\"  ImageButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the button.  title  The text to be displayed on the button. Pass  None  is no title is desired.  bordered  Boolean representing if the button should be bordered.  imagePath  A file path to an image.  imageNamed  The name of an image already load as a  NSImage  by the application.  imageObject  A  NSImage  object.  Only one of imagePath, imageNamed, imageObject should be set.  imagePosition  The position of the image relative to the title. The options are:  +----------+\n| \"top\"|\n+----------+\n| \"bottom\" |\n+----------+\n| \"left\"   |\n+----------+\n| \"right\"  |\n+----------+  callback  The method to be called when the user presses the button.  sizeStyle  A string representing the desired size style of the button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "ImageButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#squarebutton", 
            "text": "A standard square button.::  from vanilla import *  class SquareButtonDemo(object):  def  init (self):\n self.w = Window((200, 100))\n self.w.button = SquareButton((10, 10, -10, -10), \"A Button\",\ncallback=self.buttonCallback)\n self.w.open()  def buttonCallback(self, sender):\n print \"button hit!\"  SquareButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the button.  title  The text to be displayed on the button. Pass  None  is no title is desired.  callback  The method to be called when the user presses the button.  sizeStyle  A string representing the desired size style of the button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "SquareButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#vanillabaseobject", 
            "text": "", 
            "title": "VanillaBaseObject"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#segmentedbutton", 
            "text": "A standard segmented button.::  from vanilla import *  class SegmentedButtonDemo(object):  def  init (self):\n self.w = Window((100, 40))\n self.w.button = SegmentedButton((10, 10, -10, 20),\n [dict(title=\"A\"), dict(title=\"B\"), dict(title=\"C\")],\ncallback=self.buttonCallback)\n self.w.open()  def buttonCallback(self, sender):\n print \"button hit!\"  SegmentedButtonDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the segmented button. The size of the segmented button sould match\nthe appropriate value for the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+=========+===+===========+\n| Regular | H | 21|\n+---------+---+-----------+\n| Small   | H | 18|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+  segmentDescriptions  An ordered list of dictionaries describing the segments.  +------------------------+--------------------------------------------------------------------------------------------------+\n| width (optional)   | The desired width of the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n| title (optional)   | The title of the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+\n| enabled (optional) | The enabled state of the segment. The default is  True . |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imagePath (optional)   | A file path to an image to display in the segment.   |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageNamed (optional)  | The name of an image already loaded as a  NSImage  by the application to display in the segment. |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| imageObject (optional) | A  NSImage  object to display in the segment.|\n+------------------------+--------------------------------------------------------------------------------------------------+  callback  The method to be called when the user presses the segmented button.  selectionStyle  The selection style in the segmented button.  +-----------+---------------------------------------------+\n| one   | Only one segment may be selected.   |\n+-----------+---------------------------------------------+\n| any   | Any number of segments may be selected. |\n+-----------+---------------------------------------------+\n| momentary | A segmented is only selected when tracking. |\n+-----------+---------------------------------------------+  sizeStyle  A string representing the desired size style of the segmented button. The options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "SegmentedButton"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#progressbar", 
            "text": "A standard progress bar.::  from vanilla import *  class ProgressBarDemo(object):  def  init (self):\nself.w = Window((200, 65))\nself.w.bar = ProgressBar((10, 10, -10, 16))\nself.w.button = Button((10, 35, -10, 20), \"Go!\",\ncallback=self.showProgress)\nself.w.open()  def showProgress(self, sender):\nimport time\nself.w.bar.set(0)\nfor i in range(10):\nself.w.bar.increment(10)\ntime.sleep(.2)  ProgressBarDemo()  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the progress bar. The height of the progress\nbar sould match the appropriate value for the given  sizeStyle .  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 16|\n+---------+---+-----------+\n| Small   | H | 10|\n+---------+---+-----------+  minValue  The minimum value of the progress bar.  maxValue  The maximum value of the progress bar.  isIndeterminate  Boolean representing if the progress bar is indeterminate.\nDeterminate progress bars show how much of the task has been completed.\nIndeterminate progress bars simply show that the application is busy.  sizeStyle  A string representing the desired size style of the pregress bar.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+", 
            "title": "ProgressBar"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#vanillaerror", 
            "text": "", 
            "title": "VanillaError"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#verticalline", 
            "text": "A vertical line.::  from vanilla import *  class VerticalLineDemo(object):  def  init (self):\nself.w = Window((80, 100))\nself.w.line = VerticalLine((40, 10, 1, -10))\nself.w.open()  VerticalLineDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position and size of the line.  +-------------------------+\n|  Standard Dimensions  |\n+---+---------------------+\n| V | 1   |\n+---+---------------------+", 
            "title": "VerticalLine"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-tagtoint", 
            "text": "", 
            "title": "function tagToInt"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-popupbuttonlistcell", 
            "text": "An object that displays a pop up list in a List column.  This object should only be used in the  columnDescriptions \nargument during the construction of a List.  items  The items that should appear in the pop up list.  Note: when using this cell in a List, the  binding  in the\ncolumn description must be set to  selectedValue .  Example::  from vanilla import *  class PopUpButtonListCellDemo(object):  def  init (self):\nself.w = Window((100, 100))\nself.w.myList = List((0, 0, -0, -0),\n[{\"value\": \"A\"}, {\"value\": \"B\"}],\ncolumnDescriptions=[\n{\"title\": \"value\", \"cell\": PopUpButtonListCell([\"A\", \"B\", \"C\"]), \"binding\": \"selectedValue\"}\n],\neditCallback=self.editCallback)\nself.w.open()  def editCallback(self, sender):\nprint sender.get()  PopUpButtonListCellDemo()", 
            "title": "function PopUpButtonListCell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#function-sliderlistcell", 
            "text": "An object that displays a slider in a List column.  This object should only be used in the  columnDescriptions \nargument during the construction of a List.  minValue  The minimum value for the slider.  maxValue  The maximum value for the slider.  tickMarkCount  The number of tick marcks to be displayed on the slider.\nIf  None  is given, no tick marks will be displayed.  stopOnTickMarks  Boolean representing if the slider knob should only\nstop on the tick marks.  Example::  from vanilla import *  class SliderListCellDemo(object):  def  init (self):\nself.w = Window((200, 100))\nself.w.myList = List((0, 0, -0, -0),\n[{\"value1\": 30, \"value2\": 70}],\ncolumnDescriptions=[\n{\"title\": \"value1\", \"cell\": SliderListCell()},\n{\"title\": \"value2\", \"cell\": SliderListCell(tickMarkCount=10)},\n],\neditCallback=self.editCallback)\nself.w.open()  def editCallback(self, sender):\nprint sender.get()  SliderListCellDemo()", 
            "title": "function SliderListCell"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#searchbox", 
            "text": "A text entry field similar to the search field in Safari.::  from vanilla import *  class SearchBoxDemo(object):  def  init (self):\nself.w = Window((100, 42))\nself.w.searchBox = SearchBox((10, 10, -10, 22),\ncallback=self.searchBoxCallback)\nself.w.open()  def searchBoxCallback(self, sender):\nprint \"search box entry!\", sender.get()  SearchBoxDemo()  posSize  Tuple of form  (left, top, width, height)  representing\nthe position and size of the search box.  +-------------------------+\n|  Standard Dimensions  |\n+---------+---+-----------+\n| Regular | H | 22|\n+---------+---+-----------+\n| Small   | H | 19|\n+---------+---+-----------+\n| Mini| H | 15|\n+---------+---+-----------+  text  The text to be displayed in the search box.  callback  The method to be called when the user presses the search box.  formatter  A  NSFormatter  http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSFormatter_Class/index.html _\nfor controlling the display and input of the text entry.  placeholder  A placeholder string to be shown when the text entry\ncontrol is empty.  sizeStyle  A string representing the desired size style of the search box.\nThe options are:  +-----------+\n| \"regular\" |\n+-----------+\n| \"small\"   |\n+-----------+\n| \"mini\"|\n+-----------+", 
            "title": "SearchBox"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableeditor/#levelindicator", 
            "text": "A control which shows a value on a linear scale.::  from vanilla import *  class LevelIndicatorDemo(object):  def  init (self):\n self.w = Window((200, 68))\n self.w.discreteIndicator = LevelIndicator(\n(10, 10, -10, 18), callback=self.levelIndicatorCallback)\n self.w.continuousIndicator = LevelIndicator(\n(10, 40, -10, 18), style=\"continuous\",\ncallback=self.levelIndicatorCallback)\n self.w.open()  def levelIndicatorCallback(self, sender):\n print \"level indicator edit!\", sender.get()  LevelIndicatorDemo()  posSize  Tuple of form  (left, top, width, height)  representing the position\nand size of the level indicator.  +-------------------------------+\n|  Standard Dimensions()  |\n+-------------------------------+\n|  discrete without ticks   |\n+-------------------------------+\n| H | 18|\n+-------------------------------+\n|  discrete with minor ticks    |\n+-------------------------------+\n| H | 22|\n+-------------------------------+\n|  discrete with major ticks    |\n+-------------------------------+\n| H | 25|\n+-------------------------------+\n|  continuous without ticks |\n+-------------------------------+\n| H | 16|\n+-------------------------------+\n|  continuous with minor ticks  |\n+-------------------------------+\n| H | 20|\n+-------------------------------+\n|  continuous with major ticks  |\n+-------------------------------+\n| H | 23|\n+-------------------------------+  style  The style of the level indicator. The options are:  +--------------+-------------------+\n| \"continuous\" | A continuous bar. |\n+--------------+-------------------+\n| \"discrete\"   | A segmented bar.  |\n+--------------+-------------------+  value  The initial value of the level indicator.  minValue  The minimum value allowed by the level indicator.  maxValue  The maximum value allowed by the level indicator.  warningValue  The value at which the filled portions of the\nlevel indicator should display the warning color.  criticalValue  The value at which the filled portions of the\nlevel indicator should display the critical color.  tickMarkPosition  The position of the tick marks in relation\nto the level indicator. The options are:  +---------+\n| \"above\" |\n+---------+\n| \"below\" |\n+---------+  minorTickMarkCount  The number of minor tick marcks to be displayed\non the level indicator. If  None  is given, no minor tick marks will be displayed.  majorTickMarkCount  The number of major tick marcks to be displayed on the level\nindicator. If  None  is given, no major tick marks will be displayed.  callback  The method to be called when the level indicator has been edited.\nIf no callback is given, the level indicator will not be editable.", 
            "title": "LevelIndicator"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/", 
            "text": "elements.variablefonts.variableglyphs\n\n\nFunctions\n\n\ndivision\n\n\nElement\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nVariableGlyphs", 
            "title": "Variableglyphs"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#elementsvariablefontsvariableglyphs", 
            "text": "", 
            "title": "elements.variablefonts.variableglyphs"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variableglyphs/#variableglyphs", 
            "text": "", 
            "title": "VariableGlyphs"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/", 
            "text": "elements.variablefonts.variablescatter\n\n\nFunctions\n\n\ndivision\n\n\nElement\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nVariableScatter\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "Variablescatter"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#elementsvariablefontsvariablescatter", 
            "text": "", 
            "title": "elements.variablefonts.variablescatter"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#variablescatter", 
            "text": "", 
            "title": "VariableScatter"
        }, 
        {
            "location": "/pagebot/elements/variablefonts/variablescatter/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/views/", 
            "text": "elements.views\n\n\nClasses\n\n\n\n\npagebot.elements.views.defaultview\n\n\npagebot.elements.views.htmlcssview\n\n\npagebot.elements.views.kirbyview\n\n\npagebot.elements.views.singleview\n\n\npagebot.elements.views.thumbview\n\n\npagebot.elements.views.view\n\n\n\n\nModules\n\n\nFunctions\n\n\nSingleView\n\n\nThumbView\n\n\nDefaultView\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/elements/views/#elementsviews", 
            "text": "", 
            "title": "elements.views"
        }, 
        {
            "location": "/pagebot/elements/views/#classes", 
            "text": "pagebot.elements.views.defaultview  pagebot.elements.views.htmlcssview  pagebot.elements.views.kirbyview  pagebot.elements.views.singleview  pagebot.elements.views.thumbview  pagebot.elements.views.view", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/elements/views/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/elements/views/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/#singleview", 
            "text": "", 
            "title": "SingleView"
        }, 
        {
            "location": "/pagebot/elements/views/#thumbview", 
            "text": "", 
            "title": "ThumbView"
        }, 
        {
            "location": "/pagebot/elements/views/#defaultview", 
            "text": "", 
            "title": "DefaultView"
        }, 
        {
            "location": "/pagebot/elements/views/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/defaultview/", 
            "text": "elements.views.defaultview\n\n\nFunctions\n\n\nDefaultView\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Defaultview"
        }, 
        {
            "location": "/pagebot/elements/views/defaultview/#elementsviewsdefaultview", 
            "text": "", 
            "title": "elements.views.defaultview"
        }, 
        {
            "location": "/pagebot/elements/views/defaultview/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/defaultview/#defaultview", 
            "text": "", 
            "title": "DefaultView"
        }, 
        {
            "location": "/pagebot/elements/views/defaultview/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/htmlcssview/", 
            "text": "elements.views.htmlcssview\n\n\nFunctions\n\n\nHtmlCssView\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Htmlcssview"
        }, 
        {
            "location": "/pagebot/elements/views/htmlcssview/#elementsviewshtmlcssview", 
            "text": "", 
            "title": "elements.views.htmlcssview"
        }, 
        {
            "location": "/pagebot/elements/views/htmlcssview/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/htmlcssview/#htmlcssview", 
            "text": "", 
            "title": "HtmlCssView"
        }, 
        {
            "location": "/pagebot/elements/views/htmlcssview/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/kirbyview/", 
            "text": "elements.views.kirbyview\n\n\nFunctions\n\n\nKirbyView\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Kirbyview"
        }, 
        {
            "location": "/pagebot/elements/views/kirbyview/#elementsviewskirbyview", 
            "text": "", 
            "title": "elements.views.kirbyview"
        }, 
        {
            "location": "/pagebot/elements/views/kirbyview/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/kirbyview/#kirbyview", 
            "text": "", 
            "title": "KirbyView"
        }, 
        {
            "location": "/pagebot/elements/views/kirbyview/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/singleview/", 
            "text": "elements.views.singleview\n\n\nFunctions\n\n\nSingleView\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Singleview"
        }, 
        {
            "location": "/pagebot/elements/views/singleview/#elementsviewssingleview", 
            "text": "", 
            "title": "elements.views.singleview"
        }, 
        {
            "location": "/pagebot/elements/views/singleview/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/singleview/#singleview", 
            "text": "", 
            "title": "SingleView"
        }, 
        {
            "location": "/pagebot/elements/views/singleview/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/thumbview/", 
            "text": "elements.views.thumbview\n\n\nFunctions\n\n\nThumbView\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "Thumbview"
        }, 
        {
            "location": "/pagebot/elements/views/thumbview/#elementsviewsthumbview", 
            "text": "", 
            "title": "elements.views.thumbview"
        }, 
        {
            "location": "/pagebot/elements/views/thumbview/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/thumbview/#thumbview", 
            "text": "", 
            "title": "ThumbView"
        }, 
        {
            "location": "/pagebot/elements/views/thumbview/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/view/", 
            "text": "elements.views.view\n\n\nFunctions\n\n\nfunction asNumberOrNone\n\n\nfunction none2Empty\n\n\nfunction moreBlue\n\n\nfunction reverseDict\n\n\nfunction asString\n\n\nfunction point3D\n\n\nAnswer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.\n\n\nfunction path2ScriptId\n\n\nAnswer the scriptId, derived from the \nfile\n of the main source.\n\n\nfunction asStringOrEmpty\n\n\nfunction makeUniqueList\n\n\nfunction removeWhiteSpace\n\n\nVacuum s by removing all white space.\n\n\nfunction moreGreen\n\n\nfunction path2HintPath\n\n\nfunction path2Name\n\n\nAnswers the file name part of the path.\n\n\nfunction string2PlainWords\n\n\nfunction asFloat\n\n\nfunction font2Naked\n\n\ndivision\n\n\nfunction list2StringList\n\n\nfunction point2S\n\n\nAnswer the point as string of rounded integers. Ignore z value if it is 0.\n\n\nfunction list2String\n\n\nfunction fontName2StyleName\n\n\nfunction asSet\n\n\nfunction lighter\n\n\nfunction family2UfoQueryName\n\n\nfunction path2FormatPath\n\n\nAnswers the path where the extension is changed to format If format is\nNone, then the extension is removed.\n\n\nfunction string2WordsKey\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nfunction words2WordsKey\n\n\nfunction writeUnicode\n\n\nTakes a unicode string and returns a decimal integer.\n\n\nfunction shrink\n\n\nfunction asTuple\n\n\nfunction commaString2List\n\n\nfunction value2IdCommaString\n\n\nTransform a list with numbers into a comma separated string. This can be used to convert a list of record ids\ninto a SQL compatible list of ids, without integers showing up as @1234L@.\n\n\nfunction asFloatOrNone\n\n\nfunction moreRed\n\n\nfunction font2Path\n\n\nfunction float2Fixed\n\n\nThe @float2Fixed@ method translates a float into a 1/64 pixel unit-value.\n\n\nfunction index2PointId\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction path2GlyphIdName\n\n\nTake that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.\n\n\n/xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed\n\n\nxxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold\n\n\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'\n\n\n\nfunction readUnicodes\n\n\ntakes a list of robofab friendly integers and returns a string of unicodes.\n\n\nfunction fixed2Float\n\n\nThe @fixed2Float@ method translates a fixed 1/64 pixel-unit value to float.\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\nfunction asIntOrDefault\n\n\nfunction path2FontName\n\n\nTake that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.\n\n\n/xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed\n\n\nxxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold\n\n\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'\n\n\n\nfunction hex2char\n\n\nfunction commaString2IntegerList\n\n\nfunction obj2StyleId\n\n\nMake sure s is styleId format, other recursively transform into string with space separators.\nParts can be CSS-like #id and .class identifiers.\nNote that this may change in the future if more compatibility with CSS is necessary.\n\n\nfunction writeUnicodes\n\n\nTakes a list of unicode strings and returns a list of robofab-friendly integers.\n\n\nfunction interpolate\n\n\nAnswer the interpolated value of factor v between a and b. If doRound is True (default is False), then\nround the result before answering it.\n\n\nfunction bool2Int\n\n\nfunction path2ParentPath\n\n\n path2ParentPath('/xxx/yyy/zzz/')\n'/xxx/yyy/zzz'\n\n\n path2ParentPath('/xxx/yyy/zzz')\n'/xxx/yyy'\n\n\n path2ParentPath('/xxx/yyy/zzz.gif')\n'/xxx/yyy'\n\n\n\nfunction asIntOrValue\n\n\nfunction isUniqueList\n\n\nfunction obj2StyleIds\n\n\nWHITESPACE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nfunction asNumber\n\n\nfunction list2SpacedString\n\n\nfunction setStrokeColor\n\n\nSet global stroke color or the color of the formatted string.\n\n\nPLAINWORDS\n\n\nCompiled regular expression objects\n\n\nfunction arabic2RomanNumerals\n\n\nReturn the roman numeral representing n. Should work for n in (1, 4999). Borrowed from Nick Montfort.\n\n\nfunction font2FamilyName\n\n\nfunction font2UfoQueryName\n\n\nfunction asFormatted\n\n\nfunction strippedString\n\n\nfunction value2Fixed\n\n\nfunction field2Floq\n\n\nfunction floq2Field\n\n\nfunction idCommaString2IdSet\n\n\nTransform a string with comma separated items into a set of id integers.\n\n\nfunction lessGreen\n\n\nfunction json2Dict\n\n\nfunction asId\n\n\nThe \nasId\n method transforms the \nvalue\n attribute either to an instance of @\nlong@ or to @None@, so it can be used as \nid\n field in a @Record@\ninstance. If the value cannot be converted, then the optional \ndefault\n (default value is @0\n@) is answered.\n\n\nfunction font2ID\n\n\nAnswer the unique record/adapter ID of the font/style. This can be the unique database record id\nor the unique file path. For now we just answer the file path.\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nfunction list2Json\n\n\nfunction darker\n\n\nfunction hex2dec\n\n\nfunction font2FileName\n\n\nAnswer the font file name. In case of a new unsaved font,\nanswer \n\"Untitled\"\n.\n\n\nfunction filterValue2Int\n\n\nFilter all numeric characters from the string and answer the resulting integer.\nAnswer 0 if no digits are found. If s is already a number, then answer it as rounded int.\n\n\nfunction seconds2Date\n\n\nAnswer TTF seconds converted to a datetime instance.\n\n\nfunction asInt\n\n\nfunction asIntOrNone\n\n\nfunction path2FontId\n\n\nAnswers the font ID for the font associated with this path. If the path does not exist, or if the font name\nis invalid, then answer None.\n\n\nfunction list2CommaString\n\n\nfunction asRoundedOrZeroString\n\n\nfunction stringList2StrippedList\n\n\nfunction font2Name\n\n\nfunction uniqueID\n\n\nfunction bash\n\n\nRuns a command in the bash shell.\n\n\nfunction isInt\n\n\nfunction isUniqueDict\n\n\nfunction font2FamilyID\n\n\nAnswer the unique record/adapter ID of the family of \nfont\n. This can be the unique database\nrecord id of the font parent or the unique directory path of the font. For now we just answer the\nthe location of the family plist file.\nSpecial situation is if the font is not saved yet. In that case it does not have a path.\n\n\nfunction dict2Json\n\n\nfunction dec2hex\n\n\nfunction formatBinaryForTTX\n\n\nfunction lessRed\n\n\nfunction date2Seconds\n\n\nAnswer the datetime converted to TTF seconds.\n\n\nfunction asRoundedInt\n\n\nfunction asDict\n\n\nAnswer the value as dict as root. If the value itself is not a dict,\nanswer it as dict(value=value). For lower levels than root, answer\nthe plain value if is it a string or a number. Basic classed don't get\ntranslated when not called as root.\nAll other objects are called by value.asDict()\nIf the object cannot handle that method, then convert it to string.\n\n\nfunction makeStyle\n\n\nMake style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.\n\n\nElement\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nfunction json2List\n\n\nfunction readUnicode\n\n\nTakes a decimal integer and returns a unicode string.\n\n\nfunction lessBlue\n\n\nView\n\n\nA View is just another kind of container, kept by document to make a certain presentation of the page tree.\n\n\nfunction font2StyleName\n\n\nRIGHT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction asBool\n\n\nfunction fontName2FamilyName\n\n\nFor now take the chunk up till \"-\" in the filename and ignore the family name as set in the font.info\nAlso make sure that the extension is removed, if the font has no \"-\" it isn't name. Relay-Medium_Italic.ufo\nbecomes Relay. ThisFont.ufo becomes ThisFont.\n\n\nROMAN_NUMERAL_VALUES\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction int2Bool\n\n\nfunction module2Path", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/view/#elementsviewsview", 
            "text": "", 
            "title": "elements.views.view"
        }, 
        {
            "location": "/pagebot/elements/views/view/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asnumberornone", 
            "text": "", 
            "title": "function asNumberOrNone"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-none2empty", 
            "text": "", 
            "title": "function none2Empty"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-moreblue", 
            "text": "", 
            "title": "function moreBlue"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-reversedict", 
            "text": "", 
            "title": "function reverseDict"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asstring", 
            "text": "", 
            "title": "function asString"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-point3d", 
            "text": "Answer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "function point3D"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2scriptid", 
            "text": "Answer the scriptId, derived from the  file  of the main source.", 
            "title": "function path2ScriptId"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asstringorempty", 
            "text": "", 
            "title": "function asStringOrEmpty"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-makeuniquelist", 
            "text": "", 
            "title": "function makeUniqueList"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-removewhitespace", 
            "text": "Vacuum s by removing all white space.", 
            "title": "function removeWhiteSpace"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-moregreen", 
            "text": "", 
            "title": "function moreGreen"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2hintpath", 
            "text": "", 
            "title": "function path2HintPath"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2name", 
            "text": "Answers the file name part of the path.", 
            "title": "function path2Name"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-string2plainwords", 
            "text": "", 
            "title": "function string2PlainWords"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asfloat", 
            "text": "", 
            "title": "function asFloat"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2naked", 
            "text": "", 
            "title": "function font2Naked"
        }, 
        {
            "location": "/pagebot/elements/views/view/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-list2stringlist", 
            "text": "", 
            "title": "function list2StringList"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-point2s", 
            "text": "Answer the point as string of rounded integers. Ignore z value if it is 0.", 
            "title": "function point2S"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-list2string", 
            "text": "", 
            "title": "function list2String"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-fontname2stylename", 
            "text": "", 
            "title": "function fontName2StyleName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asset", 
            "text": "", 
            "title": "function asSet"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-lighter", 
            "text": "", 
            "title": "function lighter"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-family2ufoqueryname", 
            "text": "", 
            "title": "function family2UfoQueryName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2formatpath", 
            "text": "Answers the path where the extension is changed to format If format is\nNone, then the extension is removed.", 
            "title": "function path2FormatPath"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-string2wordskey", 
            "text": "", 
            "title": "function string2WordsKey"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-words2wordskey", 
            "text": "", 
            "title": "function words2WordsKey"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-writeunicode", 
            "text": "Takes a unicode string and returns a decimal integer.", 
            "title": "function writeUnicode"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-shrink", 
            "text": "", 
            "title": "function shrink"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-astuple", 
            "text": "", 
            "title": "function asTuple"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-commastring2list", 
            "text": "", 
            "title": "function commaString2List"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-value2idcommastring", 
            "text": "Transform a list with numbers into a comma separated string. This can be used to convert a list of record ids\ninto a SQL compatible list of ids, without integers showing up as @1234L@.", 
            "title": "function value2IdCommaString"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asfloatornone", 
            "text": "", 
            "title": "function asFloatOrNone"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-morered", 
            "text": "", 
            "title": "function moreRed"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2path", 
            "text": "", 
            "title": "function font2Path"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-float2fixed", 
            "text": "The @float2Fixed@ method translates a float into a 1/64 pixel unit-value.", 
            "title": "function float2Fixed"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-index2pointid", 
            "text": "", 
            "title": "function index2PointId"
        }, 
        {
            "location": "/pagebot/elements/views/view/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2glyphidname", 
            "text": "Take that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.  /xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed", 
            "title": "function path2GlyphIdName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#xxxyyyzzzagency_fb-bold0001646411ufo-becomes-agency_fb-bold", 
            "text": "path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'  path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'  path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'", 
            "title": "xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-readunicodes", 
            "text": "takes a list of robofab friendly integers and returns a string of unicodes.", 
            "title": "function readUnicodes"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-fixed2float", 
            "text": "The @fixed2Float@ method translates a fixed 1/64 pixel-unit value to float.", 
            "title": "function fixed2Float"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asintordefault", 
            "text": "", 
            "title": "function asIntOrDefault"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2fontname", 
            "text": "Take that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.  /xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed", 
            "title": "function path2FontName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#xxxyyyzzzagency_fb-bold0001646411ufo-becomes-agency_fb-bold_1", 
            "text": "path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'  path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'  path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'", 
            "title": "xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-hex2char", 
            "text": "", 
            "title": "function hex2char"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-commastring2integerlist", 
            "text": "", 
            "title": "function commaString2IntegerList"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-obj2styleid", 
            "text": "Make sure s is styleId format, other recursively transform into string with space separators.\nParts can be CSS-like #id and .class identifiers.\nNote that this may change in the future if more compatibility with CSS is necessary.", 
            "title": "function obj2StyleId"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-writeunicodes", 
            "text": "Takes a list of unicode strings and returns a list of robofab-friendly integers.", 
            "title": "function writeUnicodes"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-interpolate", 
            "text": "Answer the interpolated value of factor v between a and b. If doRound is True (default is False), then\nround the result before answering it.", 
            "title": "function interpolate"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-bool2int", 
            "text": "", 
            "title": "function bool2Int"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2parentpath", 
            "text": "path2ParentPath('/xxx/yyy/zzz/')\n'/xxx/yyy/zzz'  path2ParentPath('/xxx/yyy/zzz')\n'/xxx/yyy'  path2ParentPath('/xxx/yyy/zzz.gif')\n'/xxx/yyy'", 
            "title": "function path2ParentPath"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asintorvalue", 
            "text": "", 
            "title": "function asIntOrValue"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-isuniquelist", 
            "text": "", 
            "title": "function isUniqueList"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-obj2styleids", 
            "text": "", 
            "title": "function obj2StyleIds"
        }, 
        {
            "location": "/pagebot/elements/views/view/#whitespace", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "WHITESPACE"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asnumber", 
            "text": "", 
            "title": "function asNumber"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-list2spacedstring", 
            "text": "", 
            "title": "function list2SpacedString"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-setstrokecolor", 
            "text": "Set global stroke color or the color of the formatted string.", 
            "title": "function setStrokeColor"
        }, 
        {
            "location": "/pagebot/elements/views/view/#plainwords", 
            "text": "Compiled regular expression objects", 
            "title": "PLAINWORDS"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-arabic2romannumerals", 
            "text": "Return the roman numeral representing n. Should work for n in (1, 4999). Borrowed from Nick Montfort.", 
            "title": "function arabic2RomanNumerals"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2familyname", 
            "text": "", 
            "title": "function font2FamilyName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2ufoqueryname", 
            "text": "", 
            "title": "function font2UfoQueryName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asformatted", 
            "text": "", 
            "title": "function asFormatted"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-strippedstring", 
            "text": "", 
            "title": "function strippedString"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-value2fixed", 
            "text": "", 
            "title": "function value2Fixed"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-field2floq", 
            "text": "", 
            "title": "function field2Floq"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-floq2field", 
            "text": "", 
            "title": "function floq2Field"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-idcommastring2idset", 
            "text": "Transform a string with comma separated items into a set of id integers.", 
            "title": "function idCommaString2IdSet"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-lessgreen", 
            "text": "", 
            "title": "function lessGreen"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-json2dict", 
            "text": "", 
            "title": "function json2Dict"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asid", 
            "text": "The  asId  method transforms the  value  attribute either to an instance of @\nlong@ or to @None@, so it can be used as  id  field in a @Record@\ninstance. If the value cannot be converted, then the optional  default  (default value is @0\n@) is answered.", 
            "title": "function asId"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2id", 
            "text": "Answer the unique record/adapter ID of the font/style. This can be the unique database record id\nor the unique file path. For now we just answer the file path.", 
            "title": "function font2ID"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-list2json", 
            "text": "", 
            "title": "function list2Json"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-darker", 
            "text": "", 
            "title": "function darker"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-hex2dec", 
            "text": "", 
            "title": "function hex2dec"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2filename", 
            "text": "Answer the font file name. In case of a new unsaved font,\nanswer  \"Untitled\" .", 
            "title": "function font2FileName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-filtervalue2int", 
            "text": "Filter all numeric characters from the string and answer the resulting integer.\nAnswer 0 if no digits are found. If s is already a number, then answer it as rounded int.", 
            "title": "function filterValue2Int"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-seconds2date", 
            "text": "Answer TTF seconds converted to a datetime instance.", 
            "title": "function seconds2Date"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asint", 
            "text": "", 
            "title": "function asInt"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asintornone", 
            "text": "", 
            "title": "function asIntOrNone"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-path2fontid", 
            "text": "Answers the font ID for the font associated with this path. If the path does not exist, or if the font name\nis invalid, then answer None.", 
            "title": "function path2FontId"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-list2commastring", 
            "text": "", 
            "title": "function list2CommaString"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asroundedorzerostring", 
            "text": "", 
            "title": "function asRoundedOrZeroString"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-stringlist2strippedlist", 
            "text": "", 
            "title": "function stringList2StrippedList"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2name", 
            "text": "", 
            "title": "function font2Name"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-uniqueid", 
            "text": "", 
            "title": "function uniqueID"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-bash", 
            "text": "Runs a command in the bash shell.", 
            "title": "function bash"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-isint", 
            "text": "", 
            "title": "function isInt"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-isuniquedict", 
            "text": "", 
            "title": "function isUniqueDict"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2familyid", 
            "text": "Answer the unique record/adapter ID of the family of  font . This can be the unique database\nrecord id of the font parent or the unique directory path of the font. For now we just answer the\nthe location of the family plist file.\nSpecial situation is if the font is not saved yet. In that case it does not have a path.", 
            "title": "function font2FamilyID"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-dict2json", 
            "text": "", 
            "title": "function dict2Json"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-dec2hex", 
            "text": "", 
            "title": "function dec2hex"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-formatbinaryforttx", 
            "text": "", 
            "title": "function formatBinaryForTTX"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-lessred", 
            "text": "", 
            "title": "function lessRed"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-date2seconds", 
            "text": "Answer the datetime converted to TTF seconds.", 
            "title": "function date2Seconds"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asroundedint", 
            "text": "", 
            "title": "function asRoundedInt"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asdict", 
            "text": "Answer the value as dict as root. If the value itself is not a dict,\nanswer it as dict(value=value). For lower levels than root, answer\nthe plain value if is it a string or a number. Basic classed don't get\ntranslated when not called as root.\nAll other objects are called by value.asDict()\nIf the object cannot handle that method, then convert it to string.", 
            "title": "function asDict"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-makestyle", 
            "text": "Make style from a copy of style dict (providing all necessary default values for the\nelement to operate) and then overwrite these values with any specific arguments.\nIf style is None, then create a new style dict. In that case all the element style values need\nto be defined by argument. The calling element must test if its minimum set\n(such as self.w and self.h) are properly defined.", 
            "title": "function makeStyle"
        }, 
        {
            "location": "/pagebot/elements/views/view/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-json2list", 
            "text": "", 
            "title": "function json2List"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-readunicode", 
            "text": "Takes a decimal integer and returns a unicode string.", 
            "title": "function readUnicode"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-lessblue", 
            "text": "", 
            "title": "function lessBlue"
        }, 
        {
            "location": "/pagebot/elements/views/view/#view", 
            "text": "A View is just another kind of container, kept by document to make a certain presentation of the page tree.", 
            "title": "View"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-font2stylename", 
            "text": "", 
            "title": "function font2StyleName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#right", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "RIGHT"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-asbool", 
            "text": "", 
            "title": "function asBool"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-fontname2familyname", 
            "text": "For now take the chunk up till \"-\" in the filename and ignore the family name as set in the font.info\nAlso make sure that the extension is removed, if the font has no \"-\" it isn't name. Relay-Medium_Italic.ufo\nbecomes Relay. ThisFont.ufo becomes ThisFont.", 
            "title": "function fontName2FamilyName"
        }, 
        {
            "location": "/pagebot/elements/views/view/#roman_numeral_values", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "ROMAN_NUMERAL_VALUES"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-int2bool", 
            "text": "", 
            "title": "function int2Bool"
        }, 
        {
            "location": "/pagebot/elements/views/view/#function-module2path", 
            "text": "", 
            "title": "function module2Path"
        }, 
        {
            "location": "/pagebot/builders/", 
            "text": "builders\n\n\nClasses\n\n\n\n\npagebot.builders.basebuilder\n\n\npagebot.builders.mdblogbuilder\n\n\n\n\nModules\n\n\n\n\npagebot.builders.kirby\n\n\npagebot.builders.htmlcss\n\n\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/builders/#builders", 
            "text": "", 
            "title": "builders"
        }, 
        {
            "location": "/pagebot/builders/#classes", 
            "text": "pagebot.builders.basebuilder  pagebot.builders.mdblogbuilder", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/builders/#modules", 
            "text": "pagebot.builders.kirby  pagebot.builders.htmlcss", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/builders/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/basebuilder/", 
            "text": "builders.basebuilder\n\n\nFunctions\n\n\nBaseBuilder", 
            "title": "Basebuilder"
        }, 
        {
            "location": "/pagebot/builders/basebuilder/#buildersbasebuilder", 
            "text": "", 
            "title": "builders.basebuilder"
        }, 
        {
            "location": "/pagebot/builders/basebuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/basebuilder/#basebuilder", 
            "text": "", 
            "title": "BaseBuilder"
        }, 
        {
            "location": "/pagebot/builders/mdblogbuilder/", 
            "text": "builders.mdblogbuilder\n\n\nFunctions\n\n\nBaseBuilder\n\n\nMDBlogBuilder", 
            "title": "Mdblogbuilder"
        }, 
        {
            "location": "/pagebot/builders/mdblogbuilder/#buildersmdblogbuilder", 
            "text": "", 
            "title": "builders.mdblogbuilder"
        }, 
        {
            "location": "/pagebot/builders/mdblogbuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/mdblogbuilder/#basebuilder", 
            "text": "", 
            "title": "BaseBuilder"
        }, 
        {
            "location": "/pagebot/builders/mdblogbuilder/#mdblogbuilder", 
            "text": "", 
            "title": "MDBlogBuilder"
        }, 
        {
            "location": "/pagebot/builders/kirby/", 
            "text": "builders.kirby\n\n\nClasses\n\n\n\n\npagebot.builders.kirby.kirbybuilder\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/builders/kirby/#builderskirby", 
            "text": "", 
            "title": "builders.kirby"
        }, 
        {
            "location": "/pagebot/builders/kirby/#classes", 
            "text": "pagebot.builders.kirby.kirbybuilder", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/builders/kirby/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/builders/kirby/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/kirby/kirbybuilder/", 
            "text": "builders.kirby.kirbybuilder\n\n\nFunctions\n\n\nKirbyBuilder\n\n\nBaseHtmlCssBuilder", 
            "title": "Kirbybuilder"
        }, 
        {
            "location": "/pagebot/builders/kirby/kirbybuilder/#builderskirbykirbybuilder", 
            "text": "", 
            "title": "builders.kirby.kirbybuilder"
        }, 
        {
            "location": "/pagebot/builders/kirby/kirbybuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/kirby/kirbybuilder/#kirbybuilder", 
            "text": "", 
            "title": "KirbyBuilder"
        }, 
        {
            "location": "/pagebot/builders/kirby/kirbybuilder/#basehtmlcssbuilder", 
            "text": "", 
            "title": "BaseHtmlCssBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/", 
            "text": "builders.htmlcss\n\n\nClasses\n\n\n\n\npagebot.builders.htmlcss.basehtmlcssbuilder\n\n\npagebot.builders.htmlcss.gridbuilder\n\n\npagebot.builders.htmlcss.simplebuilder\n\n\npagebot.builders.htmlcss.simplehtmlcssbuilder\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/#buildershtmlcss", 
            "text": "", 
            "title": "builders.htmlcss"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/#classes", 
            "text": "pagebot.builders.htmlcss.basehtmlcssbuilder  pagebot.builders.htmlcss.gridbuilder  pagebot.builders.htmlcss.simplebuilder  pagebot.builders.htmlcss.simplehtmlcssbuilder", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/basehtmlcssbuilder/", 
            "text": "builders.htmlcss.basehtmlcssbuilder\n\n\nFunctions\n\n\nBaseHtmlCssBuilder", 
            "title": "Basehtmlcssbuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/basehtmlcssbuilder/#buildershtmlcssbasehtmlcssbuilder", 
            "text": "", 
            "title": "builders.htmlcss.basehtmlcssbuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/basehtmlcssbuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/basehtmlcssbuilder/#basehtmlcssbuilder", 
            "text": "", 
            "title": "BaseHtmlCssBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/gridbuilder/", 
            "text": "builders.htmlcss.gridbuilder\n\n\nFunctions\n\n\nBaseBuilder\n\n\nGridBuilder", 
            "title": "Gridbuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/gridbuilder/#buildershtmlcssgridbuilder", 
            "text": "", 
            "title": "builders.htmlcss.gridbuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/gridbuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/gridbuilder/#basebuilder", 
            "text": "", 
            "title": "BaseBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/gridbuilder/#gridbuilder", 
            "text": "", 
            "title": "GridBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplebuilder/", 
            "text": "builders.htmlcss.simplebuilder\n\n\nFunctions\n\n\nBaseBuilder\n\n\nSimpleBuilder", 
            "title": "Simplebuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplebuilder/#buildershtmlcsssimplebuilder", 
            "text": "", 
            "title": "builders.htmlcss.simplebuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplebuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplebuilder/#basebuilder", 
            "text": "", 
            "title": "BaseBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplebuilder/#simplebuilder", 
            "text": "", 
            "title": "SimpleBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplehtmlcssbuilder/", 
            "text": "builders.htmlcss.simplehtmlcssbuilder\n\n\nFunctions\n\n\nSimpleHtmlCssBuilder\n\n\nBaseHtmlCssBuilder", 
            "title": "Simplehtmlcssbuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplehtmlcssbuilder/#buildershtmlcsssimplehtmlcssbuilder", 
            "text": "", 
            "title": "builders.htmlcss.simplehtmlcssbuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplehtmlcssbuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplehtmlcssbuilder/#simplehtmlcssbuilder", 
            "text": "", 
            "title": "SimpleHtmlCssBuilder"
        }, 
        {
            "location": "/pagebot/builders/htmlcss/simplehtmlcssbuilder/#basehtmlcssbuilder", 
            "text": "", 
            "title": "BaseHtmlCssBuilder"
        }, 
        {
            "location": "/pagebot/contributions/", 
            "text": "contributions\n\n\nClasses\n\n\nModules\n\n\n\n\npagebot.contributions.adobe\n\n\npagebot.contributions.filibuster\n\n\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/contributions/#contributions", 
            "text": "", 
            "title": "contributions"
        }, 
        {
            "location": "/pagebot/contributions/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/contributions/#modules", 
            "text": "pagebot.contributions.adobe  pagebot.contributions.filibuster", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/contributions/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/adobe/", 
            "text": "contributions.adobe\n\n\nClasses\n\n\nModules\n\n\n\n\npagebot.contributions.adobe.kerndump\n\n\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/contributions/adobe/#contributionsadobe", 
            "text": "", 
            "title": "contributions.adobe"
        }, 
        {
            "location": "/pagebot/contributions/adobe/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/contributions/adobe/#modules", 
            "text": "pagebot.contributions.adobe.kerndump", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/contributions/adobe/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/", 
            "text": "contributions.adobe.kerndump\n\n\nClasses\n\n\n\n\npagebot.contributions.adobe.kerndump.dumpKerningFeatureFromOTF\n\n\npagebot.contributions.adobe.kerndump.getKerningPairsFromOTF\n\n\n\n\nModules\n\n\nFunctions\n\n\ngetKerningPairsFromOTF\n\n\nPrints all possible kerning pairs within font.\nSupports RTL kerning.\n\n\nUsage:\n\n\npython getKerningPairsFromFeatureFile.py", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/#contributionsadobekerndump", 
            "text": "", 
            "title": "contributions.adobe.kerndump"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/#classes", 
            "text": "pagebot.contributions.adobe.kerndump.dumpKerningFeatureFromOTF  pagebot.contributions.adobe.kerndump.getKerningPairsFromOTF", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/#getkerningpairsfromotf", 
            "text": "Prints all possible kerning pairs within font.\nSupports RTL kerning.", 
            "title": "getKerningPairsFromOTF"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/#usage", 
            "text": "python getKerningPairsFromFeatureFile.py", 
            "title": "Usage:"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/", 
            "text": "contributions.adobe.kerndump.dumpKerningFeatureFromOTF\n\n\nFunctions\n\n\nfunction makeKernFeature\n\n\nfunction buildOutputList\n\n\ncompressSinglePairs\n\n\nbool(x) -\n bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\ngetKerningPairsFromOTF\n\n\nPrints all possible kerning pairs within font.\nSupports RTL kerning.\n\n\nUsage:\n\n\npython getKerningPairsFromFeatureFile.py \n\n\nfunction nameClass\n\n\nkKernFeatureTag\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nttLib\n\n\nfontTools.ttLib -- a package for dealing with TrueType fonts.\n\n\nThis package offers translators to convert TrueType fonts to Python\nobjects and vice versa, and additionally from Python to TTX (an XML-based\ntext format) and vice versa.\n\n\nExample interactive session:\n\n\nPython 1.5.2c1 (#43, Mar  9 1999, 13:06:43)  [CW PPC w/GUSI w/MSL]\nCopyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam\n\n\n\n\n\n\nfrom fontTools import ttLib\ntt = ttLib.TTFont(\"afont.ttf\")\ntt['maxp'].numGlyphs\n242\ntt['OS/2'].achVendID\n'B\nH\u0000'\ntt['head'].unitsPerEm\n2048\ntt.saveXML(\"afont.ttx\")\nDumping 'LTSH' table...\nDumping 'OS/2' table...\nDumping 'VDMX' table...\nDumping 'cmap' table...\nDumping 'cvt ' table...\nDumping 'fpgm' table...\nDumping 'glyf' table...\nDumping 'hdmx' table...\nDumping 'head' table...\nDumping 'hhea' table...\nDumping 'hmtx' table...\nDumping 'loca' table...\nDumping 'maxp' table...\nDumping 'name' table...\nDumping 'post' table...\nDumping 'prep' table...\ntt2 = ttLib.TTFont()\ntt2.importXML(\"afont.ttx\")\ntt2['maxp'].numGlyphs\n242\n\n\n\n\n\n\n\nfunction sortGlyphs", 
            "title": "dumpKerningFeatureFromOTF"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#contributionsadobekerndumpdumpkerningfeaturefromotf", 
            "text": "", 
            "title": "contributions.adobe.kerndump.dumpKerningFeatureFromOTF"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#function-makekernfeature", 
            "text": "", 
            "title": "function makeKernFeature"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#function-buildoutputlist", 
            "text": "", 
            "title": "function buildOutputList"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#compresssinglepairs", 
            "text": "bool(x) -  bool  Returns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", 
            "title": "compressSinglePairs"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#getkerningpairsfromotf", 
            "text": "Prints all possible kerning pairs within font.\nSupports RTL kerning.", 
            "title": "getKerningPairsFromOTF"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#usage", 
            "text": "python getKerningPairsFromFeatureFile.py", 
            "title": "Usage:"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#function-nameclass", 
            "text": "", 
            "title": "function nameClass"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#kkernfeaturetag", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "kKernFeatureTag"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#ttlib", 
            "text": "fontTools.ttLib -- a package for dealing with TrueType fonts.  This package offers translators to convert TrueType fonts to Python\nobjects and vice versa, and additionally from Python to TTX (an XML-based\ntext format) and vice versa.  Example interactive session:  Python 1.5.2c1 (#43, Mar  9 1999, 13:06:43)  [CW PPC w/GUSI w/MSL]\nCopyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam    from fontTools import ttLib\ntt = ttLib.TTFont(\"afont.ttf\")\ntt['maxp'].numGlyphs\n242\ntt['OS/2'].achVendID\n'B H\u0000'\ntt['head'].unitsPerEm\n2048\ntt.saveXML(\"afont.ttx\")\nDumping 'LTSH' table...\nDumping 'OS/2' table...\nDumping 'VDMX' table...\nDumping 'cmap' table...\nDumping 'cvt ' table...\nDumping 'fpgm' table...\nDumping 'glyf' table...\nDumping 'hdmx' table...\nDumping 'head' table...\nDumping 'hhea' table...\nDumping 'hmtx' table...\nDumping 'loca' table...\nDumping 'maxp' table...\nDumping 'name' table...\nDumping 'post' table...\nDumping 'prep' table...\ntt2 = ttLib.TTFont()\ntt2.importXML(\"afont.ttx\")\ntt2['maxp'].numGlyphs\n242", 
            "title": "ttLib"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/dumpKerningFeatureFromOTF/#function-sortglyphs", 
            "text": "", 
            "title": "function sortGlyphs"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/", 
            "text": "contributions.adobe.kerndump.getKerningPairsFromOTF\n\n\nFunctions\n\n\nkGPOStableName\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction collectUniqueKernLookupListIndexes\n\n\nfinalList\n\n\nlist() -\n new empty list\nlist(iterable) -\n new list initialized from iterable's items\n\n\nclass myRightClass\n\n\nclass myLeftClass\n\n\nOTFKernReader\n\n\nkKernFeatureTag\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nttLib\n\n\nfontTools.ttLib -- a package for dealing with TrueType fonts.\n\n\nThis package offers translators to convert TrueType fonts to Python\nobjects and vice versa, and additionally from Python to TTX (an XML-based\ntext format) and vice versa.\n\n\nExample interactive session:\n\n\nPython 1.5.2c1 (#43, Mar  9 1999, 13:06:43)  [CW PPC w/GUSI w/MSL]\nCopyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam\n\n\n\n\n\n\nfrom fontTools import ttLib\ntt = ttLib.TTFont(\"afont.ttf\")\ntt['maxp'].numGlyphs\n242\ntt['OS/2'].achVendID\n'B\nH\u0000'\ntt['head'].unitsPerEm\n2048\ntt.saveXML(\"afont.ttx\")\nDumping 'LTSH' table...\nDumping 'OS/2' table...\nDumping 'VDMX' table...\nDumping 'cmap' table...\nDumping 'cvt ' table...\nDumping 'fpgm' table...\nDumping 'glyf' table...\nDumping 'hdmx' table...\nDumping 'head' table...\nDumping 'hhea' table...\nDumping 'hmtx' table...\nDumping 'loca' table...\nDumping 'maxp' table...\nDumping 'name' table...\nDumping 'post' table...\nDumping 'prep' table...\ntt2 = ttLib.TTFont()\ntt2.importXML(\"afont.ttx\")\ntt2['maxp'].numGlyphs\n242", 
            "title": "getKerningPairsFromOTF"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#contributionsadobekerndumpgetkerningpairsfromotf", 
            "text": "", 
            "title": "contributions.adobe.kerndump.getKerningPairsFromOTF"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#kgpostablename", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "kGPOStableName"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#function-collectuniquekernlookuplistindexes", 
            "text": "", 
            "title": "function collectUniqueKernLookupListIndexes"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#finallist", 
            "text": "list() -  new empty list\nlist(iterable) -  new list initialized from iterable's items", 
            "title": "finalList"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#class-myrightclass", 
            "text": "", 
            "title": "class myRightClass"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#class-myleftclass", 
            "text": "", 
            "title": "class myLeftClass"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#otfkernreader", 
            "text": "", 
            "title": "OTFKernReader"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#kkernfeaturetag", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "kKernFeatureTag"
        }, 
        {
            "location": "/pagebot/contributions/adobe/kerndump/getKerningPairsFromOTF/#ttlib", 
            "text": "fontTools.ttLib -- a package for dealing with TrueType fonts.  This package offers translators to convert TrueType fonts to Python\nobjects and vice versa, and additionally from Python to TTX (an XML-based\ntext format) and vice versa.  Example interactive session:  Python 1.5.2c1 (#43, Mar  9 1999, 13:06:43)  [CW PPC w/GUSI w/MSL]\nCopyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam    from fontTools import ttLib\ntt = ttLib.TTFont(\"afont.ttf\")\ntt['maxp'].numGlyphs\n242\ntt['OS/2'].achVendID\n'B H\u0000'\ntt['head'].unitsPerEm\n2048\ntt.saveXML(\"afont.ttx\")\nDumping 'LTSH' table...\nDumping 'OS/2' table...\nDumping 'VDMX' table...\nDumping 'cmap' table...\nDumping 'cvt ' table...\nDumping 'fpgm' table...\nDumping 'glyf' table...\nDumping 'hdmx' table...\nDumping 'head' table...\nDumping 'hhea' table...\nDumping 'hmtx' table...\nDumping 'loca' table...\nDumping 'maxp' table...\nDumping 'name' table...\nDumping 'post' table...\nDumping 'prep' table...\ntt2 = ttLib.TTFont()\ntt2.importXML(\"afont.ttx\")\ntt2['maxp'].numGlyphs\n242", 
            "title": "ttLib"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/", 
            "text": "contributions.filibuster\n\n\nClasses\n\n\n\n\npagebot.contributions.filibuster.blurb\n\n\npagebot.contributions.filibuster.blurbwriter\n\n\npagebot.contributions.filibuster.test\n\n\npagebot.contributions.filibuster.titlecase\n\n\n\n\nModules\n\n\n\n\npagebot.contributions.filibuster.content\n\n\n\n\nFunctions\n\n\nblurbwriter\n\n\ntitlecase\n\n\ntitlecase.py v0.2\nOriginal Perl version by: John Gruber http://daringfireball.net/ 10 May 2008\nPython version by Stuart Colville http://muffinresearch.co.uk\nLicense: http://www.opensource.org/licenses/mit-license.php", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/#contributionsfilibuster", 
            "text": "", 
            "title": "contributions.filibuster"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/#classes", 
            "text": "pagebot.contributions.filibuster.blurb  pagebot.contributions.filibuster.blurbwriter  pagebot.contributions.filibuster.test  pagebot.contributions.filibuster.titlecase", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/#modules", 
            "text": "pagebot.contributions.filibuster.content", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/#blurbwriter", 
            "text": "", 
            "title": "blurbwriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/#titlecase", 
            "text": "titlecase.py v0.2\nOriginal Perl version by: John Gruber http://daringfireball.net/ 10 May 2008\nPython version by Stuart Colville http://muffinresearch.co.uk\nLicense: http://www.opensource.org/licenses/mit-license.php", 
            "title": "titlecase"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurb/", 
            "text": "contributions.filibuster.blurb\n\n\nFunctions\n\n\nblurbwriter\n\n\nblurb\n\n\nThe \nContent\n is a wrapper around the filibuster \nBlurbWriter\n\nof Erik van Blokland and Jonathan Hoefler. There is supposed to be only one instance of\nthe writer installed in the system.\n\n\nBlurb\n\n\nThe \nContent\n is a wrapper around the filibuster \nBlurbWriter\n\nof Erik van Blokland and Jonathan Hoefler. There is supposed to be only one instance of\nthe writer installed in the system.", 
            "title": "Blurb"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurb/#contributionsfilibusterblurb", 
            "text": "", 
            "title": "contributions.filibuster.blurb"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurb/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurb/#blurbwriter", 
            "text": "", 
            "title": "blurbwriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurb/#blurb", 
            "text": "The  Content  is a wrapper around the filibuster  BlurbWriter \nof Erik van Blokland and Jonathan Hoefler. There is supposed to be only one instance of\nthe writer installed in the system.", 
            "title": "blurb"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurb/#blurb_1", 
            "text": "The  Content  is a wrapper around the filibuster  BlurbWriter \nof Erik van Blokland and Jonathan Hoefler. There is supposed to be only one instance of\nthe writer installed in the system.", 
            "title": "Blurb"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/", 
            "text": "contributions.filibuster.blurbwriter\n\n\nFunctions\n\n\nBlurbWriter\n\n\nA very unspecific recursive compiler and randomizer for text.\n\n\nfunction titlecase\n\n\nTitlecases input text\n\n\nThis filter changes all words to Title Caps, and attempts to be clever\nabout \nun\ncapitalizing SMALL words like a/an/the in the input.\n\n\nThe list of \"SMALL words\" which are not capped comes from\nthe New York Times Manual of Style, plus 'vs' and 'v'.\n\n\nFILTERWHITESPACE\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nclosetag\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nvowels\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nDEBUG\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nprint_function\n\n\nopentag\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "Blurbwriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#contributionsfilibusterblurbwriter", 
            "text": "", 
            "title": "contributions.filibuster.blurbwriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#blurbwriter", 
            "text": "A very unspecific recursive compiler and randomizer for text.", 
            "title": "BlurbWriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#function-titlecase", 
            "text": "Titlecases input text  This filter changes all words to Title Caps, and attempts to be clever\nabout  un capitalizing SMALL words like a/an/the in the input.  The list of \"SMALL words\" which are not capped comes from\nthe New York Times Manual of Style, plus 'vs' and 'v'.", 
            "title": "function titlecase"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#filterwhitespace", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "FILTERWHITESPACE"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#closetag", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "closetag"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#vowels", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "vowels"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#debug", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEBUG"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#print_function", 
            "text": "", 
            "title": "print_function"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/blurbwriter/#opentag", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "opentag"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/", 
            "text": "contributions.filibuster.blurbwriter\n\n\nFunctions\n\n\nBlurbWriter\n\n\nA very unspecific recursive compiler and randomizer for text.\n\n\nfunction titlecase\n\n\nTitlecases input text\n\n\nThis filter changes all words to Title Caps, and attempts to be clever\nabout \nun\ncapitalizing SMALL words like a/an/the in the input.\n\n\nThe list of \"SMALL words\" which are not capped comes from\nthe New York Times Manual of Style, plus 'vs' and 'v'.\n\n\nFILTERWHITESPACE\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nclosetag\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nvowels\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nDEBUG\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nprint_function\n\n\nopentag\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "Test"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#contributionsfilibusterblurbwriter", 
            "text": "", 
            "title": "contributions.filibuster.blurbwriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#blurbwriter", 
            "text": "A very unspecific recursive compiler and randomizer for text.", 
            "title": "BlurbWriter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#function-titlecase", 
            "text": "Titlecases input text  This filter changes all words to Title Caps, and attempts to be clever\nabout  un capitalizing SMALL words like a/an/the in the input.  The list of \"SMALL words\" which are not capped comes from\nthe New York Times Manual of Style, plus 'vs' and 'v'.", 
            "title": "function titlecase"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#filterwhitespace", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "FILTERWHITESPACE"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#closetag", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "closetag"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#vowels", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "vowels"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#debug", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEBUG"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#print_function", 
            "text": "", 
            "title": "print_function"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/test/#opentag", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "opentag"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/", 
            "text": "contributions.filibuster.titlecase\n\n\nFunctions\n\n\nSMALL_WORDS\n\n\nCompiled regular expression objects\n\n\nTitlecaseTests\n\n\nTests to ensure titlecase follows all of the rules\n\n\nPUNCT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nINLINE_PERIOD\n\n\nCompiled regular expression objects\n\n\nSMALL_FIRST\n\n\nCompiled regular expression objects\n\n\nSMALL_LAST\n\n\nCompiled regular expression objects\n\n\nCAPFIRST\n\n\nCompiled regular expression objects\n\n\nSUBPHRASE\n\n\nCompiled regular expression objects\n\n\nfunction titlecase\n\n\nTitlecases input text\n\n\nThis filter changes all words to Title Caps, and attempts to be clever\nabout \nun\ncapitalizing SMALL words like a/an/the in the input.\n\n\nThe list of \"SMALL words\" which are not capped comes from\nthe New York Times Manual of Style, plus 'vs' and 'v'.\n\n\nUC_ELSEWHERE\n\n\nCompiled regular expression objects\n\n\nSMALL\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "Titlecase"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#contributionsfilibustertitlecase", 
            "text": "", 
            "title": "contributions.filibuster.titlecase"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#small_words", 
            "text": "Compiled regular expression objects", 
            "title": "SMALL_WORDS"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#titlecasetests", 
            "text": "Tests to ensure titlecase follows all of the rules", 
            "title": "TitlecaseTests"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#punct", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "PUNCT"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#inline_period", 
            "text": "Compiled regular expression objects", 
            "title": "INLINE_PERIOD"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#small_first", 
            "text": "Compiled regular expression objects", 
            "title": "SMALL_FIRST"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#small_last", 
            "text": "Compiled regular expression objects", 
            "title": "SMALL_LAST"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#capfirst", 
            "text": "Compiled regular expression objects", 
            "title": "CAPFIRST"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#subphrase", 
            "text": "Compiled regular expression objects", 
            "title": "SUBPHRASE"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#function-titlecase", 
            "text": "Titlecases input text  This filter changes all words to Title Caps, and attempts to be clever\nabout  un capitalizing SMALL words like a/an/the in the input.  The list of \"SMALL words\" which are not capped comes from\nthe New York Times Manual of Style, plus 'vs' and 'v'.", 
            "title": "function titlecase"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#uc_elsewhere", 
            "text": "Compiled regular expression objects", 
            "title": "UC_ELSEWHERE"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/titlecase/#small", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "SMALL"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/", 
            "text": "contributions.filibuster.content\n\n\nClasses\n\n\n\n\npagebot.contributions.filibuster.content.aerospace\n\n\npagebot.contributions.filibuster.content.articles\n\n\npagebot.contributions.filibuster.content.auction\n\n\npagebot.contributions.filibuster.content.automotive\n\n\npagebot.contributions.filibuster.content.book_reference\n\n\npagebot.contributions.filibuster.content.boymechanic\n\n\npagebot.contributions.filibuster.content.classified\n\n\npagebot.contributions.filibuster.content.commercial\n\n\npagebot.contributions.filibuster.content.corporate\n\n\npagebot.contributions.filibuster.content.creditcard\n\n\npagebot.contributions.filibuster.content.design\n\n\npagebot.contributions.filibuster.content.designarticle\n\n\npagebot.contributions.filibuster.content.entertainment\n\n\npagebot.contributions.filibuster.content.event\n\n\npagebot.contributions.filibuster.content.filenames\n\n\npagebot.contributions.filibuster.content.filibuster\n\n\npagebot.contributions.filibuster.content.financial\n\n\npagebot.contributions.filibuster.content.general\n\n\npagebot.contributions.filibuster.content.geography\n\n\npagebot.contributions.filibuster.content.horoscope\n\n\npagebot.contributions.filibuster.content.internet\n\n\npagebot.contributions.filibuster.content.jargon\n\n\npagebot.contributions.filibuster.content.journalism\n\n\npagebot.contributions.filibuster.content.legal\n\n\npagebot.contributions.filibuster.content.letterror\n\n\npagebot.contributions.filibuster.content.literature\n\n\npagebot.contributions.filibuster.content.living\n\n\npagebot.contributions.filibuster.content.medical\n\n\npagebot.contributions.filibuster.content.modernmedia\n\n\npagebot.contributions.filibuster.content.music\n\n\npagebot.contributions.filibuster.content.names\n\n\npagebot.contributions.filibuster.content.navigation\n\n\npagebot.contributions.filibuster.content.news\n\n\npagebot.contributions.filibuster.content.politics\n\n\npagebot.contributions.filibuster.content.portal\n\n\npagebot.contributions.filibuster.content.quotations\n\n\npagebot.contributions.filibuster.content.realestate\n\n\npagebot.contributions.filibuster.content.reviews\n\n\npagebot.contributions.filibuster.content.sciences\n\n\npagebot.contributions.filibuster.content.sports\n\n\npagebot.contributions.filibuster.content.staff\n\n\npagebot.contributions.filibuster.content.superheroes\n\n\npagebot.contributions.filibuster.content.twitter\n\n\n\n\nModules\n\n\nFunctions\n\n\nfunction content\n\n\nReturn one dictionary that contains all dictionaries of the\nmodule. By making a function rather than part of the namespace,\nthe content can be updated dynamically. Should not make any\ndifference in speed for normal use.\n\n\nfunction index\n\n\nReturn the name of the submodule that tagname is defined in,\nas well as a list of modules and keys in which this tagname is used.\n\n\nfunction clearCache\n\n\nDEBUG\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#contributionsfilibustercontent", 
            "text": "", 
            "title": "contributions.filibuster.content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#classes", 
            "text": "pagebot.contributions.filibuster.content.aerospace  pagebot.contributions.filibuster.content.articles  pagebot.contributions.filibuster.content.auction  pagebot.contributions.filibuster.content.automotive  pagebot.contributions.filibuster.content.book_reference  pagebot.contributions.filibuster.content.boymechanic  pagebot.contributions.filibuster.content.classified  pagebot.contributions.filibuster.content.commercial  pagebot.contributions.filibuster.content.corporate  pagebot.contributions.filibuster.content.creditcard  pagebot.contributions.filibuster.content.design  pagebot.contributions.filibuster.content.designarticle  pagebot.contributions.filibuster.content.entertainment  pagebot.contributions.filibuster.content.event  pagebot.contributions.filibuster.content.filenames  pagebot.contributions.filibuster.content.filibuster  pagebot.contributions.filibuster.content.financial  pagebot.contributions.filibuster.content.general  pagebot.contributions.filibuster.content.geography  pagebot.contributions.filibuster.content.horoscope  pagebot.contributions.filibuster.content.internet  pagebot.contributions.filibuster.content.jargon  pagebot.contributions.filibuster.content.journalism  pagebot.contributions.filibuster.content.legal  pagebot.contributions.filibuster.content.letterror  pagebot.contributions.filibuster.content.literature  pagebot.contributions.filibuster.content.living  pagebot.contributions.filibuster.content.medical  pagebot.contributions.filibuster.content.modernmedia  pagebot.contributions.filibuster.content.music  pagebot.contributions.filibuster.content.names  pagebot.contributions.filibuster.content.navigation  pagebot.contributions.filibuster.content.news  pagebot.contributions.filibuster.content.politics  pagebot.contributions.filibuster.content.portal  pagebot.contributions.filibuster.content.quotations  pagebot.contributions.filibuster.content.realestate  pagebot.contributions.filibuster.content.reviews  pagebot.contributions.filibuster.content.sciences  pagebot.contributions.filibuster.content.sports  pagebot.contributions.filibuster.content.staff  pagebot.contributions.filibuster.content.superheroes  pagebot.contributions.filibuster.content.twitter", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#function-content", 
            "text": "Return one dictionary that contains all dictionaries of the\nmodule. By making a function rather than part of the namespace,\nthe content can be updated dynamically. Should not make any\ndifference in speed for normal use.", 
            "title": "function content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#function-index", 
            "text": "Return the name of the submodule that tagname is defined in,\nas well as a list of modules and keys in which this tagname is used.", 
            "title": "function index"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#function-clearcache", 
            "text": "", 
            "title": "function clearCache"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/#debug", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DEBUG"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/aerospace/", 
            "text": "contributions.filibuster.content.aerospace\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Aerospace"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/aerospace/#contributionsfilibustercontentaerospace", 
            "text": "", 
            "title": "contributions.filibuster.content.aerospace"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/aerospace/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/aerospace/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/articles/", 
            "text": "contributions.filibuster.content.articles\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Articles"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/articles/#contributionsfilibustercontentarticles", 
            "text": "", 
            "title": "contributions.filibuster.content.articles"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/articles/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/articles/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/auction/", 
            "text": "contributions.filibuster.content.auction\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Auction"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/auction/#contributionsfilibustercontentauction", 
            "text": "", 
            "title": "contributions.filibuster.content.auction"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/auction/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/auction/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/automotive/", 
            "text": "contributions.filibuster.content.automotive\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Automotive"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/automotive/#contributionsfilibustercontentautomotive", 
            "text": "", 
            "title": "contributions.filibuster.content.automotive"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/automotive/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/automotive/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/book_reference/", 
            "text": "contributions.filibuster.content.book_reference\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Book reference"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/book_reference/#contributionsfilibustercontentbook_reference", 
            "text": "", 
            "title": "contributions.filibuster.content.book_reference"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/book_reference/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/book_reference/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/boymechanic/", 
            "text": "contributions.filibuster.content.boymechanic\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Boymechanic"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/boymechanic/#contributionsfilibustercontentboymechanic", 
            "text": "", 
            "title": "contributions.filibuster.content.boymechanic"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/boymechanic/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/boymechanic/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/classified/", 
            "text": "contributions.filibuster.content.classified\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Classified"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/classified/#contributionsfilibustercontentclassified", 
            "text": "", 
            "title": "contributions.filibuster.content.classified"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/classified/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/classified/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/commercial/", 
            "text": "contributions.filibuster.content.commercial\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Commercial"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/commercial/#contributionsfilibustercontentcommercial", 
            "text": "", 
            "title": "contributions.filibuster.content.commercial"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/commercial/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/commercial/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/corporate/", 
            "text": "contributions.filibuster.content.corporate\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Corporate"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/corporate/#contributionsfilibustercontentcorporate", 
            "text": "", 
            "title": "contributions.filibuster.content.corporate"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/corporate/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/corporate/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/creditcard/", 
            "text": "contributions.filibuster.content.creditcard\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Creditcard"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/creditcard/#contributionsfilibustercontentcreditcard", 
            "text": "", 
            "title": "contributions.filibuster.content.creditcard"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/creditcard/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/creditcard/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/design/", 
            "text": "contributions.filibuster.content.design\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Design"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/design/#contributionsfilibustercontentdesign", 
            "text": "", 
            "title": "contributions.filibuster.content.design"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/design/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/design/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/designarticle/", 
            "text": "contributions.filibuster.content.designarticle\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Designarticle"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/designarticle/#contributionsfilibustercontentdesignarticle", 
            "text": "", 
            "title": "contributions.filibuster.content.designarticle"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/designarticle/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/designarticle/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/entertainment/", 
            "text": "contributions.filibuster.content.entertainment\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Entertainment"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/entertainment/#contributionsfilibustercontententertainment", 
            "text": "", 
            "title": "contributions.filibuster.content.entertainment"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/entertainment/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/entertainment/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/event/", 
            "text": "contributions.filibuster.content.event\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Event"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/event/#contributionsfilibustercontentevent", 
            "text": "", 
            "title": "contributions.filibuster.content.event"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/event/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/event/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filenames/", 
            "text": "contributions.filibuster.content.filenames\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Filenames"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filenames/#contributionsfilibustercontentfilenames", 
            "text": "", 
            "title": "contributions.filibuster.content.filenames"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filenames/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filenames/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filibuster/", 
            "text": "contributions.filibuster.content.filibuster\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Filibuster"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filibuster/#contributionsfilibustercontentfilibuster", 
            "text": "", 
            "title": "contributions.filibuster.content.filibuster"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filibuster/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/filibuster/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/financial/", 
            "text": "contributions.filibuster.content.financial\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Financial"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/financial/#contributionsfilibustercontentfinancial", 
            "text": "", 
            "title": "contributions.filibuster.content.financial"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/financial/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/financial/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/general/", 
            "text": "contributions.filibuster.content.general\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\ndate\n\n\ndate(year, month, day) --\n date object\n\n\nthisYear\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4", 
            "title": "General"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/general/#contributionsfilibustercontentgeneral", 
            "text": "", 
            "title": "contributions.filibuster.content.general"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/general/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/general/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/general/#date", 
            "text": "date(year, month, day) --  date object", 
            "title": "date"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/general/#thisyear", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "thisYear"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/geography/", 
            "text": "contributions.filibuster.content.geography\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Geography"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/geography/#contributionsfilibustercontentgeography", 
            "text": "", 
            "title": "contributions.filibuster.content.geography"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/geography/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/geography/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/horoscope/", 
            "text": "contributions.filibuster.content.horoscope\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Horoscope"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/horoscope/#contributionsfilibustercontenthoroscope", 
            "text": "", 
            "title": "contributions.filibuster.content.horoscope"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/horoscope/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/horoscope/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/internet/", 
            "text": "contributions.filibuster.content.internet\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Internet"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/internet/#contributionsfilibustercontentinternet", 
            "text": "", 
            "title": "contributions.filibuster.content.internet"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/internet/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/internet/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/jargon/", 
            "text": "contributions.filibuster.content.jargon\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Jargon"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/jargon/#contributionsfilibustercontentjargon", 
            "text": "", 
            "title": "contributions.filibuster.content.jargon"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/jargon/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/jargon/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/journalism/", 
            "text": "contributions.filibuster.content.journalism\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Journalism"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/journalism/#contributionsfilibustercontentjournalism", 
            "text": "", 
            "title": "contributions.filibuster.content.journalism"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/journalism/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/journalism/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/legal/", 
            "text": "contributions.filibuster.content.legal\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Legal"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/legal/#contributionsfilibustercontentlegal", 
            "text": "", 
            "title": "contributions.filibuster.content.legal"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/legal/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/legal/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/letterror/", 
            "text": "contributions.filibuster.content.letterror\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Letterror"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/letterror/#contributionsfilibustercontentletterror", 
            "text": "", 
            "title": "contributions.filibuster.content.letterror"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/letterror/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/letterror/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/literature/", 
            "text": "contributions.filibuster.content.literature\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Literature"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/literature/#contributionsfilibustercontentliterature", 
            "text": "", 
            "title": "contributions.filibuster.content.literature"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/literature/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/literature/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/living/", 
            "text": "contributions.filibuster.content.living\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Living"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/living/#contributionsfilibustercontentliving", 
            "text": "", 
            "title": "contributions.filibuster.content.living"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/living/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/living/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/medical/", 
            "text": "contributions.filibuster.content.medical\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Medical"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/medical/#contributionsfilibustercontentmedical", 
            "text": "", 
            "title": "contributions.filibuster.content.medical"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/medical/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/medical/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/modernmedia/", 
            "text": "contributions.filibuster.content.modernmedia\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Modernmedia"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/modernmedia/#contributionsfilibustercontentmodernmedia", 
            "text": "", 
            "title": "contributions.filibuster.content.modernmedia"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/modernmedia/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/modernmedia/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/music/", 
            "text": "contributions.filibuster.content.music\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Music"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/music/#contributionsfilibustercontentmusic", 
            "text": "", 
            "title": "contributions.filibuster.content.music"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/music/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/music/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/names/", 
            "text": "contributions.filibuster.content.names\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Names"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/names/#contributionsfilibustercontentnames", 
            "text": "", 
            "title": "contributions.filibuster.content.names"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/names/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/names/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/navigation/", 
            "text": "contributions.filibuster.content.navigation\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Navigation"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/navigation/#contributionsfilibustercontentnavigation", 
            "text": "", 
            "title": "contributions.filibuster.content.navigation"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/navigation/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/navigation/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/news/", 
            "text": "contributions.filibuster.content.news\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "News"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/news/#contributionsfilibustercontentnews", 
            "text": "", 
            "title": "contributions.filibuster.content.news"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/news/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/news/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/politics/", 
            "text": "contributions.filibuster.content.politics\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Politics"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/politics/#contributionsfilibustercontentpolitics", 
            "text": "", 
            "title": "contributions.filibuster.content.politics"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/politics/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/politics/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/portal/", 
            "text": "contributions.filibuster.content.portal\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Portal"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/portal/#contributionsfilibustercontentportal", 
            "text": "", 
            "title": "contributions.filibuster.content.portal"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/portal/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/portal/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/quotations/", 
            "text": "contributions.filibuster.content.quotations\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Quotations"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/quotations/#contributionsfilibustercontentquotations", 
            "text": "", 
            "title": "contributions.filibuster.content.quotations"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/quotations/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/quotations/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/realestate/", 
            "text": "contributions.filibuster.content.realestate\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Realestate"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/realestate/#contributionsfilibustercontentrealestate", 
            "text": "", 
            "title": "contributions.filibuster.content.realestate"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/realestate/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/realestate/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/reviews/", 
            "text": "contributions.filibuster.content.reviews\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Reviews"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/reviews/#contributionsfilibustercontentreviews", 
            "text": "", 
            "title": "contributions.filibuster.content.reviews"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/reviews/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/reviews/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sciences/", 
            "text": "contributions.filibuster.content.sciences\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Sciences"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sciences/#contributionsfilibustercontentsciences", 
            "text": "", 
            "title": "contributions.filibuster.content.sciences"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sciences/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sciences/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sports/", 
            "text": "contributions.filibuster.content.sports\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Sports"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sports/#contributionsfilibustercontentsports", 
            "text": "", 
            "title": "contributions.filibuster.content.sports"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sports/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/sports/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/staff/", 
            "text": "contributions.filibuster.content.staff\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Staff"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/staff/#contributionsfilibustercontentstaff", 
            "text": "", 
            "title": "contributions.filibuster.content.staff"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/staff/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/staff/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/superheroes/", 
            "text": "contributions.filibuster.content.superheroes\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Superheroes"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/superheroes/#contributionsfilibustercontentsuperheroes", 
            "text": "", 
            "title": "contributions.filibuster.content.superheroes"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/superheroes/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/superheroes/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/twitter/", 
            "text": "contributions.filibuster.content.twitter\n\n\nFunctions\n\n\ncontent\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Twitter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/twitter/#contributionsfilibustercontenttwitter", 
            "text": "", 
            "title": "contributions.filibuster.content.twitter"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/twitter/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/contributions/filibuster/content/twitter/#content", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "content"
        }, 
        {
            "location": "/pagebot/interaction/", 
            "text": "interaction\n\n\nClasses\n\n\n\n\npagebot.interaction.variables\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/interaction/#interaction", 
            "text": "", 
            "title": "interaction"
        }, 
        {
            "location": "/pagebot/interaction/#classes", 
            "text": "pagebot.interaction.variables", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/interaction/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/interaction/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/interaction/variables/", 
            "text": "interaction.variables\n\n\nFunctions", 
            "title": "Variables"
        }, 
        {
            "location": "/pagebot/interaction/variables/#interactionvariables", 
            "text": "", 
            "title": "interaction.variables"
        }, 
        {
            "location": "/pagebot/interaction/variables/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/", 
            "text": "publications\n\n\nClasses\n\n\n\n\npagebot.publications.pagebotdoc\n\n\npagebot.publications.poster\n\n\npagebot.publications.publication\n\n\npagebot.publications.singlepage\n\n\npagebot.publications.typespecimen\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/publications/#publications", 
            "text": "", 
            "title": "publications"
        }, 
        {
            "location": "/pagebot/publications/#classes", 
            "text": "pagebot.publications.pagebotdoc  pagebot.publications.poster  pagebot.publications.publication  pagebot.publications.singlepage  pagebot.publications.typespecimen", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/publications/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/publications/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/", 
            "text": "publications.pagebotdoc\n\n\nFunctions\n\n\nDocument\n\n\nA Document is just another kind of container.\n\n\nPublication\n\n\nThe abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.\n\n\nFamily\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nfunction guessFamilies\n\n\nFind the family relation of all fonts in the list. Note that this cannot be a 100% safe guess.\nAnswer a dictionary with Family instances. Key is family name.\n\n\nfunction getFontPathOfFont\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\nPageBotDoc\n\n\nFont\n\n\nStorage of font information while composing the pages.\n\n\np = pp + '/fonts/google/***REMOVED***'\n\n\np = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n pp = path2ParentPath(p)\n\n p = pp + '/fonts/typetr/BitcountGridVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n f.name\nu'BitcountGrid'\n\n\n len(f)\n101\n\n\n f.keys()[-1]\n'y'\n\n\n f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}\n\n\n variables = f.variables\n\n features = f.features\n\n f.groups\n\n f.designSpace\n{}\n\n\n f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'\n\n\n f.save()\n\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "Pagebotdoc"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#publicationspagebotdoc", 
            "text": "", 
            "title": "publications.pagebotdoc"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#document", 
            "text": "A Document is just another kind of container.", 
            "title": "Document"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#publication", 
            "text": "The abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.", 
            "title": "Publication"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#family", 
            "text": "", 
            "title": "Family"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#function-guessfamilies", 
            "text": "Find the family relation of all fonts in the list. Note that this cannot be a 100% safe guess.\nAnswer a dictionary with Family instances. Key is family name.", 
            "title": "function guessFamilies"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#function-getfontpathoffont", 
            "text": "", 
            "title": "function getFontPathOfFont"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#pagebotdoc", 
            "text": "", 
            "title": "PageBotDoc"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#font", 
            "text": "Storage of font information while composing the pages.", 
            "title": "Font"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#p-pp-fontsgoogleroboto-vfttf", 
            "text": "", 
            "title": "p = pp + '/fonts/google/***REMOVED***'"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#p-pp-fontsfontbureauamstelvaralpha-variationsttf", 
            "text": "import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  pp = path2ParentPath(p)  p = pp + '/fonts/typetr/BitcountGridVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  f.name\nu'BitcountGrid'  len(f)\n101  f.keys()[-1]\n'y'  f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}  variables = f.variables  features = f.features  f.groups  f.designSpace\n{}  f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'  f.save()", 
            "title": "p = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'"
        }, 
        {
            "location": "/pagebot/publications/pagebotdoc/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/publications/poster/", 
            "text": "publications.poster\n\n\nFunctions\n\n\nPublication\n\n\nThe abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.\n\n\nPoster\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nTemplate\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\nDocument\n\n\nA Document is just another kind of container.\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "Poster"
        }, 
        {
            "location": "/pagebot/publications/poster/#publicationsposter", 
            "text": "", 
            "title": "publications.poster"
        }, 
        {
            "location": "/pagebot/publications/poster/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/poster/#publication", 
            "text": "The abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.", 
            "title": "Publication"
        }, 
        {
            "location": "/pagebot/publications/poster/#poster", 
            "text": "", 
            "title": "Poster"
        }, 
        {
            "location": "/pagebot/publications/poster/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/publications/poster/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/publications/poster/#template", 
            "text": "", 
            "title": "Template"
        }, 
        {
            "location": "/pagebot/publications/poster/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/publications/poster/#document", 
            "text": "A Document is just another kind of container.", 
            "title": "Document"
        }, 
        {
            "location": "/pagebot/publications/poster/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/publications/publication/", 
            "text": "publications.publication\n\n\nFunctions\n\n\nPublication\n\n\nThe abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.", 
            "title": "Publication"
        }, 
        {
            "location": "/pagebot/publications/publication/#publicationspublication", 
            "text": "", 
            "title": "publications.publication"
        }, 
        {
            "location": "/pagebot/publications/publication/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/publication/#publication", 
            "text": "The abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.", 
            "title": "Publication"
        }, 
        {
            "location": "/pagebot/publications/singlepage/", 
            "text": "publications.singlepage\n\n\nFunctions\n\n\nfunction newTextBox\n\n\nCaller must supply formatted string. Note that w and h can also be defined in the style.\n\n\nPublication\n\n\nThe abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.\n\n\nGalley\n\n\nA Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.\n\n\nRandomPage\n\n\npbpolygon\n\n\npbline\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nTemplate\n\n\npbrect\n\n\nPolygon\n\n\nThe Polygon element is a simple implementation of the polygon DrawBot function.\nMore complex path-like elements inherit from the Path element.\n\n\npaths\n\n\nfunction newColImage\n\n\nConvert the column size into point size, depending on the column settings of the \ncurrent template, when drawing images \"hard-coded\" directly on a certain page.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller\n\n\nRuler\n\n\nfunction newPolygon\n\n\nfunction newTable\n\n\nfunction newOval\n\n\nDraw the oval. Note that w and h can also be defined in the style. In case h is omitted,\na circle is drawn.\n\n\nfunction newColRect\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\npbruler\n\n\nPath\n\n\nLine\n\n\npbpage\n\n\nRect\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction newRect\n\n\nDraw the rectangle. Note that w and h can also be defined in the style. In case h is omitted,\na square is drawn.\n\n\nviews\n\n\nfunction newColTextBox\n\n\nCaller must supply formatted string.\n\n\nGlyphPath\n\n\nElement\n\n\nOval\n\n\npbtable\n\n\npbgalley\n\n\npbtextbox\n\n\nPage\n\n\npbimage\n\n\nTextBox\n\n\nfunction newColLine\n\n\npbtext\n\n\nfunction newColOval\n\n\nTable\n\n\npboval\n\n\nText\n\n\nImage\n\n\nThe Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.\n\n\nfunction newLine\n\n\nelement\n\n\nfunction newColText\n\n\nDraw formatted string.\nWe don't need w and h here, as it is made by the text and style combinations.\nCaller must supply formatted string.\n\n\nfunction newText\n\n\nDraw formatted string. Normally we don't need w and h here, as it is made by the text and \nstyle combinations. But in case the defined font is a Variable Font, then we can use the\nwidth and height to interpolate a font that fits the space for the given string and weight.\nCaller must supply formatted string. Support both (x, y) and x, y as position.\n\n\nfunction newImage\n\n\nCreate Image element as position (x, y) and optional width, height (w, h) of which\nat least one of them should be defined. The path can be None, to be filled later.\nIf the image is drawn with an empty path, a missingImage cross-frame is shown.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller.", 
            "title": "Singlepage"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#publicationssinglepage", 
            "text": "", 
            "title": "publications.singlepage"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newtextbox", 
            "text": "Caller must supply formatted string. Note that w and h can also be defined in the style.", 
            "title": "function newTextBox"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#publication", 
            "text": "The abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.", 
            "title": "Publication"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#galley", 
            "text": "A Galley is sticky sequential flow of elements, where the parts can have\ndifferent widths (like headlines, images and tables) or responsive width, such as images\nand formatted text volumes. Size is calculated dynamically, since one of the enclosed\nelements may change width/height at any time during the composition process.\nAlso the sequence may change by slicing, adding or removing elements by the Composer.\nSince the Galley is a full compatible Element, it can contain other galley instances\nrecursively.", 
            "title": "Galley"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#randompage", 
            "text": "", 
            "title": "RandomPage"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbpolygon", 
            "text": "", 
            "title": "pbpolygon"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbline", 
            "text": "", 
            "title": "pbline"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#template", 
            "text": "", 
            "title": "Template"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbrect", 
            "text": "", 
            "title": "pbrect"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#polygon", 
            "text": "The Polygon element is a simple implementation of the polygon DrawBot function.\nMore complex path-like elements inherit from the Path element.", 
            "title": "Polygon"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#paths", 
            "text": "", 
            "title": "paths"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newcolimage", 
            "text": "Convert the column size into point size, depending on the column settings of the \ncurrent template, when drawing images \"hard-coded\" directly on a certain page.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller", 
            "title": "function newColImage"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#ruler", 
            "text": "", 
            "title": "Ruler"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newpolygon", 
            "text": "", 
            "title": "function newPolygon"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newtable", 
            "text": "", 
            "title": "function newTable"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newoval", 
            "text": "Draw the oval. Note that w and h can also be defined in the style. In case h is omitted,\na circle is drawn.", 
            "title": "function newOval"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newcolrect", 
            "text": "", 
            "title": "function newColRect"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbruler", 
            "text": "", 
            "title": "pbruler"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#path", 
            "text": "", 
            "title": "Path"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#line", 
            "text": "", 
            "title": "Line"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbpage", 
            "text": "", 
            "title": "pbpage"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#rect", 
            "text": "", 
            "title": "Rect"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newrect", 
            "text": "Draw the rectangle. Note that w and h can also be defined in the style. In case h is omitted,\na square is drawn.", 
            "title": "function newRect"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#views", 
            "text": "", 
            "title": "views"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newcoltextbox", 
            "text": "Caller must supply formatted string.", 
            "title": "function newColTextBox"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#glyphpath", 
            "text": "", 
            "title": "GlyphPath"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#element", 
            "text": "", 
            "title": "Element"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#oval", 
            "text": "", 
            "title": "Oval"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbtable", 
            "text": "", 
            "title": "pbtable"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbgalley", 
            "text": "", 
            "title": "pbgalley"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbtextbox", 
            "text": "", 
            "title": "pbtextbox"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#page", 
            "text": "", 
            "title": "Page"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbimage", 
            "text": "", 
            "title": "pbimage"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#textbox", 
            "text": "", 
            "title": "TextBox"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newcolline", 
            "text": "", 
            "title": "function newColLine"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pbtext", 
            "text": "", 
            "title": "pbtext"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newcoloval", 
            "text": "", 
            "title": "function newColOval"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#table", 
            "text": "", 
            "title": "Table"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#pboval", 
            "text": "", 
            "title": "pboval"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#text", 
            "text": "", 
            "title": "Text"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#image", 
            "text": "The Image element is a \u201cnormal\u201d container, which contains one (or more) PixelMap elements and zero (or more)\ncaption or other elements. This way the user can add mulitple PixelMaps, a title elements, etc. \nThe layout of the Image elements is defined in the same way as any other layout. Conditional rules can be \napplied (e.g. if the image element changes size), or the child elements can be put on fixed positions.", 
            "title": "Image"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newline", 
            "text": "", 
            "title": "function newLine"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#element_1", 
            "text": "", 
            "title": "element"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newcoltext", 
            "text": "Draw formatted string.\nWe don't need w and h here, as it is made by the text and style combinations.\nCaller must supply formatted string.", 
            "title": "function newColText"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newtext", 
            "text": "Draw formatted string. Normally we don't need w and h here, as it is made by the text and \nstyle combinations. But in case the defined font is a Variable Font, then we can use the\nwidth and height to interpolate a font that fits the space for the given string and weight.\nCaller must supply formatted string. Support both (x, y) and x, y as position.", 
            "title": "function newText"
        }, 
        {
            "location": "/pagebot/publications/singlepage/#function-newimage", 
            "text": "Create Image element as position (x, y) and optional width, height (w, h) of which\nat least one of them should be defined. The path can be None, to be filled later.\nIf the image is drawn with an empty path, a missingImage cross-frame is shown.\nThe optional imo attribute is an ImageObject() with filters in place. \nThe Image element is answered for convenience of the caller.", 
            "title": "function newImage"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/", 
            "text": "publications.typespecimen\n\n\nFunctions\n\n\nDocument\n\n\nA Document is just another kind of container.\n\n\nTypeSpecimen\n\n\nPublication\n\n\nThe abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.\n\n\nFamily\n\n\nW\n\n\nfloat(x) -\n floating point number\n\n\nConvert a string or number to a floating point number, if possible.\n\n\nA4\n\n\ntuple() -\n empty tuple\ntuple(iterable) -\n tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\n\nH\n\n\nfloat(x) -\n floating point number\n\n\nConvert a string or number to a floating point number, if possible.\n\n\nfunction newFS\n\n\nAnswer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.\n\n\nfunction guessFamilies\n\n\nFind the family relation of all fonts in the list. Note that this cannot be a 100% safe guess.\nAnswer a dictionary with Family instances. Key is family name.\n\n\nfunction getFontPathOfFont\n\n\nNO_COLOR\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nTemplate\n\n\nfunction getRootStyle\n\n\nAnswer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.\n\n\nPage\n\n\nFont\n\n\nStorage of font information while composing the pages.\n\n\np = pp + '/fonts/google/***REMOVED***'\n\n\np = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n pp = path2ParentPath(p)\n\n p = pp + '/fonts/typetr/BitcountGridVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n f.name\nu'BitcountGrid'\n\n\n len(f)\n101\n\n\n f.keys()[-1]\n'y'\n\n\n f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}\n\n\n variables = f.variables\n\n features = f.features\n\n f.groups\n\n f.designSpace\n{}\n\n\n f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'\n\n\n f.save()\n\n\n\nLEFT\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "Typespecimen"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#publicationstypespecimen", 
            "text": "", 
            "title": "publications.typespecimen"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#document", 
            "text": "A Document is just another kind of container.", 
            "title": "Document"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#typespecimen", 
            "text": "", 
            "title": "TypeSpecimen"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#publication", 
            "text": "The abstract Publication class, implements everything needed for a specific kind of publication.\nIt can hold multiple related Document instances and serves various output formats.", 
            "title": "Publication"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#family", 
            "text": "", 
            "title": "Family"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#w", 
            "text": "float(x) -  floating point number  Convert a string or number to a floating point number, if possible.", 
            "title": "W"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#a4", 
            "text": "tuple() -  empty tuple\ntuple(iterable) -  tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object.", 
            "title": "A4"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#h", 
            "text": "float(x) -  floating point number  Convert a string or number to a floating point number, if possible.", 
            "title": "H"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#function-newfs", 
            "text": "Answer a formatted string from valid attributes in Style. Set the all values after testing\ntheir existence, so they can inherit from previous style formats.", 
            "title": "function newFS"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#function-guessfamilies", 
            "text": "Find the family relation of all fonts in the list. Note that this cannot be a 100% safe guess.\nAnswer a dictionary with Family instances. Key is family name.", 
            "title": "function guessFamilies"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#function-getfontpathoffont", 
            "text": "", 
            "title": "function getFontPathOfFont"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#no_color", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "NO_COLOR"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#template", 
            "text": "", 
            "title": "Template"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#function-getrootstyle", 
            "text": "Answer the main root style tha contains all default style attributes of PageBot.\nTo be overwritten when needed by calling applications.\nCAPITALIZED attribute names are for reference only. Not used directly from styles.\nThey can be copied on other style attributes.\nNote that if the overall unit style.u is changed by the calling application, also the\nU-based values must be recalculated for proper measures.", 
            "title": "function getRootStyle"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#page", 
            "text": "", 
            "title": "Page"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#font", 
            "text": "Storage of font information while composing the pages.", 
            "title": "Font"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#p-pp-fontsgoogleroboto-vfttf", 
            "text": "", 
            "title": "p = pp + '/fonts/google/***REMOVED***'"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#p-pp-fontsfontbureauamstelvaralpha-variationsttf", 
            "text": "import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  pp = path2ParentPath(p)  p = pp + '/fonts/typetr/BitcountGridVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  f.name\nu'BitcountGrid'  len(f)\n101  f.keys()[-1]\n'y'  f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}  variables = f.variables  features = f.features  f.groups  f.designSpace\n{}  f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'  f.save()", 
            "title": "p = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'"
        }, 
        {
            "location": "/pagebot/publications/typespecimen/#left", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "LEFT"
        }, 
        {
            "location": "/pagebot/toolbox/", 
            "text": "toolbox\n\n\nClasses\n\n\n\n\npagebot.toolbox.dating\n\n\npagebot.toolbox.drawparts\n\n\npagebot.toolbox.markers\n\n\npagebot.toolbox.mathematics\n\n\npagebot.toolbox.timemark\n\n\npagebot.toolbox.transform3d\n\n\npagebot.toolbox.transformer\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/toolbox/#toolbox", 
            "text": "", 
            "title": "toolbox"
        }, 
        {
            "location": "/pagebot/toolbox/#classes", 
            "text": "pagebot.toolbox.dating  pagebot.toolbox.drawparts  pagebot.toolbox.markers  pagebot.toolbox.mathematics  pagebot.toolbox.timemark  pagebot.toolbox.transform3d  pagebot.toolbox.transformer", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/toolbox/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/toolbox/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/dating/", 
            "text": "toolbox.dating\n\n\nFunctions\n\n\nclass DateTime\n\n\nThe \nnewdate\n method answers a new \nDateTime\n instance. If the \ndate\n is\n\nNone\n, then answer \nNone\n. If \ndate\n is a string, then convert to\n\nDateTime\n. Check on the month and day boundaries.\n\n\n\n\nInitialize the current date if the \ndate\n is equal to \nnow\n\n\nInitialize on first day of the week if year and week are defined\n\n\nInitialize from existing datetime if \"dt\" is defined\n\n\nInitialize from \ndate_time\n string, date and time separated by white space.\n\n\nInitialize from \ndate\n string (identical to the result of self.date) if defined\n\n\nInitialize from \ntime\n string (identical to the result of self.time) if defined\n\n\nInitialize from (year, month, day) if all of them are defined.\n\n\nOtherwise raise an error\n\n\n\nIf the \ntrimvalues\n attribute is set to \nFalse\n (default is \nTrue\n) then the\ninput values of the date are \nnot\n trimmed to their minimum and maximum values. This checking is done in\ncontext for days in months and years.\n\n\n\nDateTime(date='now')\nDateTime(date='2008-11-23')\nDateTime(date='2008-11-23', time='23:11')\nDateTime(date='2008-11-23', time='23:11:22')\nDateTime(2008, 11, 23)\nDateTime(2008, 11, 23, 23, 11, 22, 0)\nDateTime(2008, week=23)\n\n\n\nfunction uniqueLong\n\n\nThe \nuniqueLong\n method answers a unique number (as string) of 18 digits.\n\n\nfunction monthdays\n\n\nfunction timestampLong\n\n\nThe \ntimestampLong\n method answers the timestamp. This may not be unique.\n\n\nfunction leapyear\n\n\nfunction checkdatetime\n\n\nThe \ncheckdatetime\n answers the \ndate\n if it is a date. If date is None, then answer None. If\ndate is a string, then convert to DateTime. Check on the month and day boundaries. Answer the same type that date\nwas. Note that we do not check if date was already a DateTime. This method is especially made to set database fields\nwith dates, where that None will result in a NULL value for that field.\n\n\nfunction uniqueId\n\n\nThe \nuniqueId\n method answers a unique number (as string) of \nsize\n length concatenated\ntimestamps. Minimum length of the number is 18 digits, or else string will not be unique.\n\n\nclass Period\n\n\nThe \nDuration\n class contains a duration in time. It can e.g. be used to add to a \nDateTime\n\ninstance with a new date as result.\n\n\n\nDuration(3)\n\nDuration(seconds=10)\n\nDuration(td=timedelta)\n\n\n\nAll common arithmetic applies to a \nDuration\n instance. \n\n\nd = Duration(3)\n\nd * 3 is a duration of 6 days.\n\n\n\n\nclass Duration\n\n\nThe \nDuration\n class contains a duration in time. It can e.g. be used to add to a \nDateTime\n\ninstance with a new date as result.\n\n\n\nDuration(3)\n\nDuration(seconds=10)\n\nDuration(td=timedelta)\n\n\n\nAll common arithmetic applies to a \nDuration\n instance. \n\n\nd = Duration(3)\n\nd * 3 is a duration of 6 days.\n\n\n\n\nfunction newdatetime\n\n\nThe \nnewdate\n method answers a new \nDateTime\n instance. If the \ndate\n is\n\nNone\n, then answer \nNone\n. If \ndate\n is a string, then convert to\n\nDateTime\n. Check on the month and day boundaries.\n\n\nlocaltime\n\n\nlocaltime([seconds]) -\n (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n  tm_sec,tm_wday,tm_yday,tm_isdst)\n\n\nConvert seconds since the Epoch to a time tuple expressing local time.\nWhen 'seconds' is not passed in, convert the current time instead.", 
            "title": "Dating"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#toolboxdating", 
            "text": "", 
            "title": "toolbox.dating"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#class-datetime", 
            "text": "The  newdate  method answers a new  DateTime  instance. If the  date  is None , then answer  None . If  date  is a string, then convert to DateTime . Check on the month and day boundaries.   Initialize the current date if the  date  is equal to  now  Initialize on first day of the week if year and week are defined  Initialize from existing datetime if \"dt\" is defined  Initialize from  date_time  string, date and time separated by white space.  Initialize from  date  string (identical to the result of self.date) if defined  Initialize from  time  string (identical to the result of self.time) if defined  Initialize from (year, month, day) if all of them are defined.  Otherwise raise an error  \nIf the  trimvalues  attribute is set to  False  (default is  True ) then the\ninput values of the date are  not  trimmed to their minimum and maximum values. This checking is done in\ncontext for days in months and years.  \nDateTime(date='now')\nDateTime(date='2008-11-23')\nDateTime(date='2008-11-23', time='23:11')\nDateTime(date='2008-11-23', time='23:11:22')\nDateTime(2008, 11, 23)\nDateTime(2008, 11, 23, 23, 11, 22, 0)\nDateTime(2008, week=23)", 
            "title": "class DateTime"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-uniquelong", 
            "text": "The  uniqueLong  method answers a unique number (as string) of 18 digits.", 
            "title": "function uniqueLong"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-monthdays", 
            "text": "", 
            "title": "function monthdays"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-timestamplong", 
            "text": "The  timestampLong  method answers the timestamp. This may not be unique.", 
            "title": "function timestampLong"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-leapyear", 
            "text": "", 
            "title": "function leapyear"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-checkdatetime", 
            "text": "The  checkdatetime  answers the  date  if it is a date. If date is None, then answer None. If\ndate is a string, then convert to DateTime. Check on the month and day boundaries. Answer the same type that date\nwas. Note that we do not check if date was already a DateTime. This method is especially made to set database fields\nwith dates, where that None will result in a NULL value for that field.", 
            "title": "function checkdatetime"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-uniqueid", 
            "text": "The  uniqueId  method answers a unique number (as string) of  size  length concatenated\ntimestamps. Minimum length of the number is 18 digits, or else string will not be unique.", 
            "title": "function uniqueId"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#class-period", 
            "text": "The  Duration  class contains a duration in time. It can e.g. be used to add to a  DateTime \ninstance with a new date as result.  \nDuration(3) \nDuration(seconds=10) \nDuration(td=timedelta)  \nAll common arithmetic applies to a  Duration  instance.  \nd = Duration(3) \nd * 3 is a duration of 6 days.", 
            "title": "class Period"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#class-duration", 
            "text": "The  Duration  class contains a duration in time. It can e.g. be used to add to a  DateTime \ninstance with a new date as result.  \nDuration(3) \nDuration(seconds=10) \nDuration(td=timedelta)  \nAll common arithmetic applies to a  Duration  instance.  \nd = Duration(3) \nd * 3 is a duration of 6 days.", 
            "title": "class Duration"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#function-newdatetime", 
            "text": "The  newdate  method answers a new  DateTime  instance. If the  date  is None , then answer  None . If  date  is a string, then convert to DateTime . Check on the month and day boundaries.", 
            "title": "function newdatetime"
        }, 
        {
            "location": "/pagebot/toolbox/dating/#localtime", 
            "text": "localtime([seconds]) -  (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n  tm_sec,tm_wday,tm_yday,tm_isdst)  Convert seconds since the Epoch to a time tuple expressing local time.\nWhen 'seconds' is not passed in, convert the current time instead.", 
            "title": "localtime"
        }, 
        {
            "location": "/pagebot/toolbox/drawparts/", 
            "text": "toolbox.drawparts\n\n\nFunctions\n\n\nfunction drawArrow\n\n\nDraw curved arrow marker between the two points.\nTODO: Add drawing of real arrow-heads, rotated in the right direction.\n\n\nfunction point3D\n\n\nAnswer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "Drawparts"
        }, 
        {
            "location": "/pagebot/toolbox/drawparts/#toolboxdrawparts", 
            "text": "", 
            "title": "toolbox.drawparts"
        }, 
        {
            "location": "/pagebot/toolbox/drawparts/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/drawparts/#function-drawarrow", 
            "text": "Draw curved arrow marker between the two points.\nTODO: Add drawing of real arrow-heads, rotated in the right direction.", 
            "title": "function drawArrow"
        }, 
        {
            "location": "/pagebot/toolbox/drawparts/#function-point3d", 
            "text": "Answer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "function point3D"
        }, 
        {
            "location": "/pagebot/toolbox/markers/", 
            "text": "toolbox.markers\n\n\nFunctions\n\n\nfunction point3D\n\n\nAnswer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.\n\n\nfunction drawCropMarks\n\n\nIf the show flag is set, then draw the cropmarks or page frame.\n\n\nfunction drawRegistrationMark\n\n\nDraw registration mark as position x, y.\n\n\nfunction drawRegistrationMarks\n\n\nDraw standard registration mark, to show registration of CMYK colors.\nhttps://en.wikipedia.org/wiki/Printing_registration.", 
            "title": "Markers"
        }, 
        {
            "location": "/pagebot/toolbox/markers/#toolboxmarkers", 
            "text": "", 
            "title": "toolbox.markers"
        }, 
        {
            "location": "/pagebot/toolbox/markers/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/markers/#function-point3d", 
            "text": "Answer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "function point3D"
        }, 
        {
            "location": "/pagebot/toolbox/markers/#function-drawcropmarks", 
            "text": "If the show flag is set, then draw the cropmarks or page frame.", 
            "title": "function drawCropMarks"
        }, 
        {
            "location": "/pagebot/toolbox/markers/#function-drawregistrationmark", 
            "text": "Draw registration mark as position x, y.", 
            "title": "function drawRegistrationMark"
        }, 
        {
            "location": "/pagebot/toolbox/markers/#function-drawregistrationmarks", 
            "text": "Draw standard registration mark, to show registration of CMYK colors.\nhttps://en.wikipedia.org/wiki/Printing_registration.", 
            "title": "function drawRegistrationMarks"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/", 
            "text": "toolbox.mathematics\n\n\nFunctions\n\n\nfunction point2Line\n\n\nAnswers the distance from point \n(px, py)\n to line \n((x1,\ny1), (x2, y2))\n.\n\n\nfunction insideCircle\n\n\n insideCircle(1, 1, 5)\nTrue\n\n\n insideCircle(3, 3, 3)\nFalse\n\n\n\nfunction dotProduct\n\n\nfunction pointProjectedOnLine\n\n\nAnswers the projected point \n(px, py)\n on line \n((x1, y1), (x2,\ny2))\n.  Answers \n(x1, y1)\n if there is not distance between the two\npoints of the line.\n\n\nfunction normalize\n\n\nfunction vectorLength\n\n\nnormalizedVector\n\n\nclassmethod(function) -\n method\n\n\nConvert a function to be a class method.\n\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n\nclass C:\n  def f(cls, arg1, arg2, ...): ...\n  f = classmethod(f)\n\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.\n\n\nfunction squareDistance\n\n\nAnswers the square of the distance for relative comparison and to\nsave the time of the \nsqrt\n.\n\n\nfunction test\n\n\nfunction isEven\n\n\n isEven(2)\nTrue\n\n\n isEven(1)\nFalse\n\n\n\nfunction isOdd\n\n\n isOdd(1)\nTrue\n\n\n isOdd(2)\nFalse\n\n\n\nfunction intersection\n\n\nReturns 2D intersection point if it exists. Otherwise (None, None,\nNone) is answered. Different from the RoboFont intersection tool, we\nintersect on infinite line lengths. See also:\n\n\nhttp://en.wikipedia.org/wiki/Line-line_intersection\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nfunction scalexy\n\n\nfunction distance\n\n\nAnswers the distance between the points.\n\n\nfunction isBetween\n\n\nChecks if point is on line between line endpoints. Uses epsilon\nmargin for float values, can be substituted by zero for integer\nvalues.\n\n\nfunction scalePointByVector\n\n\nfunction lucasRange\n\n\nAnswers the range stem widths for interpolation, according to\nLucas\u2019 formula.\n\n\nhttp://www.lucasfonts.com/about/interpolation-theory/\na = minStem\nz = maxStem\nn = number of interpolated stems, including the two masters\nminN = optional minimum value if normalizing, e.g. 0-1000\nmaxN = optional maximum value if normalizing\n\n\nprint Mathematics.lucasRange(32, 212, 8)\n[32, 42, 55, 72, 94, 124, 162, 212]\n\n\nprint Mathematics.lucasRange(32, 212, 8, 0, 1000)\n[0, 55, 127, 222, 346, 508, 721, 1000]\n\n\nprint Mathematics.lucasRange(32, 212, 8, 100, 200)\n[100, 106, 113, 122, 135, 151, 172, 200]", 
            "title": "Mathematics"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#toolboxmathematics", 
            "text": "", 
            "title": "toolbox.mathematics"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-point2line", 
            "text": "Answers the distance from point  (px, py)  to line  ((x1,\ny1), (x2, y2)) .", 
            "title": "function point2Line"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-insidecircle", 
            "text": "insideCircle(1, 1, 5)\nTrue  insideCircle(3, 3, 3)\nFalse", 
            "title": "function insideCircle"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-dotproduct", 
            "text": "", 
            "title": "function dotProduct"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-pointprojectedonline", 
            "text": "Answers the projected point  (px, py)  on line  ((x1, y1), (x2,\ny2)) .  Answers  (x1, y1)  if there is not distance between the two\npoints of the line.", 
            "title": "function pointProjectedOnLine"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-normalize", 
            "text": "", 
            "title": "function normalize"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-vectorlength", 
            "text": "", 
            "title": "function vectorLength"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#normalizedvector", 
            "text": "classmethod(function) -  method  Convert a function to be a class method.  A class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:  class C:\n  def f(cls, arg1, arg2, ...): ...\n  f = classmethod(f)  It can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.  Class methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.", 
            "title": "normalizedVector"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-squaredistance", 
            "text": "Answers the square of the distance for relative comparison and to\nsave the time of the  sqrt .", 
            "title": "function squareDistance"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-test", 
            "text": "", 
            "title": "function test"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-iseven", 
            "text": "isEven(2)\nTrue  isEven(1)\nFalse", 
            "title": "function isEven"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-isodd", 
            "text": "isOdd(1)\nTrue  isOdd(2)\nFalse", 
            "title": "function isOdd"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-intersection", 
            "text": "Returns 2D intersection point if it exists. Otherwise (None, None,\nNone) is answered. Different from the RoboFont intersection tool, we\nintersect on infinite line lengths. See also:  http://en.wikipedia.org/wiki/Line-line_intersection", 
            "title": "function intersection"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-scalexy", 
            "text": "", 
            "title": "function scalexy"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-distance", 
            "text": "Answers the distance between the points.", 
            "title": "function distance"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-isbetween", 
            "text": "Checks if point is on line between line endpoints. Uses epsilon\nmargin for float values, can be substituted by zero for integer\nvalues.", 
            "title": "function isBetween"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-scalepointbyvector", 
            "text": "", 
            "title": "function scalePointByVector"
        }, 
        {
            "location": "/pagebot/toolbox/mathematics/#function-lucasrange", 
            "text": "Answers the range stem widths for interpolation, according to\nLucas\u2019 formula.  http://www.lucasfonts.com/about/interpolation-theory/\na = minStem\nz = maxStem\nn = number of interpolated stems, including the two masters\nminN = optional minimum value if normalizing, e.g. 0-1000\nmaxN = optional maximum value if normalizing  print Mathematics.lucasRange(32, 212, 8)\n[32, 42, 55, 72, 94, 124, 162, 212]  print Mathematics.lucasRange(32, 212, 8, 0, 1000)\n[0, 55, 127, 222, 346, 508, 721, 1000]  print Mathematics.lucasRange(32, 212, 8, 100, 200)\n[100, 106, 113, 122, 135, 151, 172, 200]", 
            "title": "function lucasRange"
        }, 
        {
            "location": "/pagebot/toolbox/timemark/", 
            "text": "toolbox.timemark\n\n\nFunctions\n\n\nTimeMark\n\n\nTimeMarks are used by elements to keep style attributes sorted in a time line.", 
            "title": "Timemark"
        }, 
        {
            "location": "/pagebot/toolbox/timemark/#toolboxtimemark", 
            "text": "", 
            "title": "toolbox.timemark"
        }, 
        {
            "location": "/pagebot/toolbox/timemark/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/timemark/#timemark", 
            "text": "TimeMarks are used by elements to keep style attributes sorted in a time line.", 
            "title": "TimeMark"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/", 
            "text": "toolbox.transform3d\n\n\nFunctions\n\n\ndivision\n\n\nTransform3D\n\n\nfunction _dotProduct\n\n\nfunction _offsetArray3D", 
            "title": "Transform3d"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/#toolboxtransform3d", 
            "text": "", 
            "title": "toolbox.transform3d"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/#transform3d", 
            "text": "", 
            "title": "Transform3D"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/#function-_dotproduct", 
            "text": "", 
            "title": "function _dotProduct"
        }, 
        {
            "location": "/pagebot/toolbox/transform3d/#function-_offsetarray3d", 
            "text": "", 
            "title": "function _offsetArray3D"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/", 
            "text": "toolbox.transformer\n\n\nFunctions\n\n\nfunction asNumberOrNone\n\n\nfunction none2Empty\n\n\nfunction moreBlue\n\n\nfunction reverseDict\n\n\nfunction asString\n\n\nfunction point3D\n\n\nAnswer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.\n\n\nfunction path2ScriptId\n\n\nAnswer the scriptId, derived from the \nfile\n of the main source.\n\n\nfunction asStringOrEmpty\n\n\nfunction makeUniqueList\n\n\nfunction removeWhiteSpace\n\n\nVacuum s by removing all white space.\n\n\nfunction moreGreen\n\n\nfunction path2HintPath\n\n\nfunction path2Name\n\n\nAnswers the file name part of the path.\n\n\nfunction string2PlainWords\n\n\nfunction asFloat\n\n\nfunction font2Naked\n\n\nfunction list2StringList\n\n\nfunction point2S\n\n\nAnswer the point as string of rounded integers. Ignore z value if it is 0.\n\n\nfunction list2String\n\n\nfunction fontName2StyleName\n\n\nfunction asSet\n\n\nfunction lighter\n\n\nfunction family2UfoQueryName\n\n\nfunction path2FormatPath\n\n\nAnswers the path where the extension is changed to format If format is\nNone, then the extension is removed.\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nfunction font2FamilyName\n\n\nfunction writeUnicode\n\n\nTakes a unicode string and returns a decimal integer.\n\n\nfunction asTuple\n\n\nfunction commaString2List\n\n\nfunction value2IdCommaString\n\n\nTransform a list with numbers into a comma separated string. This can be used to convert a list of record ids\ninto a SQL compatible list of ids, without integers showing up as @1234L@.\n\n\nfunction asFloatOrNone\n\n\nfunction readUnicode\n\n\nTakes a decimal integer and returns a unicode string.\n\n\nfunction font2UfoQueryName\n\n\nfunction moreRed\n\n\nfunction float2Fixed\n\n\nThe @float2Fixed@ method translates a float into a 1/64 pixel unit-value.\n\n\nfunction asIntOrNone\n\n\nfunction path2GlyphIdName\n\n\nTake that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.\n\n\n/xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed\n\n\nxxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold\n\n\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'\n\n\n\nfunction readUnicodes\n\n\ntakes a list of robofab friendly integers and returns a string of unicodes.\n\n\nfunction fixed2Float\n\n\nThe @fixed2Float@ method translates a fixed 1/64 pixel-unit value to float.\n\n\nfunction asIntOrDefault\n\n\nfunction path2FontName\n\n\nTake that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.\n\n\n/xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed\n\n\nxxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold\n\n\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'\n\n\n path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'\n\n\n\nfunction hex2char\n\n\nfunction commaString2IntegerList\n\n\nfunction obj2StyleId\n\n\nMake sure s is styleId format, other recursively transform into string with space separators.\nParts can be CSS-like #id and .class identifiers.\nNote that this may change in the future if more compatibility with CSS is necessary.\n\n\nfunction writeUnicodes\n\n\nTakes a list of unicode strings and returns a list of robofab-friendly integers.\n\n\nfunction interpolate\n\n\nAnswer the interpolated value of factor v between a and b. If doRound is True (default is False), then\nround the result before answering it.\n\n\nfunction bool2Int\n\n\nfunction path2ParentPath\n\n\n path2ParentPath('/xxx/yyy/zzz/')\n'/xxx/yyy/zzz'\n\n\n path2ParentPath('/xxx/yyy/zzz')\n'/xxx/yyy'\n\n\n path2ParentPath('/xxx/yyy/zzz.gif')\n'/xxx/yyy'\n\n\n\nfunction field2Floq\n\n\nfunction asIntOrValue\n\n\nfunction isUniqueList\n\n\nfunction obj2StyleIds\n\n\nWHITESPACE\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction asNumber\n\n\nfunction list2SpacedString\n\n\nfunction string2WordsKey\n\n\nPLAINWORDS\n\n\nCompiled regular expression objects\n\n\nfunction arabic2RomanNumerals\n\n\nReturn the roman numeral representing n. Should work for n in (1, 4999). Borrowed from Nick Montfort.\n\n\nfunction words2WordsKey\n\n\nfunction asFormatted\n\n\nfunction strippedString\n\n\nfunction value2Fixed\n\n\nfunction bash\n\n\nRuns a command in the bash shell.\n\n\nfunction floq2Field\n\n\nfunction idCommaString2IdSet\n\n\nTransform a string with comma separated items into a set of id integers.\n\n\nfunction lessGreen\n\n\nfunction json2Dict\n\n\nfunction asId\n\n\nThe \nasId\n method transforms the \nvalue\n attribute either to an instance of @\nlong@ or to @None@, so it can be used as \nid\n field in a @Record@\ninstance. If the value cannot be converted, then the optional \ndefault\n (default value is @0\n@) is answered.\n\n\nfunction font2ID\n\n\nAnswer the unique record/adapter ID of the font/style. This can be the unique database record id\nor the unique file path. For now we just answer the file path.\n\n\nfunction pointOffset\n\n\nAnswer new 3D point, shifted by offset.\n\n\nfunction list2Json\n\n\nfunction hex2dec\n\n\nfunction font2FileName\n\n\nAnswer the font file name. In case of a new unsaved font,\nanswer \n\"Untitled\"\n.\n\n\nfunction font2Name\n\n\nfunction seconds2Date\n\n\nAnswer TTF seconds converted to a datetime instance.\n\n\nfunction asInt\n\n\nfunction darker\n\n\nfunction path2FontId\n\n\nAnswers the font ID for the font associated with this path. If the path does not exist, or if the font name\nis invalid, then answer None.\n\n\nfunction list2CommaString\n\n\nfunction asRoundedOrZeroString\n\n\nfunction stringList2StrippedList\n\n\nfunction filterValue2Int\n\n\nFilter all numeric characters from the string and answer the resulting integer.\nAnswer 0 if no digits are found. If s is already a number, then answer it as rounded int.\n\n\nfunction uniqueID\n\n\nfunction formatBinaryForTTX\n\n\nfunction isInt\n\n\nfunction isUniqueDict\n\n\nfunction font2FamilyID\n\n\nAnswer the unique record/adapter ID of the family of \nfont\n. This can be the unique database\nrecord id of the font parent or the unique directory path of the font. For now we just answer the\nthe location of the family plist file.\nSpecial situation is if the font is not saved yet. In that case it does not have a path.\n\n\nfunction dict2Json\n\n\nfunction dec2hex\n\n\nfunction shrink\n\n\nfunction lessRed\n\n\nfunction date2Seconds\n\n\nAnswer the datetime converted to TTF seconds.\n\n\nfunction asRoundedInt\n\n\nfunction asDict\n\n\nAnswer the value as dict as root. If the value itself is not a dict,\nanswer it as dict(value=value). For lower levels than root, answer\nthe plain value if is it a string or a number. Basic classed don't get\ntranslated when not called as root.\nAll other objects are called by value.asDict()\nIf the object cannot handle that method, then convert it to string.\n\n\nfunction json2List\n\n\nfunction font2Path\n\n\nfunction index2PointId\n\n\nfunction lessBlue\n\n\nfunction font2StyleName\n\n\nfunction asBool\n\n\nfunction fontName2FamilyName\n\n\nFor now take the chunk up till \"-\" in the filename and ignore the family name as set in the font.info\nAlso make sure that the extension is removed, if the font has no \"-\" it isn't name. Relay-Medium_Italic.ufo\nbecomes Relay. ThisFont.ufo becomes ThisFont.\n\n\nROMAN_NUMERAL_VALUES\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction int2Bool\n\n\nfunction module2Path", 
            "title": "Transformer"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#toolboxtransformer", 
            "text": "", 
            "title": "toolbox.transformer"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asnumberornone", 
            "text": "", 
            "title": "function asNumberOrNone"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-none2empty", 
            "text": "", 
            "title": "function none2Empty"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-moreblue", 
            "text": "", 
            "title": "function moreBlue"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-reversedict", 
            "text": "", 
            "title": "function reverseDict"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asstring", 
            "text": "", 
            "title": "function asString"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-point3d", 
            "text": "Answer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "function point3D"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2scriptid", 
            "text": "Answer the scriptId, derived from the  file  of the main source.", 
            "title": "function path2ScriptId"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asstringorempty", 
            "text": "", 
            "title": "function asStringOrEmpty"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-makeuniquelist", 
            "text": "", 
            "title": "function makeUniqueList"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-removewhitespace", 
            "text": "Vacuum s by removing all white space.", 
            "title": "function removeWhiteSpace"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-moregreen", 
            "text": "", 
            "title": "function moreGreen"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2hintpath", 
            "text": "", 
            "title": "function path2HintPath"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2name", 
            "text": "Answers the file name part of the path.", 
            "title": "function path2Name"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-string2plainwords", 
            "text": "", 
            "title": "function string2PlainWords"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asfloat", 
            "text": "", 
            "title": "function asFloat"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2naked", 
            "text": "", 
            "title": "function font2Naked"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-list2stringlist", 
            "text": "", 
            "title": "function list2StringList"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-point2s", 
            "text": "Answer the point as string of rounded integers. Ignore z value if it is 0.", 
            "title": "function point2S"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-list2string", 
            "text": "", 
            "title": "function list2String"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-fontname2stylename", 
            "text": "", 
            "title": "function fontName2StyleName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asset", 
            "text": "", 
            "title": "function asSet"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-lighter", 
            "text": "", 
            "title": "function lighter"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-family2ufoqueryname", 
            "text": "", 
            "title": "function family2UfoQueryName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2formatpath", 
            "text": "Answers the path where the extension is changed to format If format is\nNone, then the extension is removed.", 
            "title": "function path2FormatPath"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2familyname", 
            "text": "", 
            "title": "function font2FamilyName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-writeunicode", 
            "text": "Takes a unicode string and returns a decimal integer.", 
            "title": "function writeUnicode"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-astuple", 
            "text": "", 
            "title": "function asTuple"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-commastring2list", 
            "text": "", 
            "title": "function commaString2List"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-value2idcommastring", 
            "text": "Transform a list with numbers into a comma separated string. This can be used to convert a list of record ids\ninto a SQL compatible list of ids, without integers showing up as @1234L@.", 
            "title": "function value2IdCommaString"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asfloatornone", 
            "text": "", 
            "title": "function asFloatOrNone"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-readunicode", 
            "text": "Takes a decimal integer and returns a unicode string.", 
            "title": "function readUnicode"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2ufoqueryname", 
            "text": "", 
            "title": "function font2UfoQueryName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-morered", 
            "text": "", 
            "title": "function moreRed"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-float2fixed", 
            "text": "The @float2Fixed@ method translates a float into a 1/64 pixel unit-value.", 
            "title": "function float2Fixed"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asintornone", 
            "text": "", 
            "title": "function asIntOrNone"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2glyphidname", 
            "text": "Take that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.  /xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed", 
            "title": "function path2GlyphIdName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#xxxyyyzzzagency_fb-bold0001646411ufo-becomes-agency_fb-bold", 
            "text": "path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'  path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'  path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'", 
            "title": "xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-readunicodes", 
            "text": "takes a list of robofab friendly integers and returns a string of unicodes.", 
            "title": "function readUnicodes"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-fixed2float", 
            "text": "The @fixed2Float@ method translates a fixed 1/64 pixel-unit value to float.", 
            "title": "function fixed2Float"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asintordefault", 
            "text": "", 
            "title": "function asIntOrDefault"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2fontname", 
            "text": "Take that file part of the path, and get the chunk until the first\nperiod to remove the extension, version numbers and the database download\nID.  /xxx/yyy/zzz/Agency_FB-Compressed.ufo becomes Agency_FB-Compressed\n/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo becomes Agency_FB-Compressed", 
            "title": "function path2FontName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#xxxyyyzzzagency_fb-bold0001646411ufo-becomes-agency_fb-bold_1", 
            "text": "path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.ufo')\n'Agency_FB-Compressed'  path2FontName('/xxx/yyy/zzz/Agency_FB-Compressed.version01.ufo')\n'Agency_FB-Compressed'  path2FontName('#xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo')\n'Agency_FB-Bold'", 
            "title": "xxx/yyy/zzz/Agency_FB-Bold.0001646411.ufo becomes Agency_FB-Bold"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-hex2char", 
            "text": "", 
            "title": "function hex2char"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-commastring2integerlist", 
            "text": "", 
            "title": "function commaString2IntegerList"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-obj2styleid", 
            "text": "Make sure s is styleId format, other recursively transform into string with space separators.\nParts can be CSS-like #id and .class identifiers.\nNote that this may change in the future if more compatibility with CSS is necessary.", 
            "title": "function obj2StyleId"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-writeunicodes", 
            "text": "Takes a list of unicode strings and returns a list of robofab-friendly integers.", 
            "title": "function writeUnicodes"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-interpolate", 
            "text": "Answer the interpolated value of factor v between a and b. If doRound is True (default is False), then\nround the result before answering it.", 
            "title": "function interpolate"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-bool2int", 
            "text": "", 
            "title": "function bool2Int"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2parentpath", 
            "text": "path2ParentPath('/xxx/yyy/zzz/')\n'/xxx/yyy/zzz'  path2ParentPath('/xxx/yyy/zzz')\n'/xxx/yyy'  path2ParentPath('/xxx/yyy/zzz.gif')\n'/xxx/yyy'", 
            "title": "function path2ParentPath"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-field2floq", 
            "text": "", 
            "title": "function field2Floq"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asintorvalue", 
            "text": "", 
            "title": "function asIntOrValue"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-isuniquelist", 
            "text": "", 
            "title": "function isUniqueList"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-obj2styleids", 
            "text": "", 
            "title": "function obj2StyleIds"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#whitespace", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "WHITESPACE"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asnumber", 
            "text": "", 
            "title": "function asNumber"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-list2spacedstring", 
            "text": "", 
            "title": "function list2SpacedString"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-string2wordskey", 
            "text": "", 
            "title": "function string2WordsKey"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#plainwords", 
            "text": "Compiled regular expression objects", 
            "title": "PLAINWORDS"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-arabic2romannumerals", 
            "text": "Return the roman numeral representing n. Should work for n in (1, 4999). Borrowed from Nick Montfort.", 
            "title": "function arabic2RomanNumerals"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-words2wordskey", 
            "text": "", 
            "title": "function words2WordsKey"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asformatted", 
            "text": "", 
            "title": "function asFormatted"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-strippedstring", 
            "text": "", 
            "title": "function strippedString"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-value2fixed", 
            "text": "", 
            "title": "function value2Fixed"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-bash", 
            "text": "Runs a command in the bash shell.", 
            "title": "function bash"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-floq2field", 
            "text": "", 
            "title": "function floq2Field"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-idcommastring2idset", 
            "text": "Transform a string with comma separated items into a set of id integers.", 
            "title": "function idCommaString2IdSet"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-lessgreen", 
            "text": "", 
            "title": "function lessGreen"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-json2dict", 
            "text": "", 
            "title": "function json2Dict"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asid", 
            "text": "The  asId  method transforms the  value  attribute either to an instance of @\nlong@ or to @None@, so it can be used as  id  field in a @Record@\ninstance. If the value cannot be converted, then the optional  default  (default value is @0\n@) is answered.", 
            "title": "function asId"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2id", 
            "text": "Answer the unique record/adapter ID of the font/style. This can be the unique database record id\nor the unique file path. For now we just answer the file path.", 
            "title": "function font2ID"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-pointoffset", 
            "text": "Answer new 3D point, shifted by offset.", 
            "title": "function pointOffset"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-list2json", 
            "text": "", 
            "title": "function list2Json"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-hex2dec", 
            "text": "", 
            "title": "function hex2dec"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2filename", 
            "text": "Answer the font file name. In case of a new unsaved font,\nanswer  \"Untitled\" .", 
            "title": "function font2FileName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2name", 
            "text": "", 
            "title": "function font2Name"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-seconds2date", 
            "text": "Answer TTF seconds converted to a datetime instance.", 
            "title": "function seconds2Date"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asint", 
            "text": "", 
            "title": "function asInt"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-darker", 
            "text": "", 
            "title": "function darker"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-path2fontid", 
            "text": "Answers the font ID for the font associated with this path. If the path does not exist, or if the font name\nis invalid, then answer None.", 
            "title": "function path2FontId"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-list2commastring", 
            "text": "", 
            "title": "function list2CommaString"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asroundedorzerostring", 
            "text": "", 
            "title": "function asRoundedOrZeroString"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-stringlist2strippedlist", 
            "text": "", 
            "title": "function stringList2StrippedList"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-filtervalue2int", 
            "text": "Filter all numeric characters from the string and answer the resulting integer.\nAnswer 0 if no digits are found. If s is already a number, then answer it as rounded int.", 
            "title": "function filterValue2Int"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-uniqueid", 
            "text": "", 
            "title": "function uniqueID"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-formatbinaryforttx", 
            "text": "", 
            "title": "function formatBinaryForTTX"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-isint", 
            "text": "", 
            "title": "function isInt"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-isuniquedict", 
            "text": "", 
            "title": "function isUniqueDict"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2familyid", 
            "text": "Answer the unique record/adapter ID of the family of  font . This can be the unique database\nrecord id of the font parent or the unique directory path of the font. For now we just answer the\nthe location of the family plist file.\nSpecial situation is if the font is not saved yet. In that case it does not have a path.", 
            "title": "function font2FamilyID"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-dict2json", 
            "text": "", 
            "title": "function dict2Json"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-dec2hex", 
            "text": "", 
            "title": "function dec2hex"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-shrink", 
            "text": "", 
            "title": "function shrink"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-lessred", 
            "text": "", 
            "title": "function lessRed"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-date2seconds", 
            "text": "Answer the datetime converted to TTF seconds.", 
            "title": "function date2Seconds"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asroundedint", 
            "text": "", 
            "title": "function asRoundedInt"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asdict", 
            "text": "Answer the value as dict as root. If the value itself is not a dict,\nanswer it as dict(value=value). For lower levels than root, answer\nthe plain value if is it a string or a number. Basic classed don't get\ntranslated when not called as root.\nAll other objects are called by value.asDict()\nIf the object cannot handle that method, then convert it to string.", 
            "title": "function asDict"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-json2list", 
            "text": "", 
            "title": "function json2List"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2path", 
            "text": "", 
            "title": "function font2Path"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-index2pointid", 
            "text": "", 
            "title": "function index2PointId"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-lessblue", 
            "text": "", 
            "title": "function lessBlue"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-font2stylename", 
            "text": "", 
            "title": "function font2StyleName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-asbool", 
            "text": "", 
            "title": "function asBool"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-fontname2familyname", 
            "text": "For now take the chunk up till \"-\" in the filename and ignore the family name as set in the font.info\nAlso make sure that the extension is removed, if the font has no \"-\" it isn't name. Relay-Medium_Italic.ufo\nbecomes Relay. ThisFont.ufo becomes ThisFont.", 
            "title": "function fontName2FamilyName"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#roman_numeral_values", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "ROMAN_NUMERAL_VALUES"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-int2bool", 
            "text": "", 
            "title": "function int2Bool"
        }, 
        {
            "location": "/pagebot/toolbox/transformer/#function-module2path", 
            "text": "", 
            "title": "function module2Path"
        }, 
        {
            "location": "/pagebot/fonttoolbox/", 
            "text": "fonttoolbox\n\n\nClasses\n\n\n\n\npagebot.fonttoolbox.designspacemodel\n\n\npagebot.fonttoolbox.otlTools\n\n\npagebot.fonttoolbox.svg2drawbot\n\n\npagebot.fonttoolbox.ttftools\n\n\npagebot.fonttoolbox.varfontdesignspace\n\n\npagebot.fonttoolbox.variablefontbuilder\n\n\n\n\nModules\n\n\n\n\npagebot.fonttoolbox.analyzers\n\n\npagebot.fonttoolbox.objects\n\n\npagebot.fonttoolbox.unicodes\n\n\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/fonttoolbox/#fonttoolbox", 
            "text": "", 
            "title": "fonttoolbox"
        }, 
        {
            "location": "/pagebot/fonttoolbox/#classes", 
            "text": "pagebot.fonttoolbox.designspacemodel  pagebot.fonttoolbox.otlTools  pagebot.fonttoolbox.svg2drawbot  pagebot.fonttoolbox.ttftools  pagebot.fonttoolbox.varfontdesignspace  pagebot.fonttoolbox.variablefontbuilder", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/#modules", 
            "text": "pagebot.fonttoolbox.analyzers  pagebot.fonttoolbox.objects  pagebot.fonttoolbox.unicodes", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/fonttoolbox/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/designspacemodel/", 
            "text": "fonttoolbox.designspacemodel\n\n\nFunctions\n\n\ndivision\n\n\nDesignSpaceBase\n\n\nAxis", 
            "title": "Designspacemodel"
        }, 
        {
            "location": "/pagebot/fonttoolbox/designspacemodel/#fonttoolboxdesignspacemodel", 
            "text": "", 
            "title": "fonttoolbox.designspacemodel"
        }, 
        {
            "location": "/pagebot/fonttoolbox/designspacemodel/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/designspacemodel/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/fonttoolbox/designspacemodel/#designspacebase", 
            "text": "", 
            "title": "DesignSpaceBase"
        }, 
        {
            "location": "/pagebot/fonttoolbox/designspacemodel/#axis", 
            "text": "", 
            "title": "Axis"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/", 
            "text": "fonttoolbox.otlTools\n\n\nFunctions\n\n\nfunction findAlternateGlyphsAndFeatures\n\n\nFind all alternate glyphs that can be accessed through GSUB features, listing which\nfeature(s) may trigger the substitution.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n font = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))\n\n mapping = findAlternateGlyphsAndFeatures(font[\"GSUB\"])\n\n mapping['one']\n[(('lnum',), 'one.lf'), (('tnum',), 'one.tosf')]\n\n\n mapping['one.lf']\n[(('onum',), 'one'), (('tnum',), 'one.tlf')]\n\n\n mapping['zero']\n[(('lnum',), 'zero.lf'), (('tnum',), 'zero.tosf'), (('zero',), 'zeroslash')]\n\n\n mapping['zeroslash']\n[(('lnum',), 'zeroslash.lf'), (('tnum',), 'zeroslash.tosf')]\n\n\n font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))\n\n mapping = findAlternateGlyphsAndFeatures(font[\"GSUB\"])\n\n mapping['one']\n[(('ccmp', 'zz60'), 'glyph04495'), (('frac', 'zz27'), 'onehalf'), (('frac', 'zz27'), 'onequarter'), (('frac', 'zz42'), 'glyph03298'), (('frac', 'zz43'), 'glyph00240'), (('onum', 'zz44'), 'glyph03268'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03278'), (('salt', 'ss01', 'zz55'), 'glyph03288'), (('ss18', 'zz52'), 'glyph04281'), (('subs', 'zz22'), 'uni2081'), (('sups', 'zz23'), 'uni00B9')]\n\n\n mapping['four']\n[(('ccmp', 'zz60'), 'glyph04498'), (('frac', 'zz27'), 'onequarter'), (('frac', 'zz27'), 'threequarters'), (('frac', 'zz42'), 'glyph03301'), (('frac', 'zz43'), 'glyph00568'), (('onum', 'zz44'), 'glyph03271'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03281'), (('salt', 'ss01', 'zz55'), 'glyph03291'), (('subs', 'zz22'), 'uni2084'), (('sups', 'zz23'), 'uni2074')]\n\n\n mapping['glyph02954']\n[(('dlig', 'zz28'), 'uni05B9'), (('dlig', 'zz28'), 'uni05DC')]\n\n\n mapping['glyph03901']\n[(('calt', 'zz18'), 'glyph04025'), (('calt', 'zz18'), 'glyph04026')]\n\n\n font = TTFont(getFontPath(\"ProW6.otf\"))\n\n mapping = findAlternateGlyphsAndFeatures(font[\"GSUB\"])\n\n mapping['cid02946']\n[(('aalt', 'trad'), 'cid04470'), (('dlig',), 'cid08322'), (('dlig',), 'cid12051')]\n\n\n\nfunction _mergeLangSys\n\n\nfunction _findScript\n\n\nAlternateGlyphAndFeatureFinder\n\n\nFind all alternate glyphs that can be accessed through any feature that uses SingleSubst.\n\n\nfunction _test\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n from cStringIO import StringIO\n\n font = TTFont(getFontPath(\"ProW6.otf\"))\n\n alts = sorted(findAlternateGlyphs(font[\"GSUB\"], [\"cid00962\"]))\n\n len(alts)\n28\n\n\n alts[:10]\n['cid00361', 'cid00962', 'cid08031', 'cid08032', 'cid08033', 'cid08036', 'cid08306', 'cid09119', 'cid10096', 'cid10431']\n\n\n font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))\n\n findNestedLookups(font[\"GPOS\"])\n[33, 34, 35, 36, 37, 38, 39, 40]\n\n\n findNestedLookups(font[\"GSUB\"])\n[78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88]\n\n\n sorted(findAlternateGlyphs(font[\"GSUB\"], [\"a\"]))\n['glyph03307']\n\n\n sorted(findAlternateGlyphs(font[\"GSUB\"], [\"uni0652\"]))\n['glyph03690']\n\n\n font = TTFont(getFontPath(\"Arial Unicode.ttf\"))\n\n alts = sorted(findAlternateGlyphs(font[\"GSUB\"], [\"glyph07332\"]))\n\n len(alts)\n191\n\n\n alts[:10]\n['glyph06956', 'glyph06964', 'glyph06967', 'glyph06968', 'glyph06970', 'glyph06971', 'glyph06972', 'glyph06974', 'glyph06979', 'glyph06989']\n\n\n findNestedLookups(font[\"GPOS\"])\n[3, 4, 5, 11, 12, 13, 16, 18, 20]\n\n\n findNestedLookups(font[\"GSUB\"])\n[25, 27, 28, 33, 34, 35, 36, 37, 38, 41, 43, 45, 52, 53, 54, 58, 69, 71, 73, 77, 78, 79, 80, 82, 83, 93, 100, 101, 103, 107]\n\n\n deleteGlyphs(font[\"GPOS\"], _testGlyphsToDelete)\n\n deleteGlyphs(font[\"GSUB\"], _testGlyphsToDelete)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n23270144\n\n\n font = TTFont(getFontPath(\"Arial Unicode.ttf\"))\n\n glyphsToDelete = font.getGlyphOrder()[800:]\n\n deleteGlyphs(font[\"GPOS\"], glyphsToDelete)\n\n deleteGlyphs(font[\"GSUB\"], glyphsToDelete)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n23203484\n\n\n font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))\n\n deleteGlyphs(font[\"GPOS\"], _testGlyphsToDelete)\n\n deleteGlyphs(font[\"GSUB\"], _testGlyphsToDelete)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n5090236\n\n\n font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))\n\n glyphsToDelete = font.getGlyphOrder()[800:]\n\n deleteGlyphs(font[\"GPOS\"], glyphsToDelete)\n\n deleteGlyphs(font[\"GSUB\"], glyphsToDelete)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n5025328\n\n\n font = TTFont(getFontPath(\"ProW6.otf\"))\n\n deleteGlyphs(font[\"GPOS\"], _testGlyphsToDelete)\n\n deleteGlyphs(font[\"GSUB\"], _testGlyphsToDelete)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n8834668\n\n\n font = TTFont(getFontPath(\"ProW6.otf\"))\n\n glyphsToDelete = font.getGlyphOrder()[800:]\n\n deleteGlyphs(font[\"GPOS\"], glyphsToDelete)\n\n deleteGlyphs(font[\"GSUB\"], glyphsToDelete)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n8468992\n\n\n\nfunction _remapNestedLookups\n\n\nGo through all the lookups and remap the references (indices) to other lookups.\n\n\nfunction _calcClassDefDeletionAndRemap\n\n\n _calcClassDefDeletionAndRemap(set([1, 2, 3]), set([1, 2, 3]))\n([], {0: 0, 1: 1, 2: 2, 3: 3})\n\n\n _calcClassDefDeletionAndRemap(set([1, 2, 3]), set([1, 3]))\n([2], {0: 0, 1: 1, 3: 2})\n\n\n _calcClassDefDeletionAndRemap(set([1, 2, 3, 4, 5, 6]), set([1, 3, 4, 6]))\n([5, 2], {0: 0, 1: 1, 3: 2, 4: 3, 6: 4})\n\n\n _calcClassDefDeletionAndRemap(set([1, 2, 3, 4, 5, 6]), set([]))\n([6, 5, 4, 3, 2, 1], {0: 0})\n\n\n _calcClassDefDeletionAndRemap(set([0, 1, 2, 3]), set([1, 2]))\n([3, 0], {1: 0, 2: 1})\n\n\n _calcClassDefDeletionAndRemap(set([0, 1, 2, 3]), set([]))\n([3, 2, 1, 0], {})\n\n\n _calcClassDefDeletionAndRemap(set([]), set([]))\n([], {})\n\n\n\nGlyphDeleter\n\n\nfunction scaleGpos\n\n\nScale all values in the GPOS table that are in design units.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"SegoeUI-Regular-All.ttf\")\n\n f = TTFont(path)\n\n scaleGpos(f[\"GPOS\"], 0.5)\n\n\n\nfunction _remapAndDeleteIndices\n\n\n _remapAndDeleteIndices(range(6), {})\n[]\n\n\n _remapAndDeleteIndices(range(6), {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5})\n[0, 1, 2, 3, 4, 5]\n\n\n _remapAndDeleteIndices(range(6), {0: 0, 1: 1, 2: 2, 4: 3, 5: 4})\n[0, 1, 2, 3, 4]\n\n\n _remapAndDeleteIndices([5, 1, 3, 2, 2, 1, 4, 4, 0], {0: 0, 1: 1, 2: 2, 4: 3, 5: 4})\n[4, 1, 2, 2, 1, 3, 3, 0]\n\n\n\nfunction findAlternateGlyphs\n\n\nGiven a set of input glyph names, return the set of possible output glyphs,\nas the result of GSUB glyph substitutions.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n font = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))\n\n sorted(findAlternateGlyphs(font[\"GSUB\"], [\"f\"]))\n['f_f', 'f_f_i', 'f_f_ij', 'f_f_l', 'f_i', 'f_ij', 'f_l']\n\n\n font = TTFont(getFontPath(\"SaunaPro-RegularItalicMerged.ttf\"))\n\n sorted(findAlternateGlyphs(font[\"GSUB\"], [\"e\"]))\n['e.swash']\n\n\n sorted(findAlternateGlyphs(font[\"GSUB\"], [\"f\"]))\n['f.swash', 'f_b.swash', 'f_f', 'f_f.swash', 'f_f_i', 'f_f_i.swash', 'f_f_ij', 'f_f_ij.swash', 'f_f_l', 'f_f_l.swash', 'f_i', 'f_i.swash', 'f_ij', 'f_ij.swash', 'f_j.swash', 'f_k.swash', 'f_l', 'f_l.swash', 'f_t.swash']\n\n\n\nfunction mergeFeatures\n\n\nMerge the features from table2 into table1. Note this is destructive also for table2.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n font1 = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))\n\n font2 = TTFont(getFontPath(\"SaunaPro-RegularItalicSwash.ttf\"))\n\n mergeFeatures(font1[\"GPOS\"], font2[\"GPOS\"])\n\n mergeFeatures(font1[\"GSUB\"], font2[\"GSUB\"])\n\n\n\n_testGlyphsToDelete\n\n\nlist() -\n new empty list\nlist(iterable) -\n new list initialized from iterable's items\n\n\nfunction deleteGlyphs\n\n\nDelete all references to the glyphs named in the glyphNames set. Lookups,\nfeatures, language systems and scripts that become dysfunctional because of\nthat will also be deleted.\n\n\nfunction _printPairPosFormat2Matrix\n\n\nNestedLookupFinderAndRemapper\n\n\nfunction _getClassesFromClassDef\n\n\nfunction remapLookups\n\n\nfunction _remapLookupsAndPruneFeatures\n\n\nGo through the feature list and remap or remove lookup indices. If a feature\nbecomes empty, delete it from the feature list. Return a dictionary mapping the\nold feature indices to the new feature indices, for remapping the features in\nthe scripts.\n\n\nfunction _remapLangSys\n\n\nfunction _remapFeaturesAndPruneScripts\n\n\nGo through the scripts list, and remap or delete feature indices. If a script\nbecomes empty, delete it.\n\n\nObjectIdSet\n\n\nA set object using object id's for comparison and hashing. We use this to\nmaintain a set of lookup subtables, which unfortunately aren't hashable, yet\nare unique objects.\nOnly supports a minimal subset of the set protocol.\n\n\n a = []\n\n b = []\n\n a == b\nTrue\n\n\n a is b\nFalse\n\n\n s = ObjectIdSet()\n\n s.add(a)\n\n s\nObjectIdSet([[]])\n\n\n a in s\nTrue\n\n\n b in s\nFalse\n\n\n s.add(a)\n\n s\nObjectIdSet([[]])\n\n\n s.add(b)\n\n s\nObjectIdSet([[], []])\n\n\n len(s)\n2\n\n\n a in s\nTrue\n\n\n b in s\nTrue\n\n\n [] in s\nFalse\n\n\n list(s)\n[[], []]\n\n\n s = ObjectIdSet([1, 2, 4, 8])\n\n sorted(s)\n[1, 2, 4, 8]\n\n\n s.update([16, 32, 64])\n\n sorted(s)\n[1, 2, 4, 8, 16, 32, 64]\n\n\n\nfunction _findDuplicateFeatureTypes\n\n\nLookupTypeFinder\n\n\nfunction _mergeLists\n\n\nAlternateGlyphFinder\n\n\nfunction findSingleSubstAlts\n\n\nFind the alternate glyphs that can be accessed through any direct (non-contextual)\nGSUB SingleSubst features, listing which feature(s) may trigger the substitution.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n font = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))\n\n mapping = findSingleSubstAlts(font[\"GSUB\"])\n\n mapping['one']\n[(('lnum',), 'one.lf'), (('tnum',), 'one.tosf')]\n\n\n mapping['one.lf']\n[(('onum',), 'one'), (('tnum',), 'one.tlf')]\n\n\n mapping['zero']\n[(('lnum',), 'zero.lf'), (('tnum',), 'zero.tosf'), (('zero',), 'zeroslash')]\n\n\n mapping[\"zeroslash\"]\n[(('lnum',), 'zeroslash.lf'), (('tnum',), 'zeroslash.tosf')]\n\n\n font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))\n\n mapping = findSingleSubstAlts(font[\"GSUB\"])\n\n mapping['one']\n[(('frac', 'zz43'), 'glyph00240'), (('onum', 'zz44'), 'glyph03268'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03278'), (('salt', 'ss01', 'zz55'), 'glyph03288'), (('subs', 'zz22'), 'uni2081'), (('sups', 'zz23'), 'uni00B9')]\n\n\n mapping['four']\n[(('frac', 'zz43'), 'glyph00568'), (('onum', 'zz44'), 'glyph03271'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03281'), (('salt', 'ss01', 'zz55'), 'glyph03291'), (('subs', 'zz22'), 'uni2084'), (('sups', 'zz23'), 'uni2074')]\n\n\n mapping['glyph03901']\nTraceback (most recent call last):\n\n\n\n...\nKeyError: 'glyph03901'\n\n\nfunction findNestedLookups\n\n\nReturn a list of lookup indices for lookups that are referenced from\nwithin other lookups. (As opposed to directly from features.)\n\n\nfunction _runDocTests\n\n\nLookupTraverser\n\n\nLookupTraverser provides a tiny framework to dispatch operations to methods\n(to be implemented by the subclass) specialized for specific lookup types.\n\n\nA LookupTraverser will just contain a reference to a FontTools OTL table instance,\nbut otherwise keep no state.\n\n\nclass MyLookupWorker(LookupTraverser):\n\n\ndef myAction(self, argument):\nreturn self.traverseLookups(\"myAction\", argument)\n\n\ndef myAction_AlternateSubstFormat1(self, subTable, argument):\n\n\nhandle specifics for \"myAction\" for AlternateSubstFormat1\n\n\n...\n\n\nreturn None # or a list; traverseLookups() will return all returned lists combined as one.\n\n\nfunction _findLanguage\n\n\nfunction findLookupTypes\n\n\nReturn the list of lookup types that a specific OTL table uses.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n f = TTFont(getFontPath(\"ProW6.otf\"))\n\n findLookupTypes(f[\"GPOS\"])\n['PairPosFormat1', 'SinglePosFormat2']\n\n\n findLookupTypes(f[\"GSUB\"])\n['AlternateSubstFormat1', 'LigatureSubstFormat1', 'SingleSubstFormat2']\n\n\n f = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))\n\n findLookupTypes(f[\"GPOS\"])\n['ChainContextPosFormat3', 'MarkBasePosFormat1', 'MarkLigPosFormat1', 'MarkMarkPosFormat1', 'PairPosFormat1', 'PairPosFormat2', 'SinglePosFormat1', 'SinglePosFormat2']\n\n\n findLookupTypes(f[\"GSUB\"])\n['ChainContextSubstFormat3', 'LigatureSubstFormat1', 'MultipleSubstFormat1', 'SingleSubstFormat2']\n\n\n\nfunction remapFeatures\n\n\nGposScaler\n\n\nfunction _pruneLookups\n\n\nGo through the lookup list and remove the lookups that are in the deadLookups\nset. Return a dictionary that maps the old lookup indices to the new, for remapping\nthe lookup indices used in features and in other lookups.\n\n\nfunction _remapClassDefs\n\n\nfunction sortFeatureList\n\n\nSort the feature list by feature tag, and remap the feature indices\nelsewhere. This is needed after the feature list has been modified.", 
            "title": "otlTools"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#fonttoolboxotltools", 
            "text": "", 
            "title": "fonttoolbox.otlTools"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-findalternateglyphsandfeatures", 
            "text": "Find all alternate glyphs that can be accessed through GSUB features, listing which\nfeature(s) may trigger the substitution.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  font = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))  mapping = findAlternateGlyphsAndFeatures(font[\"GSUB\"])  mapping['one']\n[(('lnum',), 'one.lf'), (('tnum',), 'one.tosf')]  mapping['one.lf']\n[(('onum',), 'one'), (('tnum',), 'one.tlf')]  mapping['zero']\n[(('lnum',), 'zero.lf'), (('tnum',), 'zero.tosf'), (('zero',), 'zeroslash')]  mapping['zeroslash']\n[(('lnum',), 'zeroslash.lf'), (('tnum',), 'zeroslash.tosf')]  font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))  mapping = findAlternateGlyphsAndFeatures(font[\"GSUB\"])  mapping['one']\n[(('ccmp', 'zz60'), 'glyph04495'), (('frac', 'zz27'), 'onehalf'), (('frac', 'zz27'), 'onequarter'), (('frac', 'zz42'), 'glyph03298'), (('frac', 'zz43'), 'glyph00240'), (('onum', 'zz44'), 'glyph03268'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03278'), (('salt', 'ss01', 'zz55'), 'glyph03288'), (('ss18', 'zz52'), 'glyph04281'), (('subs', 'zz22'), 'uni2081'), (('sups', 'zz23'), 'uni00B9')]  mapping['four']\n[(('ccmp', 'zz60'), 'glyph04498'), (('frac', 'zz27'), 'onequarter'), (('frac', 'zz27'), 'threequarters'), (('frac', 'zz42'), 'glyph03301'), (('frac', 'zz43'), 'glyph00568'), (('onum', 'zz44'), 'glyph03271'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03281'), (('salt', 'ss01', 'zz55'), 'glyph03291'), (('subs', 'zz22'), 'uni2084'), (('sups', 'zz23'), 'uni2074')]  mapping['glyph02954']\n[(('dlig', 'zz28'), 'uni05B9'), (('dlig', 'zz28'), 'uni05DC')]  mapping['glyph03901']\n[(('calt', 'zz18'), 'glyph04025'), (('calt', 'zz18'), 'glyph04026')]  font = TTFont(getFontPath(\"ProW6.otf\"))  mapping = findAlternateGlyphsAndFeatures(font[\"GSUB\"])  mapping['cid02946']\n[(('aalt', 'trad'), 'cid04470'), (('dlig',), 'cid08322'), (('dlig',), 'cid12051')]", 
            "title": "function findAlternateGlyphsAndFeatures"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_mergelangsys", 
            "text": "", 
            "title": "function _mergeLangSys"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_findscript", 
            "text": "", 
            "title": "function _findScript"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#alternateglyphandfeaturefinder", 
            "text": "Find all alternate glyphs that can be accessed through any feature that uses SingleSubst.", 
            "title": "AlternateGlyphAndFeatureFinder"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_test", 
            "text": "from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  from cStringIO import StringIO  font = TTFont(getFontPath(\"ProW6.otf\"))  alts = sorted(findAlternateGlyphs(font[\"GSUB\"], [\"cid00962\"]))  len(alts)\n28  alts[:10]\n['cid00361', 'cid00962', 'cid08031', 'cid08032', 'cid08033', 'cid08036', 'cid08306', 'cid09119', 'cid10096', 'cid10431']  font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))  findNestedLookups(font[\"GPOS\"])\n[33, 34, 35, 36, 37, 38, 39, 40]  findNestedLookups(font[\"GSUB\"])\n[78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88]  sorted(findAlternateGlyphs(font[\"GSUB\"], [\"a\"]))\n['glyph03307']  sorted(findAlternateGlyphs(font[\"GSUB\"], [\"uni0652\"]))\n['glyph03690']  font = TTFont(getFontPath(\"Arial Unicode.ttf\"))  alts = sorted(findAlternateGlyphs(font[\"GSUB\"], [\"glyph07332\"]))  len(alts)\n191  alts[:10]\n['glyph06956', 'glyph06964', 'glyph06967', 'glyph06968', 'glyph06970', 'glyph06971', 'glyph06972', 'glyph06974', 'glyph06979', 'glyph06989']  findNestedLookups(font[\"GPOS\"])\n[3, 4, 5, 11, 12, 13, 16, 18, 20]  findNestedLookups(font[\"GSUB\"])\n[25, 27, 28, 33, 34, 35, 36, 37, 38, 41, 43, 45, 52, 53, 54, 58, 69, 71, 73, 77, 78, 79, 80, 82, 83, 93, 100, 101, 103, 107]  deleteGlyphs(font[\"GPOS\"], _testGlyphsToDelete)  deleteGlyphs(font[\"GSUB\"], _testGlyphsToDelete)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n23270144  font = TTFont(getFontPath(\"Arial Unicode.ttf\"))  glyphsToDelete = font.getGlyphOrder()[800:]  deleteGlyphs(font[\"GPOS\"], glyphsToDelete)  deleteGlyphs(font[\"GSUB\"], glyphsToDelete)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n23203484  font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))  deleteGlyphs(font[\"GPOS\"], _testGlyphsToDelete)  deleteGlyphs(font[\"GSUB\"], _testGlyphsToDelete)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n5090236  font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))  glyphsToDelete = font.getGlyphOrder()[800:]  deleteGlyphs(font[\"GPOS\"], glyphsToDelete)  deleteGlyphs(font[\"GSUB\"], glyphsToDelete)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n5025328  font = TTFont(getFontPath(\"ProW6.otf\"))  deleteGlyphs(font[\"GPOS\"], _testGlyphsToDelete)  deleteGlyphs(font[\"GSUB\"], _testGlyphsToDelete)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n8834668  font = TTFont(getFontPath(\"ProW6.otf\"))  glyphsToDelete = font.getGlyphOrder()[800:]  deleteGlyphs(font[\"GPOS\"], glyphsToDelete)  deleteGlyphs(font[\"GSUB\"], glyphsToDelete)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n8468992", 
            "title": "function _test"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_remapnestedlookups", 
            "text": "Go through all the lookups and remap the references (indices) to other lookups.", 
            "title": "function _remapNestedLookups"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_calcclassdefdeletionandremap", 
            "text": "_calcClassDefDeletionAndRemap(set([1, 2, 3]), set([1, 2, 3]))\n([], {0: 0, 1: 1, 2: 2, 3: 3})  _calcClassDefDeletionAndRemap(set([1, 2, 3]), set([1, 3]))\n([2], {0: 0, 1: 1, 3: 2})  _calcClassDefDeletionAndRemap(set([1, 2, 3, 4, 5, 6]), set([1, 3, 4, 6]))\n([5, 2], {0: 0, 1: 1, 3: 2, 4: 3, 6: 4})  _calcClassDefDeletionAndRemap(set([1, 2, 3, 4, 5, 6]), set([]))\n([6, 5, 4, 3, 2, 1], {0: 0})  _calcClassDefDeletionAndRemap(set([0, 1, 2, 3]), set([1, 2]))\n([3, 0], {1: 0, 2: 1})  _calcClassDefDeletionAndRemap(set([0, 1, 2, 3]), set([]))\n([3, 2, 1, 0], {})  _calcClassDefDeletionAndRemap(set([]), set([]))\n([], {})", 
            "title": "function _calcClassDefDeletionAndRemap"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#glyphdeleter", 
            "text": "", 
            "title": "GlyphDeleter"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-scalegpos", 
            "text": "Scale all values in the GPOS table that are in design units.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"SegoeUI-Regular-All.ttf\")  f = TTFont(path)  scaleGpos(f[\"GPOS\"], 0.5)", 
            "title": "function scaleGpos"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_remapanddeleteindices", 
            "text": "_remapAndDeleteIndices(range(6), {})\n[]  _remapAndDeleteIndices(range(6), {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5})\n[0, 1, 2, 3, 4, 5]  _remapAndDeleteIndices(range(6), {0: 0, 1: 1, 2: 2, 4: 3, 5: 4})\n[0, 1, 2, 3, 4]  _remapAndDeleteIndices([5, 1, 3, 2, 2, 1, 4, 4, 0], {0: 0, 1: 1, 2: 2, 4: 3, 5: 4})\n[4, 1, 2, 2, 1, 3, 3, 0]", 
            "title": "function _remapAndDeleteIndices"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-findalternateglyphs", 
            "text": "Given a set of input glyph names, return the set of possible output glyphs,\nas the result of GSUB glyph substitutions.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  font = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))  sorted(findAlternateGlyphs(font[\"GSUB\"], [\"f\"]))\n['f_f', 'f_f_i', 'f_f_ij', 'f_f_l', 'f_i', 'f_ij', 'f_l']  font = TTFont(getFontPath(\"SaunaPro-RegularItalicMerged.ttf\"))  sorted(findAlternateGlyphs(font[\"GSUB\"], [\"e\"]))\n['e.swash']  sorted(findAlternateGlyphs(font[\"GSUB\"], [\"f\"]))\n['f.swash', 'f_b.swash', 'f_f', 'f_f.swash', 'f_f_i', 'f_f_i.swash', 'f_f_ij', 'f_f_ij.swash', 'f_f_l', 'f_f_l.swash', 'f_i', 'f_i.swash', 'f_ij', 'f_ij.swash', 'f_j.swash', 'f_k.swash', 'f_l', 'f_l.swash', 'f_t.swash']", 
            "title": "function findAlternateGlyphs"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-mergefeatures", 
            "text": "Merge the features from table2 into table1. Note this is destructive also for table2.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  font1 = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))  font2 = TTFont(getFontPath(\"SaunaPro-RegularItalicSwash.ttf\"))  mergeFeatures(font1[\"GPOS\"], font2[\"GPOS\"])  mergeFeatures(font1[\"GSUB\"], font2[\"GSUB\"])", 
            "title": "function mergeFeatures"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#_testglyphstodelete", 
            "text": "list() -  new empty list\nlist(iterable) -  new list initialized from iterable's items", 
            "title": "_testGlyphsToDelete"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-deleteglyphs", 
            "text": "Delete all references to the glyphs named in the glyphNames set. Lookups,\nfeatures, language systems and scripts that become dysfunctional because of\nthat will also be deleted.", 
            "title": "function deleteGlyphs"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_printpairposformat2matrix", 
            "text": "", 
            "title": "function _printPairPosFormat2Matrix"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#nestedlookupfinderandremapper", 
            "text": "", 
            "title": "NestedLookupFinderAndRemapper"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_getclassesfromclassdef", 
            "text": "", 
            "title": "function _getClassesFromClassDef"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-remaplookups", 
            "text": "", 
            "title": "function remapLookups"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_remaplookupsandprunefeatures", 
            "text": "Go through the feature list and remap or remove lookup indices. If a feature\nbecomes empty, delete it from the feature list. Return a dictionary mapping the\nold feature indices to the new feature indices, for remapping the features in\nthe scripts.", 
            "title": "function _remapLookupsAndPruneFeatures"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_remaplangsys", 
            "text": "", 
            "title": "function _remapLangSys"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_remapfeaturesandprunescripts", 
            "text": "Go through the scripts list, and remap or delete feature indices. If a script\nbecomes empty, delete it.", 
            "title": "function _remapFeaturesAndPruneScripts"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#objectidset", 
            "text": "A set object using object id's for comparison and hashing. We use this to\nmaintain a set of lookup subtables, which unfortunately aren't hashable, yet\nare unique objects.\nOnly supports a minimal subset of the set protocol.   a = []  b = []  a == b\nTrue  a is b\nFalse  s = ObjectIdSet()  s.add(a)  s\nObjectIdSet([[]])  a in s\nTrue  b in s\nFalse  s.add(a)  s\nObjectIdSet([[]])  s.add(b)  s\nObjectIdSet([[], []])  len(s)\n2  a in s\nTrue  b in s\nTrue  [] in s\nFalse  list(s)\n[[], []]  s = ObjectIdSet([1, 2, 4, 8])  sorted(s)\n[1, 2, 4, 8]  s.update([16, 32, 64])  sorted(s)\n[1, 2, 4, 8, 16, 32, 64]", 
            "title": "ObjectIdSet"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_findduplicatefeaturetypes", 
            "text": "", 
            "title": "function _findDuplicateFeatureTypes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#lookuptypefinder", 
            "text": "", 
            "title": "LookupTypeFinder"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_mergelists", 
            "text": "", 
            "title": "function _mergeLists"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#alternateglyphfinder", 
            "text": "", 
            "title": "AlternateGlyphFinder"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-findsinglesubstalts", 
            "text": "Find the alternate glyphs that can be accessed through any direct (non-contextual)\nGSUB SingleSubst features, listing which feature(s) may trigger the substitution.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  font = TTFont(getFontPath(\"SaunaPro-RegularItalic.ttf\"))  mapping = findSingleSubstAlts(font[\"GSUB\"])  mapping['one']\n[(('lnum',), 'one.lf'), (('tnum',), 'one.tosf')]  mapping['one.lf']\n[(('onum',), 'one'), (('tnum',), 'one.tlf')]  mapping['zero']\n[(('lnum',), 'zero.lf'), (('tnum',), 'zero.tosf'), (('zero',), 'zeroslash')]  mapping[\"zeroslash\"]\n[(('lnum',), 'zeroslash.lf'), (('tnum',), 'zeroslash.tosf')]  font = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))  mapping = findSingleSubstAlts(font[\"GSUB\"])  mapping['one']\n[(('frac', 'zz43'), 'glyph00240'), (('onum', 'zz44'), 'glyph03268'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03278'), (('salt', 'ss01', 'zz55'), 'glyph03288'), (('subs', 'zz22'), 'uni2081'), (('sups', 'zz23'), 'uni00B9')]  mapping['four']\n[(('frac', 'zz43'), 'glyph00568'), (('onum', 'zz44'), 'glyph03271'), (('pnum', 'salt', 'ss20', 'zz46', 'zz54'), 'glyph03281'), (('salt', 'ss01', 'zz55'), 'glyph03291'), (('subs', 'zz22'), 'uni2084'), (('sups', 'zz23'), 'uni2074')]  mapping['glyph03901']\nTraceback (most recent call last):  ...\nKeyError: 'glyph03901'", 
            "title": "function findSingleSubstAlts"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-findnestedlookups", 
            "text": "Return a list of lookup indices for lookups that are referenced from\nwithin other lookups. (As opposed to directly from features.)", 
            "title": "function findNestedLookups"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_rundoctests", 
            "text": "", 
            "title": "function _runDocTests"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#lookuptraverser", 
            "text": "LookupTraverser provides a tiny framework to dispatch operations to methods\n(to be implemented by the subclass) specialized for specific lookup types.  A LookupTraverser will just contain a reference to a FontTools OTL table instance,\nbut otherwise keep no state.  class MyLookupWorker(LookupTraverser):  def myAction(self, argument):\nreturn self.traverseLookups(\"myAction\", argument)  def myAction_AlternateSubstFormat1(self, subTable, argument):", 
            "title": "LookupTraverser"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#handle-specifics-for-myaction-for-alternatesubstformat1", 
            "text": "", 
            "title": "handle specifics for \"myAction\" for AlternateSubstFormat1"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#_1", 
            "text": "return None # or a list; traverseLookups() will return all returned lists combined as one.", 
            "title": "..."
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_findlanguage", 
            "text": "", 
            "title": "function _findLanguage"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-findlookuptypes", 
            "text": "Return the list of lookup types that a specific OTL table uses.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  f = TTFont(getFontPath(\"ProW6.otf\"))  findLookupTypes(f[\"GPOS\"])\n['PairPosFormat1', 'SinglePosFormat2']  findLookupTypes(f[\"GSUB\"])\n['AlternateSubstFormat1', 'LigatureSubstFormat1', 'SingleSubstFormat2']  f = TTFont(getFontPath(\"SegoeUI-Regular-All.ttf\"))  findLookupTypes(f[\"GPOS\"])\n['ChainContextPosFormat3', 'MarkBasePosFormat1', 'MarkLigPosFormat1', 'MarkMarkPosFormat1', 'PairPosFormat1', 'PairPosFormat2', 'SinglePosFormat1', 'SinglePosFormat2']  findLookupTypes(f[\"GSUB\"])\n['ChainContextSubstFormat3', 'LigatureSubstFormat1', 'MultipleSubstFormat1', 'SingleSubstFormat2']", 
            "title": "function findLookupTypes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-remapfeatures", 
            "text": "", 
            "title": "function remapFeatures"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#gposscaler", 
            "text": "", 
            "title": "GposScaler"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_prunelookups", 
            "text": "Go through the lookup list and remove the lookups that are in the deadLookups\nset. Return a dictionary that maps the old lookup indices to the new, for remapping\nthe lookup indices used in features and in other lookups.", 
            "title": "function _pruneLookups"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-_remapclassdefs", 
            "text": "", 
            "title": "function _remapClassDefs"
        }, 
        {
            "location": "/pagebot/fonttoolbox/otlTools/#function-sortfeaturelist", 
            "text": "Sort the feature list by feature tag, and remap the feature indices\nelsewhere. This is needed after the feature list has been modified.", 
            "title": "function sortFeatureList"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/", 
            "text": "fonttoolbox.svg2drawbot\n\n\nFunctions\n\n\nminidom\n\n\nSimple implementation of the Level 1 DOM.\n\n\nNamespaces and other minor Level 2 features are also supported.\n\n\nparse(\"foo.xml\")\n\n\nparseString(\"\n\")\n\n\nTodo:\n\n\n\n\nconvenience methods for getting elements and text.\n\n\nmore testing\n\n\nbring some of the writer and linearizer code into conformance with this\ninterface\n\n\nSAX 2 namespaces\n\n\n\n\nfunction addValueToPoints\n\n\nAdds the collected character string to the last coordinate in the points\nlist.\n\n\nfunction copyPoint\n\n\nDeep copies previous point.\n\n\nfunction parseSVG\n\n\nTakes a list of path strings and converts them to a list of SVG-command\ntuples.\n\n\nfunction reflect\n\n\nReflects off-curve control point in relation to on-curve one. Used for\nsmooth curves.\n\n\nfunction contourToPath\n\n\nConverts SVG contour to a path in DrawBot.\n\n\nNSPoint\n\n\nfunction getSvgPaths\n\n\nExtracts path strings from XML.\n\n\nfunction getRelative\n\n\nCalculates absolute coordinates by adding the previous point to the\nrelative coordinates.", 
            "title": "Svg2drawbot"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#fonttoolboxsvg2drawbot", 
            "text": "", 
            "title": "fonttoolbox.svg2drawbot"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#minidom", 
            "text": "Simple implementation of the Level 1 DOM.  Namespaces and other minor Level 2 features are also supported.  parse(\"foo.xml\")  parseString(\" \")", 
            "title": "minidom"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#todo", 
            "text": "convenience methods for getting elements and text.  more testing  bring some of the writer and linearizer code into conformance with this\ninterface  SAX 2 namespaces", 
            "title": "Todo:"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-addvaluetopoints", 
            "text": "Adds the collected character string to the last coordinate in the points\nlist.", 
            "title": "function addValueToPoints"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-copypoint", 
            "text": "Deep copies previous point.", 
            "title": "function copyPoint"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-parsesvg", 
            "text": "Takes a list of path strings and converts them to a list of SVG-command\ntuples.", 
            "title": "function parseSVG"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-reflect", 
            "text": "Reflects off-curve control point in relation to on-curve one. Used for\nsmooth curves.", 
            "title": "function reflect"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-contourtopath", 
            "text": "Converts SVG contour to a path in DrawBot.", 
            "title": "function contourToPath"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#nspoint", 
            "text": "", 
            "title": "NSPoint"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-getsvgpaths", 
            "text": "Extracts path strings from XML.", 
            "title": "function getSvgPaths"
        }, 
        {
            "location": "/pagebot/fonttoolbox/svg2drawbot/#function-getrelative", 
            "text": "Calculates absolute coordinates by adding the previous point to the\nrelative coordinates.", 
            "title": "function getRelative"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/", 
            "text": "fonttoolbox.ttftools\n\n\nFunctions\n\n\n_pat\n\n\nCompiled regular expression objects\n\n\nfunction findGlyphsByUnicode\n\n\nReturn the set of glyph names that are needed in the font to support the characters\nlisted in 'unicodes'. This includes substituted glyphs from GSUB features, as well as\nglyphs needed as components in composite glyphs.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"SegoeUI-Regular-All.ttf\")\n\n font = TTFont(path)\n\n sorted(findGlyphsByUnicode(font, [ord(\"a\"), ord(\"1\")]))\n['a', 'fraction', 'glyph00240', 'glyph00241', 'glyph00568', 'glyph03258', 'glyph03268', 'glyph03278', 'glyph03288', 'glyph03298', 'glyph03307', 'glyph04281', 'glyph04294', 'glyph04295', 'glyph04495', 'one', 'onehalf', 'onequarter', 'uni00B9', 'uni2081']\n\n\n findGlyphsByUnicode(font, [1, 2, 99999, ord(\"|\")])\nset(['bar'])\n\n\n font = TTFont(getFontPath(\"CusterRE-RegularS2.ttf\"))\n\n sorted(findGlyphsByUnicode(font, [224]))\n['a', 'agrave', 'grave']\n\n\n\nfunction findComponentGlyphs\n\n\nGiven a set of glyph names, return the set of glyphs that are used as components for these glyphs.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"SegoeUI-Regular-All.ttf\")\n\n font = TTFont(path)\n\n sorted(findComponentGlyphs(font, [\"aring\", \"agrave\", \"onehalf\"]))\n['a', 'fraction', 'glyph00240', 'glyph00241', 'grave', 'ring']\n\n\n sorted(findComponentGlyphs(font, [\"x\"]))\n[]\n\n\n sorted(findComponentGlyphs(font, [\"xyz\"]))\nTraceback (most recent call last):\n\n\n\n...\nKeyError: 'xyz'\n\n\n path = getFontPath(\"NestedComposites.ttf\")\n\n font = TTFont(path)\n\n sorted(findComponentGlyphs(font, [\"d\"]))\n['a', 'b', 'c']\n\n\n\nFontSubsetter\n\n\nfunction _setupMaxp\n\n\nfunction stripInstructions\n\n\nRemove all TrueType instructions from the font.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n byteCode = font[\"glyf\"][\"a\"].program.getBytecode()\n\n len(byteCode)\n58\n\n\n font.has_key(\"cvt \")\n1\n\n\n stripInstructions(font)\n\n byteCode = font[\"glyf\"][\"a\"].program.getBytecode()\n\n len(byteCode)\n0\n\n\n font.has_key(\"cvt \")\n0\n\n\n\nfunction setUnicodeRanges\n\n\nSet the OS/2 unicode range fields according to the cmap. It sets any bit\nthe cmap defines at least one character for.\n\n\nFontMerger\n\n\notlTools\n\n\nA collection of code to inspect and manipulate OpenType Layout features in a FontTools TTFont.\n\n\nfunction mergeFonts\n\n\nMerge all glyphs from otherFont into font. Glyphs from font B that are\npresent in font A will be ignored. If font B defines a code point that also\nexists in font A, the code point from font A will be kept, unless\noverWriteCodePoints is True.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n pathA = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n pathB = getFontPath(\"CusterRE-BoldS2.ttf\")\n\n fontA = TTFont(pathA)\n\n fontB = TTFont(pathB)\n\n def myGlyphNameFilter(glyphName, glyphID):\n... return glyphName + \".bold\"\n\n\n\n...\n\n\n patchGlyphNames(fontB, myGlyphNameFilter)\n\n glyphsToKeep = findGlyphsByUnicode(fontB, [ord(c) for c in \"ABCabc\"])\n\n sorted(glyphsToKeep)\n['A.bold', 'B.bold', 'C.bold', 'a.bold', 'b.bold', 'c.bold']\n\n\n subsetFont(fontB, set(fontB.getGlyphOrder()) - glyphsToKeep)\n\n mergeFonts(fontA, fontB)\n\n\n\nfunction _findComponentParentGlyphs\n\n\nReturn a list of glyph names that reference the named glyph as a component.\nNote that this function is VERY inefficient as it iterates through all the glyphs\nin the font. It should not be used in production code, but only for debugging.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n _findComponentParentGlyphs(font, \"a\")\n['aring', 'agrave', 'adieresis', 'atilde', 'acircumflex', 'aacute']\n\n\n\nfunction tagToIdentifier\n\n\nConvert a TT table tag into a Python identifier. Not as robust as fontTools.ttLib.tagToIdentifier(), but more practical.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n sorted([tagToIdentifier(tableTag) for tableTag in font.keys()])\n['DSIG', 'GlyphOrder', 'OS2', 'cmap', 'cvt', 'fpgm', 'gasp', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'name', 'post', 'prep']\n\n\n\nfunction convertFontToTTF\n\n\nConvert a CFF-based OTF to a glyf-based TTF.\n\n\n from cStringIO import StringIO\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"Condor-Bold.otf\")\n\n font = TTFont(path)\n\n convertFontToTTF(font, 0.5)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n104280\n\n\n\nfunction scaleFont\n\n\nResize a font to the desiredUnitsPerEm.\n\n\n from cStringIO import StringIO\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n #path = getFontPath(\"Pro.ttf\")\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n #path = getFontPath(\"SegoeUI-Regular-All.ttf\")\n\n font = TTFont(path)\n\n scaleFont(font, 256)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n45288\n\n\n\nTTFTraverser\n\n\nTTFTraverser is a tiny framework to write functionality that has to deal with\nlooking at or modifying multiple TTF/OTF tables more or less independently. Simply\nsubclass TTFTraverser, implement a table handler method per TTF/OTF table, using\nthe following naming scheme:\n\n\ndef \n_\n(self, table, \nargs, \n*kwargs): ...\n\n\nThen calling traverser.traverseTables(\"\n\", \nargs, \n*kwargs) will go\nthrough all the tables in the font, and will call a handler for each, if one\nis defined, passing along args and kwargs.\n\n\nfunction _runDocTests\n\n\nfunction _setupPost\n\n\nfunction patchGlyphNames\n\n\nGiven a freshly opened TTFont instance (no tables must have been loaded),\napply filterFunc() on each glyph name in the font. filterFunc() takes two\narguments: the original glyph name and the glyph ID. It must return a glyph\nname.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n def myGlyphNameFilter(glyphName, glyphID):\n... return glyphName + \".alt\"\n\n\n\n...\n\n\n patchGlyphNames(font, myGlyphNameFilter)\n\n getBestCmap(font)[ord(\"B\")]\n'B.alt'\n\n\n def myGlyphNameFilter(glyphName, glyphID):\n... return \"gid%05d\" % glyphID\n\n\n\n...\n\n\n font = TTFont(path)\n\n patchGlyphNames(font, myGlyphNameFilter)\n\n getBestCmap(font)[ord(\"B\")]\n'gid00057'\n\n\n getBestCmap(font)[ord(\" \")]\n'gid00003'\n\n\n font.getGlyphID(\"gid00003\")\n3\n\n\n path = getFontPath(\"Condor-Bold.otf\")\n\n font = TTFont(path)\n\n patchGlyphNames(font, myGlyphNameFilter)\n\n gs = font.getGlyphSet()\n\n sorted(gs.keys())[:10]\n['.notdef', 'gid00001', 'gid00002', 'gid00003', 'gid00004', 'gid00005', 'gid00006', 'gid00007', 'gid00008', 'gid00009']\n\n\n path = getFontPath(\"ProW6.otf\")\n\n font = TTFont(path)\n\n font.getGlyphOrder()[:8]\n['.notdef', 'cid00001', 'cid00002', 'cid00003', 'cid00004', 'cid00005', 'cid00006', 'cid00007']\n\n\n font = TTFont(path)\n\n patchGlyphNames(font, myGlyphNameFilter)\n\n font.getGlyphOrder()[:8]\n['.notdef', 'gid00001', 'gid00002', 'gid00003', 'gid00004', 'gid00005', 'gid00006', 'gid00007']\n\n\n cs = font[\"CFF \"].cff.values()[0].CharStrings[\"gid00003\"]\n\n cs.decompile()\n\n cs.program\n[406, 784, -20, 'hstem', 49, 784, 'rmoveto', 20, -265, 'rlineto', 82, 'hlineto', 20, 265, 'rlineto', 44, 'callgsubr']\n\n\n\n_TestTraverser\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n tt = _TestTraverser(font)\n\n tt.testIt()\nhandling maxp\n\n\n\nhandling OS/2\nhandling cvt\n['GlyphOrder', 'head', 'hhea', 'hmtx', 'cmap', 'fpgm', 'prep', 'loca', 'glyf', 'name', 'post', 'gasp', 'DSIG']\n\n\nFontScaler\n\n\nfunction getBestCmap\n\n\nReturn a unicode -\n glyphName dictionary from the 'best' unicode cmap that the font\ncontains. In order of preference, the font will be searched for cmaps 3,10, 3,1 and 0,3.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n248\n\n\n max(cmap)\n64258\n\n\n path = getFontPath(\"ProW6.otf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n13641\n\n\n print hex(max(cmap))  # if result \n 0xffff then it must have been a 3,10 cmap\n0x2f9f4\n\n\n getBestCmap(font, cmapPreferences=[(123, 456)])\nTraceback (most recent call last):\n\n\n\n...\nValueError: None of the requested cmap subtables were found\n\n\nunicoderanges\n\n\nunicodeRanges -- Some functions to deal with OS/2 unicodeRange values.\n\n\n getUnicodeRange(300)\n(2, 'Latin Extended-A', 256, 383)\n\n\n getUnicodeRangeByName('Balinese')\n(27, 6912, 7039)\n\n\n sorted(getUnicodeRangeBits([50, 500, 5000, 50000, 500000]))\n[0, 3, 56, 57, 75]\n\n\n getUnicodeRangeByBit(27)\n[('Balinese', 6912, 7039)]\n\n\n getUnicodeRangeByBit(50)\n[('Katakana', 12448, 12543), ('Katakana Phonetic Extensions', 12784, 12799)]\n\n\n countCoverageByRangeName([65, 66, 534, 535, 536])\n{'Latin Extended-B': (3, 208), 'Basic Latin': (2, 128)}\n\n\n countCoverageByRangeBit([65, 66, 534, 535, 536])\n{0: (2, 128), 3: (3, 208)}\n\n\n\nfunction subsetFont\n\n\nDelete the set of glyphs 'glyphsToDelete' from the font. The caller is responsible\nfor the consistency of this set: eg. one should not delete a glyph that is used as a\ncomponent while not deleting the composite glyph that references it.\n\n\n from cStringIO import StringIO\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n subsetFont(font, [\"x\"])\n\n path = getFontPath(\"Pro.ttf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n20796\n\n\n unicodes = sorted(cmap)\n\n subset = unicodes[:200] + unicodes[17000:]\n\n glyphsToKeep = findGlyphsByUnicode(font, subset)\n\n len(glyphsToKeep)\n3972\n\n\n subsetFont(font, set(font.getGlyphOrder()) - glyphsToKeep)\n\n outf = StringIO()\n\n font.save(outf)\n\n len(outf.getvalue())\n5817304", 
            "title": "Ttftools"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#fonttoolboxttftools", 
            "text": "", 
            "title": "fonttoolbox.ttftools"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#_pat", 
            "text": "Compiled regular expression objects", 
            "title": "_pat"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-findglyphsbyunicode", 
            "text": "Return the set of glyph names that are needed in the font to support the characters\nlisted in 'unicodes'. This includes substituted glyphs from GSUB features, as well as\nglyphs needed as components in composite glyphs.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"SegoeUI-Regular-All.ttf\")  font = TTFont(path)  sorted(findGlyphsByUnicode(font, [ord(\"a\"), ord(\"1\")]))\n['a', 'fraction', 'glyph00240', 'glyph00241', 'glyph00568', 'glyph03258', 'glyph03268', 'glyph03278', 'glyph03288', 'glyph03298', 'glyph03307', 'glyph04281', 'glyph04294', 'glyph04295', 'glyph04495', 'one', 'onehalf', 'onequarter', 'uni00B9', 'uni2081']  findGlyphsByUnicode(font, [1, 2, 99999, ord(\"|\")])\nset(['bar'])  font = TTFont(getFontPath(\"CusterRE-RegularS2.ttf\"))  sorted(findGlyphsByUnicode(font, [224]))\n['a', 'agrave', 'grave']", 
            "title": "function findGlyphsByUnicode"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-findcomponentglyphs", 
            "text": "Given a set of glyph names, return the set of glyphs that are used as components for these glyphs.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"SegoeUI-Regular-All.ttf\")  font = TTFont(path)  sorted(findComponentGlyphs(font, [\"aring\", \"agrave\", \"onehalf\"]))\n['a', 'fraction', 'glyph00240', 'glyph00241', 'grave', 'ring']  sorted(findComponentGlyphs(font, [\"x\"]))\n[]  sorted(findComponentGlyphs(font, [\"xyz\"]))\nTraceback (most recent call last):  ...\nKeyError: 'xyz'   path = getFontPath(\"NestedComposites.ttf\")  font = TTFont(path)  sorted(findComponentGlyphs(font, [\"d\"]))\n['a', 'b', 'c']", 
            "title": "function findComponentGlyphs"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#fontsubsetter", 
            "text": "", 
            "title": "FontSubsetter"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-_setupmaxp", 
            "text": "", 
            "title": "function _setupMaxp"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-stripinstructions", 
            "text": "Remove all TrueType instructions from the font.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  byteCode = font[\"glyf\"][\"a\"].program.getBytecode()  len(byteCode)\n58  font.has_key(\"cvt \")\n1  stripInstructions(font)  byteCode = font[\"glyf\"][\"a\"].program.getBytecode()  len(byteCode)\n0  font.has_key(\"cvt \")\n0", 
            "title": "function stripInstructions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-setunicoderanges", 
            "text": "Set the OS/2 unicode range fields according to the cmap. It sets any bit\nthe cmap defines at least one character for.", 
            "title": "function setUnicodeRanges"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#fontmerger", 
            "text": "", 
            "title": "FontMerger"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#otltools", 
            "text": "A collection of code to inspect and manipulate OpenType Layout features in a FontTools TTFont.", 
            "title": "otlTools"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-mergefonts", 
            "text": "Merge all glyphs from otherFont into font. Glyphs from font B that are\npresent in font A will be ignored. If font B defines a code point that also\nexists in font A, the code point from font A will be kept, unless\noverWriteCodePoints is True.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  pathA = getFontPath(\"CusterRE-RegularS2.ttf\")  pathB = getFontPath(\"CusterRE-BoldS2.ttf\")  fontA = TTFont(pathA)  fontB = TTFont(pathB)  def myGlyphNameFilter(glyphName, glyphID):\n... return glyphName + \".bold\"  ...   patchGlyphNames(fontB, myGlyphNameFilter)  glyphsToKeep = findGlyphsByUnicode(fontB, [ord(c) for c in \"ABCabc\"])  sorted(glyphsToKeep)\n['A.bold', 'B.bold', 'C.bold', 'a.bold', 'b.bold', 'c.bold']  subsetFont(fontB, set(fontB.getGlyphOrder()) - glyphsToKeep)  mergeFonts(fontA, fontB)", 
            "title": "function mergeFonts"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-_findcomponentparentglyphs", 
            "text": "Return a list of glyph names that reference the named glyph as a component.\nNote that this function is VERY inefficient as it iterates through all the glyphs\nin the font. It should not be used in production code, but only for debugging.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  _findComponentParentGlyphs(font, \"a\")\n['aring', 'agrave', 'adieresis', 'atilde', 'acircumflex', 'aacute']", 
            "title": "function _findComponentParentGlyphs"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-tagtoidentifier", 
            "text": "Convert a TT table tag into a Python identifier. Not as robust as fontTools.ttLib.tagToIdentifier(), but more practical.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  sorted([tagToIdentifier(tableTag) for tableTag in font.keys()])\n['DSIG', 'GlyphOrder', 'OS2', 'cmap', 'cvt', 'fpgm', 'gasp', 'glyf', 'head', 'hhea', 'hmtx', 'loca', 'maxp', 'name', 'post', 'prep']", 
            "title": "function tagToIdentifier"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-convertfonttottf", 
            "text": "Convert a CFF-based OTF to a glyf-based TTF.   from cStringIO import StringIO  from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"Condor-Bold.otf\")  font = TTFont(path)  convertFontToTTF(font, 0.5)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n104280", 
            "title": "function convertFontToTTF"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-scalefont", 
            "text": "Resize a font to the desiredUnitsPerEm.   from cStringIO import StringIO  from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  #path = getFontPath(\"Pro.ttf\")  path = getFontPath(\"CusterRE-RegularS2.ttf\")  #path = getFontPath(\"SegoeUI-Regular-All.ttf\")  font = TTFont(path)  scaleFont(font, 256)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n45288", 
            "title": "function scaleFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#ttftraverser", 
            "text": "TTFTraverser is a tiny framework to write functionality that has to deal with\nlooking at or modifying multiple TTF/OTF tables more or less independently. Simply\nsubclass TTFTraverser, implement a table handler method per TTF/OTF table, using\nthe following naming scheme:  def  _ (self, table,  args,  *kwargs): ...  Then calling traverser.traverseTables(\" \",  args,  *kwargs) will go\nthrough all the tables in the font, and will call a handler for each, if one\nis defined, passing along args and kwargs.", 
            "title": "TTFTraverser"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-_rundoctests", 
            "text": "", 
            "title": "function _runDocTests"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-_setuppost", 
            "text": "", 
            "title": "function _setupPost"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-patchglyphnames", 
            "text": "Given a freshly opened TTFont instance (no tables must have been loaded),\napply filterFunc() on each glyph name in the font. filterFunc() takes two\narguments: the original glyph name and the glyph ID. It must return a glyph\nname.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  def myGlyphNameFilter(glyphName, glyphID):\n... return glyphName + \".alt\"  ...   patchGlyphNames(font, myGlyphNameFilter)  getBestCmap(font)[ord(\"B\")]\n'B.alt'  def myGlyphNameFilter(glyphName, glyphID):\n... return \"gid%05d\" % glyphID  ...   font = TTFont(path)  patchGlyphNames(font, myGlyphNameFilter)  getBestCmap(font)[ord(\"B\")]\n'gid00057'  getBestCmap(font)[ord(\" \")]\n'gid00003'  font.getGlyphID(\"gid00003\")\n3  path = getFontPath(\"Condor-Bold.otf\")  font = TTFont(path)  patchGlyphNames(font, myGlyphNameFilter)  gs = font.getGlyphSet()  sorted(gs.keys())[:10]\n['.notdef', 'gid00001', 'gid00002', 'gid00003', 'gid00004', 'gid00005', 'gid00006', 'gid00007', 'gid00008', 'gid00009']  path = getFontPath(\"ProW6.otf\")  font = TTFont(path)  font.getGlyphOrder()[:8]\n['.notdef', 'cid00001', 'cid00002', 'cid00003', 'cid00004', 'cid00005', 'cid00006', 'cid00007']  font = TTFont(path)  patchGlyphNames(font, myGlyphNameFilter)  font.getGlyphOrder()[:8]\n['.notdef', 'gid00001', 'gid00002', 'gid00003', 'gid00004', 'gid00005', 'gid00006', 'gid00007']  cs = font[\"CFF \"].cff.values()[0].CharStrings[\"gid00003\"]  cs.decompile()  cs.program\n[406, 784, -20, 'hstem', 49, 784, 'rmoveto', 20, -265, 'rlineto', 82, 'hlineto', 20, 265, 'rlineto', 44, 'callgsubr']", 
            "title": "function patchGlyphNames"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#_testtraverser", 
            "text": "from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  tt = _TestTraverser(font)  tt.testIt()\nhandling maxp  handling OS/2\nhandling cvt\n['GlyphOrder', 'head', 'hhea', 'hmtx', 'cmap', 'fpgm', 'prep', 'loca', 'glyf', 'name', 'post', 'gasp', 'DSIG']", 
            "title": "_TestTraverser"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#fontscaler", 
            "text": "", 
            "title": "FontScaler"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-getbestcmap", 
            "text": "Return a unicode -  glyphName dictionary from the 'best' unicode cmap that the font\ncontains. In order of preference, the font will be searched for cmaps 3,10, 3,1 and 0,3.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n248  max(cmap)\n64258  path = getFontPath(\"ProW6.otf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n13641  print hex(max(cmap))  # if result   0xffff then it must have been a 3,10 cmap\n0x2f9f4  getBestCmap(font, cmapPreferences=[(123, 456)])\nTraceback (most recent call last):  ...\nValueError: None of the requested cmap subtables were found", 
            "title": "function getBestCmap"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#unicoderanges", 
            "text": "unicodeRanges -- Some functions to deal with OS/2 unicodeRange values.   getUnicodeRange(300)\n(2, 'Latin Extended-A', 256, 383)  getUnicodeRangeByName('Balinese')\n(27, 6912, 7039)  sorted(getUnicodeRangeBits([50, 500, 5000, 50000, 500000]))\n[0, 3, 56, 57, 75]  getUnicodeRangeByBit(27)\n[('Balinese', 6912, 7039)]  getUnicodeRangeByBit(50)\n[('Katakana', 12448, 12543), ('Katakana Phonetic Extensions', 12784, 12799)]  countCoverageByRangeName([65, 66, 534, 535, 536])\n{'Latin Extended-B': (3, 208), 'Basic Latin': (2, 128)}  countCoverageByRangeBit([65, 66, 534, 535, 536])\n{0: (2, 128), 3: (3, 208)}", 
            "title": "unicoderanges"
        }, 
        {
            "location": "/pagebot/fonttoolbox/ttftools/#function-subsetfont", 
            "text": "Delete the set of glyphs 'glyphsToDelete' from the font. The caller is responsible\nfor the consistency of this set: eg. one should not delete a glyph that is used as a\ncomponent while not deleting the composite glyph that references it.   from cStringIO import StringIO  from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  subsetFont(font, [\"x\"])  path = getFontPath(\"Pro.ttf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n20796  unicodes = sorted(cmap)  subset = unicodes[:200] + unicodes[17000:]  glyphsToKeep = findGlyphsByUnicode(font, subset)  len(glyphsToKeep)\n3972  subsetFont(font, set(font.getGlyphOrder()) - glyphsToKeep)  outf = StringIO()  font.save(outf)  len(outf.getvalue())\n5817304", 
            "title": "function subsetFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/", 
            "text": "fonttoolbox.varfontdesignspace\n\n\nFunctions\n\n\ndivision\n\n\nfunction supportScalar\n\n\nReturns the scalar multiplier at location, for a master\n    with support.\n    \n supportScalar({}, {})\n    1.0\n    \n supportScalar({'wght':.2}, {})\n    1.0\n    \n supportScalar({'wght':.2}, {'wght':(0,2,3)})\n    0.1\n    \n supportScalar({'wght':2.5}, {'wght':(0,2,4)})\n    0.75\n\n\nTTGlyph\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nfunction setCoordinates\n\n\nfunction _GetCoordinates\n\n\nfont, glyphName --\n glyph coordinates as expected by \"gvar\" table\n\n\nThe result includes four \"phantom points\" for the glyph metrics,\nas mandated by the \"gvar\" spec.\n\n\n\nTTVarGlyph\n\n\nTTVarFontDesignSpace\n\n\nfunction getBestCmap\n\n\nReturn a unicode -\n glyphName dictionary from the 'best' unicode cmap that the font\ncontains. In order of preference, the font will be searched for cmaps 3,10, 3,1 and 0,3.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n248\n\n\n max(cmap)\n64258\n\n\n path = getFontPath(\"ProW6.otf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n13641\n\n\n print hex(max(cmap))  # if result \n 0xffff then it must have been a 3,10 cmap\n0x2f9f4\n\n\n getBestCmap(font, cmapPreferences=[(123, 456)])\nTraceback (most recent call last):\n\n\n\n...\nValueError: None of the requested cmap subtables were found\n\n\nGlyphCoordinates\n\n\nfunction normalizeLocation\n\n\nNormalizes location based on axis min/default/max values from axes.\n\n\nDesignSpaceBase\n\n\nTTVarFontGlyphSet\n\n\nAxis", 
            "title": "Varfontdesignspace"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#fonttoolboxvarfontdesignspace", 
            "text": "", 
            "title": "fonttoolbox.varfontdesignspace"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#function-supportscalar", 
            "text": "Returns the scalar multiplier at location, for a master\n    with support.\n      supportScalar({}, {})\n    1.0\n      supportScalar({'wght':.2}, {})\n    1.0\n      supportScalar({'wght':.2}, {'wght':(0,2,3)})\n    0.1\n      supportScalar({'wght':2.5}, {'wght':(0,2,4)})\n    0.75", 
            "title": "function supportScalar"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#ttglyph", 
            "text": "", 
            "title": "TTGlyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#function-setcoordinates", 
            "text": "", 
            "title": "function setCoordinates"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#function-_getcoordinates", 
            "text": "font, glyphName --  glyph coordinates as expected by \"gvar\" table  The result includes four \"phantom points\" for the glyph metrics,\nas mandated by the \"gvar\" spec.", 
            "title": "function _GetCoordinates"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#ttvarglyph", 
            "text": "", 
            "title": "TTVarGlyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#ttvarfontdesignspace", 
            "text": "", 
            "title": "TTVarFontDesignSpace"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#function-getbestcmap", 
            "text": "Return a unicode -  glyphName dictionary from the 'best' unicode cmap that the font\ncontains. In order of preference, the font will be searched for cmaps 3,10, 3,1 and 0,3.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n248  max(cmap)\n64258  path = getFontPath(\"ProW6.otf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n13641  print hex(max(cmap))  # if result   0xffff then it must have been a 3,10 cmap\n0x2f9f4  getBestCmap(font, cmapPreferences=[(123, 456)])\nTraceback (most recent call last):  ...\nValueError: None of the requested cmap subtables were found", 
            "title": "function getBestCmap"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#glyphcoordinates", 
            "text": "", 
            "title": "GlyphCoordinates"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#function-normalizelocation", 
            "text": "Normalizes location based on axis min/default/max values from axes.", 
            "title": "function normalizeLocation"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#designspacebase", 
            "text": "", 
            "title": "DesignSpaceBase"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#ttvarfontglyphset", 
            "text": "", 
            "title": "TTVarFontGlyphSet"
        }, 
        {
            "location": "/pagebot/fonttoolbox/varfontdesignspace/#axis", 
            "text": "", 
            "title": "Axis"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/", 
            "text": "fonttoolbox.variablefontbuilder\n\n\nFunctions\n\n\nfunction strjoin\n\n\nfunction supportScalar\n\n\nReturns the scalar multiplier at location, for a master\n    with support.\n    \n supportScalar({}, {})\n    1.0\n    \n supportScalar({'wght':.2}, {})\n    1.0\n    \n supportScalar({'wght':.2}, {'wght':(0,2,3)})\n    0.1\n    \n supportScalar({'wght':2.5}, {'wght':(0,2,4)})\n    0.75\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nfunction xrange\n\n\nfunction _GetCoordinates\n\n\nfont, glyphName --\n glyph coordinates as expected by \"gvar\" table\n\n\nThe result includes four \"phantom points\" for the glyph metrics,\nas mandated by the \"gvar\" spec.\n\n\n\nfunction bytesjoin\n\n\nPy23Error\n\n\nfunction generateInstance\n\n\nInstantiate an instance of a variable font at the specified location.\nKeyword arguments:\nvarfilename -- a variable font file path\nlocation -- a dictionary of axis tag and value {\"wght\": 0.75, \"wdth\": -0.5}\n\n\nfunction normalizeLocation\n\n\nNormalizes location based on axis min/default/max values from axes.\n\n\n axes = {\"wght\": (100, 400, 900)}\n\n normalizeLocation({\"wght\": 400}, axes)\n{'wght': 0}\n\n\n normalizeLocation({\"wght\": 100}, axes)\n{'wght': -1.0}\n\n\n normalizeLocation({\"wght\": 900}, axes)\n{'wght': 1.0}\n\n\n normalizeLocation({\"wght\": 650}, axes)\n{'wght': 0.5}\n\n\n normalizeLocation({\"wght\": 1000}, axes)\n{'wght': 1.0}\n\n\n normalizeLocation({\"wght\": 0}, axes)\n{'wght': -1.0}\n\n\n axes = {\"wght\": (0, 0, 1000)}\n\n normalizeLocation({\"wght\": 0}, axes)\n{'wght': 0}\n\n\n normalizeLocation({\"wght\": -1}, axes)\n{'wght': 0}\n\n\n normalizeLocation({\"wght\": 1000}, axes)\n{'wght': 1.0}\n\n\n normalizeLocation({\"wght\": 500}, axes)\n{'wght': 0.5}\n\n\n normalizeLocation({\"wght\": 1001}, axes)\n{'wght': 1.0}\n\n\n axes = {\"wght\": (0, 1000, 1000)}\n\n normalizeLocation({\"wght\": 0}, axes)\n{'wght': -1.0}\n\n\n normalizeLocation({\"wght\": -1}, axes)\n{'wght': -1.0}\n\n\n normalizeLocation({\"wght\": 500}, axes)\n{'wght': -0.5}\n\n\n normalizeLocation({\"wght\": 1000}, axes)\n{'wght': 0}\n\n\n normalizeLocation({\"wght\": 1001}, axes)\n{'wght': 0}\n\n\n\nunicode\n\n\nunicode(object='') -\n unicode object\nunicode(string[, encoding[, errors]]) -\n unicode object\n\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n\n\nfunction unichr\n\n\nReturn the unicode character whose Unicode code is the integer 'i'.\n            The valid range is 0 to 0x10FFFF inclusive.\n\n\n        \n _narrow_unichr(0xFFFF + 1)\n        Traceback (most recent call last):\n          File \"\nstdin\n\", line 1, in ?\n        ValueError: unichr() arg not in range(0x10000) (narrow Python build)\n        \n unichr(0xFFFF + 1) == u'\\U00010000'\n        True\n        \n unichr(1114111) == u'\\U0010FFFF'\n        True\n        \n unichr(0x10FFFF + 1)\n        Traceback (most recent call last):\n          File \"\nstdin\n\", line 1, in ?\n        ValueError: unichr() arg not in range(0x110000)\n\n\n\nfunction open\n\n\nWrapper around \nio.open\n that bridges the differences between Python 2\n    and Python 3's built-in \nopen\n functions. In Python 2, \nio.open\n is a\n    backport of Python 3's \nopen\n, whereas in Python 3, it is an alias of the\n    built-in \nopen\n function.\n\n\nOne difference is that the 'opener' keyword argument is only supported in\nPython 3. Here we pass the value of 'opener' only when it is not None.\nThis causes Python 2 to raise TypeError, complaining about the number of \nexpected arguments, so it must be avoided if py2 or py2-3 contexts.\n\nAnother difference between 2 and 3, this time on Windows, has to do with\nopening files by name or by file descriptor.\n\nOn the Windows C runtime, the 'O_BINARY' flag is defined which disables\nthe newlines translation ('\n\n\n\n' \n=\n '\n') when reading/writing files.\n    On both Python 2 and 3 this flag is always set when opening files by name.\n    This way, the newlines translation at the MSVCRT level doesn't interfere\n    with the Python io module's own newlines translation.\n\n\nHowever, when opening files via fd, on Python 2 the fd is simply copied,\nregardless of whether it has the 'O_BINARY' flag set or not.\nThis becomes a problem in the case of stdout, stdin, and stderr, because on\nWindows these are opened in text mode by default (ie. don't have the\nO_BINARY flag set).\n\nOn Python 3, this issue has been fixed, and all fds are now opened in\nbinary mode on Windows, including standard streams. Similarly here, I use\nthe `_setmode` function to ensure that integer file descriptors are\nO_BINARY'ed before I pass them on to io.open.\n\nFor more info, see: https://bugs.python.org/issue10841\n\n\n\nfunction getMasterPath\n\n\nAnswer the path to read master fonts. Default is at the same level as pagebot module.\n\n\nbasestring\n\n\nType basestring cannot be instantiated; it is the base for str and unicode.\n\n\nfunction drawGlyphPath\n\n\nUnicodeIO\n\n\nText I/O implementation using an in-memory buffer.\n\n\nThe initial_value argument sets the value of object.  The newline\nargument is like the one of TextIOWrapper's constructor.\n\n\nGlyphCoordinates\n\n\nfunction getVariableFont\n\n\nThe variablesFontPath refers to the file of the source variable font.\nThe nLocation is dictionary axis locations of the instance with values between (0, 1000), e.g.\n{\"wght\": 0, \"wdth\": 1000}\n\n\nBytesIO\n\n\nBytesIO([buffer]) -\n object\n\n\nCreate a buffered I/O implementation using an in-memory bytes\nbuffer, ready for reading and writing.\n\n\nVariationModel\n\n\nLocations must be in normalized space.  Ie. base master\n    is at origin (0).\n    \n from pprint import pprint\n    \n locations = [   {'wght':100},   {'wght':-100},  {'wght':-180},  {'wdth':+.3},   {'wght':+120,'wdth':.3},    {'wght':+120,'wdth':.2},    {},     {'wght':+180,'wdth':.3},    {'wght':+180},  ]\n    \n model = VariationModel(locations, axisOrder=['wght'])\n    \n pprint(model.locations)\n    [{},\n     {'wght': -100},\n     {'wght': -180},\n     {'wght': 100},\n     {'wght': 180},\n     {'wdth': 0.3},\n     {'wdth': 0.3, 'wght': 180},\n     {'wdth': 0.3, 'wght': 120},\n     {'wdth': 0.2, 'wght': 120}]\n    \n pprint(model.deltaWeights)\n    [{},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0, 4: 1.0, 5: 1.0},\n     {0: 1.0, 3: 0.75, 4: 0.25, 5: 1.0, 6: 0.25},\n     {0: 1.0,\n      3: 0.75,\n      4: 0.25,\n      5: 0.6666666666666667,\n      6: 0.16666666666666669,\n      7: 0.6666666666666667}]\n\n\ndivision\n\n\nTTVarFontGlyphSet\n\n\nfunction setFillColor\n\n\nSet the color for global or the color of the formatted string.\n\n\nfunction _SetCoordinates\n\n\nfunction tobytes\n\n\nDEBUG\n\n\nbool(x) -\n bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\nfunction byteord\n\n\nGiven a 8-bit or unicode character, return an integer representing the\n            Unicode code point of the character. If a unicode argument is given, the\n            character's code point must be in the range 0 to 0x10FFFF inclusive.\n\n\n        \n ord(u'\\U00010000')\n        Traceback (most recent call last):\n          File \"\nstdin\n\", line 1, in ?\n        TypeError: ord() expected a character, but string of length 2 found\n        \n byteord(u'\\U00010000') == 0xFFFF + 1\n        True\n        \n byteord(u'\\U0010FFFF') == 1114111\n        True\n\n\n\nfunction getVarLocation\n\n\nTranslate the normalized location dict (all values between 0 and 1) to what the font expects\nby its min/max values for each axis.\n\n\nfunction getInstancePath\n\n\nAnswer the path to write instance fonts.\n\n\nrange\n\n\nxrange(stop) -\n xrange object\nxrange(start, stop[, step]) -\n xrange object\n\n\nLike range(), but instead of returning a list, returns an object that\ngenerates the numbers in the range on demand.  For looping, this is \nslightly faster than range() and more memory efficient.\n\n\nTag\n\n\nfunction tounicode\n\n\nfunction tostr\n\n\nFont\n\n\nStorage of font information while composing the pages.\n\n\np = pp + '/fonts/google/***REMOVED***'\n\n\np = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n pp = path2ParentPath(p)\n\n p = pp + '/fonts/typetr/BitcountGridVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n f.name\nu'BitcountGrid'\n\n\n len(f)\n101\n\n\n f.keys()[-1]\n'y'\n\n\n f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}\n\n\n variables = f.variables\n\n features = f.features\n\n f.groups\n\n f.designSpace\n{}\n\n\n f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'\n\n\n f.save()\n\n\n\nbytechr\n\n\nchr(i) -\n character\n\n\nReturn a string of one character with ordinal i; 0 \n= i \n 256.\n\n\nfunction round\n\n\nSee Python 3 documentation: uses Banker's Rounding.\n\n\nDelegates to the __round__ method if for some reason this exists.\n\nIf not, rounds a number to a given precision in decimal digits (default\n0 digits). This returns an int when called with one argument,\notherwise the same type as the number. ndigits may be negative.\n\nndigits may be negative.\n\nDerived from python-future:\nhttps://github.com/PythonCharmers/python-future/blob/master/src/future/builtins/newround.py", 
            "title": "Variablefontbuilder"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#fonttoolboxvariablefontbuilder", 
            "text": "", 
            "title": "fonttoolbox.variablefontbuilder"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-strjoin", 
            "text": "", 
            "title": "function strjoin"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-supportscalar", 
            "text": "Returns the scalar multiplier at location, for a master\n    with support.\n      supportScalar({}, {})\n    1.0\n      supportScalar({'wght':.2}, {})\n    1.0\n      supportScalar({'wght':.2}, {'wght':(0,2,3)})\n    0.1\n      supportScalar({'wght':2.5}, {'wght':(0,2,4)})\n    0.75", 
            "title": "function supportScalar"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-xrange", 
            "text": "", 
            "title": "function xrange"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-_getcoordinates", 
            "text": "font, glyphName --  glyph coordinates as expected by \"gvar\" table  The result includes four \"phantom points\" for the glyph metrics,\nas mandated by the \"gvar\" spec.", 
            "title": "function _GetCoordinates"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-bytesjoin", 
            "text": "", 
            "title": "function bytesjoin"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#py23error", 
            "text": "", 
            "title": "Py23Error"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-generateinstance", 
            "text": "Instantiate an instance of a variable font at the specified location.\nKeyword arguments:\nvarfilename -- a variable font file path\nlocation -- a dictionary of axis tag and value {\"wght\": 0.75, \"wdth\": -0.5}", 
            "title": "function generateInstance"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-normalizelocation", 
            "text": "Normalizes location based on axis min/default/max values from axes.   axes = {\"wght\": (100, 400, 900)}  normalizeLocation({\"wght\": 400}, axes)\n{'wght': 0}  normalizeLocation({\"wght\": 100}, axes)\n{'wght': -1.0}  normalizeLocation({\"wght\": 900}, axes)\n{'wght': 1.0}  normalizeLocation({\"wght\": 650}, axes)\n{'wght': 0.5}  normalizeLocation({\"wght\": 1000}, axes)\n{'wght': 1.0}  normalizeLocation({\"wght\": 0}, axes)\n{'wght': -1.0}  axes = {\"wght\": (0, 0, 1000)}  normalizeLocation({\"wght\": 0}, axes)\n{'wght': 0}  normalizeLocation({\"wght\": -1}, axes)\n{'wght': 0}  normalizeLocation({\"wght\": 1000}, axes)\n{'wght': 1.0}  normalizeLocation({\"wght\": 500}, axes)\n{'wght': 0.5}  normalizeLocation({\"wght\": 1001}, axes)\n{'wght': 1.0}  axes = {\"wght\": (0, 1000, 1000)}  normalizeLocation({\"wght\": 0}, axes)\n{'wght': -1.0}  normalizeLocation({\"wght\": -1}, axes)\n{'wght': -1.0}  normalizeLocation({\"wght\": 500}, axes)\n{'wght': -0.5}  normalizeLocation({\"wght\": 1000}, axes)\n{'wght': 0}  normalizeLocation({\"wght\": 1001}, axes)\n{'wght': 0}", 
            "title": "function normalizeLocation"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#unicode", 
            "text": "unicode(object='') -  unicode object\nunicode(string[, encoding[, errors]]) -  unicode object  Create a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", 
            "title": "unicode"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-unichr", 
            "text": "Return the unicode character whose Unicode code is the integer 'i'.\n            The valid range is 0 to 0x10FFFF inclusive.            _narrow_unichr(0xFFFF + 1)\n        Traceback (most recent call last):\n          File \" stdin \", line 1, in ?\n        ValueError: unichr() arg not in range(0x10000) (narrow Python build)\n          unichr(0xFFFF + 1) == u'\\U00010000'\n        True\n          unichr(1114111) == u'\\U0010FFFF'\n        True\n          unichr(0x10FFFF + 1)\n        Traceback (most recent call last):\n          File \" stdin \", line 1, in ?\n        ValueError: unichr() arg not in range(0x110000)", 
            "title": "function unichr"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-open", 
            "text": "Wrapper around  io.open  that bridges the differences between Python 2\n    and Python 3's built-in  open  functions. In Python 2,  io.open  is a\n    backport of Python 3's  open , whereas in Python 3, it is an alias of the\n    built-in  open  function.  One difference is that the 'opener' keyword argument is only supported in\nPython 3. Here we pass the value of 'opener' only when it is not None.\nThis causes Python 2 to raise TypeError, complaining about the number of \nexpected arguments, so it must be avoided if py2 or py2-3 contexts.\n\nAnother difference between 2 and 3, this time on Windows, has to do with\nopening files by name or by file descriptor.\n\nOn the Windows C runtime, the 'O_BINARY' flag is defined which disables\nthe newlines translation ('  '  =  '\n') when reading/writing files.\n    On both Python 2 and 3 this flag is always set when opening files by name.\n    This way, the newlines translation at the MSVCRT level doesn't interfere\n    with the Python io module's own newlines translation.  However, when opening files via fd, on Python 2 the fd is simply copied,\nregardless of whether it has the 'O_BINARY' flag set or not.\nThis becomes a problem in the case of stdout, stdin, and stderr, because on\nWindows these are opened in text mode by default (ie. don't have the\nO_BINARY flag set).\n\nOn Python 3, this issue has been fixed, and all fds are now opened in\nbinary mode on Windows, including standard streams. Similarly here, I use\nthe `_setmode` function to ensure that integer file descriptors are\nO_BINARY'ed before I pass them on to io.open.\n\nFor more info, see: https://bugs.python.org/issue10841", 
            "title": "function open"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-getmasterpath", 
            "text": "Answer the path to read master fonts. Default is at the same level as pagebot module.", 
            "title": "function getMasterPath"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#basestring", 
            "text": "Type basestring cannot be instantiated; it is the base for str and unicode.", 
            "title": "basestring"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-drawglyphpath", 
            "text": "", 
            "title": "function drawGlyphPath"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#unicodeio", 
            "text": "Text I/O implementation using an in-memory buffer.  The initial_value argument sets the value of object.  The newline\nargument is like the one of TextIOWrapper's constructor.", 
            "title": "UnicodeIO"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#glyphcoordinates", 
            "text": "", 
            "title": "GlyphCoordinates"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-getvariablefont", 
            "text": "The variablesFontPath refers to the file of the source variable font.\nThe nLocation is dictionary axis locations of the instance with values between (0, 1000), e.g.\n{\"wght\": 0, \"wdth\": 1000}", 
            "title": "function getVariableFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#bytesio", 
            "text": "BytesIO([buffer]) -  object  Create a buffered I/O implementation using an in-memory bytes\nbuffer, ready for reading and writing.", 
            "title": "BytesIO"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#variationmodel", 
            "text": "Locations must be in normalized space.  Ie. base master\n    is at origin (0).\n      from pprint import pprint\n      locations = [   {'wght':100},   {'wght':-100},  {'wght':-180},  {'wdth':+.3},   {'wght':+120,'wdth':.3},    {'wght':+120,'wdth':.2},    {},     {'wght':+180,'wdth':.3},    {'wght':+180},  ]\n      model = VariationModel(locations, axisOrder=['wght'])\n      pprint(model.locations)\n    [{},\n     {'wght': -100},\n     {'wght': -180},\n     {'wght': 100},\n     {'wght': 180},\n     {'wdth': 0.3},\n     {'wdth': 0.3, 'wght': 180},\n     {'wdth': 0.3, 'wght': 120},\n     {'wdth': 0.2, 'wght': 120}]\n      pprint(model.deltaWeights)\n    [{},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0},\n     {0: 1.0, 4: 1.0, 5: 1.0},\n     {0: 1.0, 3: 0.75, 4: 0.25, 5: 1.0, 6: 0.25},\n     {0: 1.0,\n      3: 0.75,\n      4: 0.25,\n      5: 0.6666666666666667,\n      6: 0.16666666666666669,\n      7: 0.6666666666666667}]", 
            "title": "VariationModel"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#ttvarfontglyphset", 
            "text": "", 
            "title": "TTVarFontGlyphSet"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-setfillcolor", 
            "text": "Set the color for global or the color of the formatted string.", 
            "title": "function setFillColor"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-_setcoordinates", 
            "text": "", 
            "title": "function _SetCoordinates"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-tobytes", 
            "text": "", 
            "title": "function tobytes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#debug", 
            "text": "bool(x) -  bool  Returns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", 
            "title": "DEBUG"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-byteord", 
            "text": "Given a 8-bit or unicode character, return an integer representing the\n            Unicode code point of the character. If a unicode argument is given, the\n            character's code point must be in the range 0 to 0x10FFFF inclusive.            ord(u'\\U00010000')\n        Traceback (most recent call last):\n          File \" stdin \", line 1, in ?\n        TypeError: ord() expected a character, but string of length 2 found\n          byteord(u'\\U00010000') == 0xFFFF + 1\n        True\n          byteord(u'\\U0010FFFF') == 1114111\n        True", 
            "title": "function byteord"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-getvarlocation", 
            "text": "Translate the normalized location dict (all values between 0 and 1) to what the font expects\nby its min/max values for each axis.", 
            "title": "function getVarLocation"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-getinstancepath", 
            "text": "Answer the path to write instance fonts.", 
            "title": "function getInstancePath"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#range", 
            "text": "xrange(stop) -  xrange object\nxrange(start, stop[, step]) -  xrange object  Like range(), but instead of returning a list, returns an object that\ngenerates the numbers in the range on demand.  For looping, this is \nslightly faster than range() and more memory efficient.", 
            "title": "range"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#tag", 
            "text": "", 
            "title": "Tag"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-tounicode", 
            "text": "", 
            "title": "function tounicode"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-tostr", 
            "text": "", 
            "title": "function tostr"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#font", 
            "text": "Storage of font information while composing the pages.", 
            "title": "Font"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#p-pp-fontsgoogleroboto-vfttf", 
            "text": "", 
            "title": "p = pp + '/fonts/google/***REMOVED***'"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#p-pp-fontsfontbureauamstelvaralpha-variationsttf", 
            "text": "import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  pp = path2ParentPath(p)  p = pp + '/fonts/typetr/BitcountGridVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  f.name\nu'BitcountGrid'  len(f)\n101  f.keys()[-1]\n'y'  f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}  variables = f.variables  features = f.features  f.groups  f.designSpace\n{}  f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'  f.save()", 
            "title": "p = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#bytechr", 
            "text": "chr(i) -  character  Return a string of one character with ordinal i; 0  = i   256.", 
            "title": "bytechr"
        }, 
        {
            "location": "/pagebot/fonttoolbox/variablefontbuilder/#function-round", 
            "text": "See Python 3 documentation: uses Banker's Rounding.  Delegates to the __round__ method if for some reason this exists.\n\nIf not, rounds a number to a given precision in decimal digits (default\n0 digits). This returns an int when called with one argument,\notherwise the same type as the number. ndigits may be negative.\n\nndigits may be negative.\n\nDerived from python-future:\nhttps://github.com/PythonCharmers/python-future/blob/master/src/future/builtins/newround.py", 
            "title": "function round"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/", 
            "text": "fonttoolbox.analyzers\n\n\nClasses\n\n\n\n\npagebot.fonttoolbox.analyzers.contour\n\n\npagebot.fonttoolbox.analyzers.glyphanalyzer-TNBITS\n\n\npagebot.fonttoolbox.analyzers.glyphanalyzer\n\n\npagebot.fonttoolbox.analyzers.point\n\n\npagebot.fonttoolbox.analyzers.pointcontext\n\n\npagebot.fonttoolbox.analyzers.pointcontextlist\n\n\npagebot.fonttoolbox.analyzers.segment\n\n\n\n\nModules\n\n\nFunctions\n\n\npoint\n\n\npointcontext\n\n\npointcontextlist", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#fonttoolboxanalyzers", 
            "text": "", 
            "title": "fonttoolbox.analyzers"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#classes", 
            "text": "pagebot.fonttoolbox.analyzers.contour  pagebot.fonttoolbox.analyzers.glyphanalyzer-TNBITS  pagebot.fonttoolbox.analyzers.glyphanalyzer  pagebot.fonttoolbox.analyzers.point  pagebot.fonttoolbox.analyzers.pointcontext  pagebot.fonttoolbox.analyzers.pointcontextlist  pagebot.fonttoolbox.analyzers.segment", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#point", 
            "text": "", 
            "title": "point"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#pointcontext", 
            "text": "", 
            "title": "pointcontext"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/#pointcontextlist", 
            "text": "", 
            "title": "pointcontextlist"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/contour/", 
            "text": "fonttoolbox.analyzers.contour\n\n\nFunctions\n\n\nContour", 
            "title": "Contour"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/contour/#fonttoolboxanalyzerscontour", 
            "text": "", 
            "title": "fonttoolbox.analyzers.contour"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/contour/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/contour/#contour", 
            "text": "", 
            "title": "Contour"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/", 
            "text": "fonttoolbox.analyzers.glyphanalyzer-TNBITS\n\n\nFunctions\n\n\nSS_ACCENTSCMB\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nUNDEFINED\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nDiagonalStem\n\n\nDOWN\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nWidth\n\n\nfunction getComponents\n\n\nAnswer the list of components for this glyph.\n\n\nNSPoint\n\n\nStem\n\n\nThe \nStem\n class instant takes the CVT related to this stem, and the  left and point \nVertical\n\n instance that stem binds.\n\n\nclass TX\n\n\nGlyphAnalyzer\n\n\nThe GlyphAnalyzer analyzes the defcon glyph and find key measures\nabout its outline or components.\n\n\nclass Component\n\n\nVerticalCounter\n\n\nHorizontal\n\n\nThe \nHOrizontal\n class is a list of point contexts that share the same y-value\nself.append, self.x, self.y, self.alternates, self.minX, self.maxX\n\n\n\nConstants\n\n\nBar\n\n\nCounter\n\n\nVertical\n\n\nThe \nVertical\n class is a list of point contexts that share the same x-value\nself.append, self.x, self.y, self.alternates, self.minY, self.maxY\n\n\n\nPointContext\n\n\nThe \nPointContext\n instance is a \nPoint\n wrapper, that also takes the 3 points previous\nand next 3 points on the contour. The instance behaves like a normal point \np\n, but additional information is\navailable as interpreted from the point context in relation to the neighbor points. The total of 6 points is derived\nfrom the average construction of a serif, so it is possible to hold (and interpret) an entire serif sequence inside\none point context.\n\n\nDEBUG\n\n\nbool(x) -\n bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\n\nNakedWrapper\n\n\nSimple wrapper to call RoboFont methods that assume a RoboFont wrapper, where we only\nhave the defcon glyph available.\n\n\nANCHOR_TOP\n\n\nstr(object='') -\n string\n\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object.\n\n\nfunction getPoints\n\n\nPointAnalyzer\n\n\nDefconGlyph\n\n\nThis object represents a glyph and it contains contour, component, anchor\nand other assorted bits data about the glyph.\n\n\nThis object posts the following notifications:\n\n\n============================\nName\n============================\nGlyph.Changed\nGlyph.BeginUndo\nGlyph.EndUndo\nGlyph.BeginRedo\nGlyph.EndRedo\nGlyph.NameWillChange\nGlyph.NameChanged\nGlyph.UnicodesChanged\nGlyph.WidthChanged\nGlyph.HeightChanged\nGlyph.NoteChanged\nGlyph.LibChanged\nGlyph.ImageChanged\nGlyph.ImageWillBeDeleted\nGlyph.ContourWillBeAdded\nGlyph.ContourWillBeDeleted\nGlyph.ContoursChanged\nGlyph.ComponentWillBeAdded\nGlyph.ComponentWillBeDeleted\nGlyph.ComponentsChanged\nGlyph.AnchorWillBeAdded\nGlyph.AnchorWillBeDeleted\nGlyph.AnchorsChanged\nGlyph.GuidelineWillBeAdded\nGlyph.GuidelineWillBeDeleted\nGlyph.GuidelinesChanged\nGlyph.MarkColorChanged\nGlyph.VerticalOriginChanged\n============================\n\n\nThe Glyph object has list like behavior. This behavior allows you to interact\nwith contour data directly. For example, to get a particular contour::\n\n\ncontour = glyph[0]\n\n\nTo iterate over all contours::\n\n\nfor contour in glyph:\n\n\nTo get the number of contours::\n\n\ncontourCount = len(glyph)\n\n\nTo interact with components or anchors in a similar way,\nuse the \ncomponents\n and \nanchors\n attributes.\n\n\nUP\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nBoundingBox\n\n\nSPANSTEP\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nLocation", 
            "title": "glyphanalyzer TNBITS"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#fonttoolboxanalyzersglyphanalyzer-tnbits", 
            "text": "", 
            "title": "fonttoolbox.analyzers.glyphanalyzer-TNBITS"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#ss_accentscmb", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "SS_ACCENTSCMB"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#undefined", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "UNDEFINED"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#diagonalstem", 
            "text": "", 
            "title": "DiagonalStem"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#down", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "DOWN"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#width", 
            "text": "", 
            "title": "Width"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#function-getcomponents", 
            "text": "Answer the list of components for this glyph.", 
            "title": "function getComponents"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#nspoint", 
            "text": "", 
            "title": "NSPoint"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#stem", 
            "text": "The  Stem  class instant takes the CVT related to this stem, and the  left and point  Vertical  instance that stem binds.", 
            "title": "Stem"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#class-tx", 
            "text": "", 
            "title": "class TX"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#glyphanalyzer", 
            "text": "The GlyphAnalyzer analyzes the defcon glyph and find key measures\nabout its outline or components.", 
            "title": "GlyphAnalyzer"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#class-component", 
            "text": "", 
            "title": "class Component"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#verticalcounter", 
            "text": "", 
            "title": "VerticalCounter"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#horizontal", 
            "text": "The  HOrizontal  class is a list of point contexts that share the same y-value\nself.append, self.x, self.y, self.alternates, self.minX, self.maxX", 
            "title": "Horizontal"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#constants", 
            "text": "", 
            "title": "Constants"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#bar", 
            "text": "", 
            "title": "Bar"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#counter", 
            "text": "", 
            "title": "Counter"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#vertical", 
            "text": "The  Vertical  class is a list of point contexts that share the same x-value\nself.append, self.x, self.y, self.alternates, self.minY, self.maxY", 
            "title": "Vertical"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#pointcontext", 
            "text": "The  PointContext  instance is a  Point  wrapper, that also takes the 3 points previous\nand next 3 points on the contour. The instance behaves like a normal point  p , but additional information is\navailable as interpreted from the point context in relation to the neighbor points. The total of 6 points is derived\nfrom the average construction of a serif, so it is possible to hold (and interpret) an entire serif sequence inside\none point context.", 
            "title": "PointContext"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#debug", 
            "text": "bool(x) -  bool  Returns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.", 
            "title": "DEBUG"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#nakedwrapper", 
            "text": "Simple wrapper to call RoboFont methods that assume a RoboFont wrapper, where we only\nhave the defcon glyph available.", 
            "title": "NakedWrapper"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#anchor_top", 
            "text": "str(object='') -  string  Return a nice string representation of the object.\nIf the argument is a string, the return value is the same object.", 
            "title": "ANCHOR_TOP"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#function-getpoints", 
            "text": "", 
            "title": "function getPoints"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#pointanalyzer", 
            "text": "", 
            "title": "PointAnalyzer"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#defconglyph", 
            "text": "This object represents a glyph and it contains contour, component, anchor\nand other assorted bits data about the glyph.  This object posts the following notifications:  ============================\nName\n============================\nGlyph.Changed\nGlyph.BeginUndo\nGlyph.EndUndo\nGlyph.BeginRedo\nGlyph.EndRedo\nGlyph.NameWillChange\nGlyph.NameChanged\nGlyph.UnicodesChanged\nGlyph.WidthChanged\nGlyph.HeightChanged\nGlyph.NoteChanged\nGlyph.LibChanged\nGlyph.ImageChanged\nGlyph.ImageWillBeDeleted\nGlyph.ContourWillBeAdded\nGlyph.ContourWillBeDeleted\nGlyph.ContoursChanged\nGlyph.ComponentWillBeAdded\nGlyph.ComponentWillBeDeleted\nGlyph.ComponentsChanged\nGlyph.AnchorWillBeAdded\nGlyph.AnchorWillBeDeleted\nGlyph.AnchorsChanged\nGlyph.GuidelineWillBeAdded\nGlyph.GuidelineWillBeDeleted\nGlyph.GuidelinesChanged\nGlyph.MarkColorChanged\nGlyph.VerticalOriginChanged\n============================  The Glyph object has list like behavior. This behavior allows you to interact\nwith contour data directly. For example, to get a particular contour::  contour = glyph[0]  To iterate over all contours::  for contour in glyph:  To get the number of contours::  contourCount = len(glyph)  To interact with components or anchors in a similar way,\nuse the  components  and  anchors  attributes.", 
            "title": "DefconGlyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#up", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "UP"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#boundingbox", 
            "text": "", 
            "title": "BoundingBox"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#spanstep", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "SPANSTEP"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer-TNBITS/#location", 
            "text": "", 
            "title": "Location"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/", 
            "text": "fonttoolbox.analyzers.glyphanalyzer\n\n\nFunctions\n\n\nVertical\n\n\nThe Vertical class is a list of point contexts that share the same x-value\nself.append, self.x, self.y, self.alternates, self.minYPoint, self.maxYPoint\n\n\nGlyphAnalyzer\n\n\nHorizontal\n\n\nThe Horizontal class is a list of point contexts that share the same y-value\nself.append, self.x, self.y, self.alternates, self.minXPoint, self.maxXPoint.\n\n\nSPANSTEP\n\n\nint(x=0) -\n int or long\nint(x, base=10) -\n int or long\n\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n\n\n int('0b100', base=0)\n4\n\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.", 
            "title": "Glyphanalyzer"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#fonttoolboxanalyzersglyphanalyzer", 
            "text": "", 
            "title": "fonttoolbox.analyzers.glyphanalyzer"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#vertical", 
            "text": "The Vertical class is a list of point contexts that share the same x-value\nself.append, self.x, self.y, self.alternates, self.minYPoint, self.maxYPoint", 
            "title": "Vertical"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#glyphanalyzer", 
            "text": "", 
            "title": "GlyphAnalyzer"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#horizontal", 
            "text": "The Horizontal class is a list of point contexts that share the same y-value\nself.append, self.x, self.y, self.alternates, self.minXPoint, self.maxXPoint.", 
            "title": "Horizontal"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#spanstep", 
            "text": "int(x=0) -  int or long\nint(x, base=10) -  int or long  Convert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.  If x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.   int('0b100', base=0)\n4", 
            "title": "SPANSTEP"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/glyphanalyzer/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/point/", 
            "text": "fonttoolbox.analyzers.point\n\n\nFunctions\n\n\nPoint\n\n\nfunction point3D\n\n\nAnswer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "Point"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/point/#fonttoolboxanalyzerspoint", 
            "text": "", 
            "title": "fonttoolbox.analyzers.point"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/point/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/point/#point", 
            "text": "", 
            "title": "Point"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/point/#function-point3d", 
            "text": "Answer p as 3D point. If it already is a list of 3 elements, then don't change\nand answer the original.", 
            "title": "function point3D"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/", 
            "text": "fonttoolbox.analyzers.pointcontext\n\n\nFunctions\n\n\nfunction point2Line\n\n\nAnswers the distance from point \n(px, py)\n to line \n((x1,\ny1), (x2, y2))\n.\n\n\nfunction insideCircle\n\n\n insideCircle(1, 1, 5)\nTrue\n\n\n insideCircle(3, 3, 3)\nFalse\n\n\n\nfunction dotProduct\n\n\nfunction pointProjectedOnLine\n\n\nAnswers the projected point \n(px, py)\n on line \n((x1, y1), (x2,\ny2))\n.  Answers \n(x1, y1)\n if there is not distance between the two\npoints of the line.\n\n\nfunction normalize\n\n\nfunction vectorLength\n\n\nnormalizedVector\n\n\nclassmethod(function) -\n method\n\n\nConvert a function to be a class method.\n\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n\nclass C:\n  def f(cls, arg1, arg2, ...): ...\n  f = classmethod(f)\n\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.\n\n\nfunction squareDistance\n\n\nAnswers the square of the distance for relative comparison and to\nsave the time of the \nsqrt\n.\n\n\nfunction test\n\n\nfunction isEven\n\n\n isEven(2)\nTrue\n\n\n isEven(1)\nFalse\n\n\n\nfunction isOdd\n\n\n isOdd(1)\nTrue\n\n\n isOdd(2)\nFalse\n\n\n\nfunction calculateAngle\n\n\nCalculate the angle between points p1 and p2. Points can be either 2D or 3D \npoint tuples or Point instances.\n\n\nfunction angleOfLines\n\n\nAnswer the angle difference (radials or default degrees) between p1--\np2 and q1--\nq2.\n\n\nPointContext\n\n\nThe PointContext instance is a Point wrapper, that also takes the 3 points previous\nand next 3 points on the contour. The instance behaves like a normal point p, but\nadditional information is available as interpreted from the point context in relation \nto the neighbor points. The total of 6 points is derived\nfrom the average construction of a serif, so it is possible to hold (and interpret) an \nentire serif sequence inside one point context.\n\n\nfunction intersection\n\n\nReturns 2D intersection point if it exists. Otherwise (None, None,\nNone) is answered. Different from the RoboFont intersection tool, we\nintersect on infinite line lengths. See also:\n\n\nhttp://en.wikipedia.org/wiki/Line-line_intersection\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.\n\n\nfunction scalexy\n\n\nfunction distance\n\n\nAnswers the distance between the points.\n\n\nPoint\n\n\nfunction isBetween\n\n\nChecks if point is on line between line endpoints. Uses epsilon\nmargin for float values, can be substituted by zero for integer\nvalues.\n\n\nfunction scalePointByVector\n\n\nfunction lucasRange\n\n\nAnswers the range stem widths for interpolation, according to\nLucas\u2019 formula.\n\n\nhttp://www.lucasfonts.com/about/interpolation-theory/\na = minStem\nz = maxStem\nn = number of interpolated stems, including the two masters\nminN = optional minimum value if normalizing, e.g. 0-1000\nmaxN = optional maximum value if normalizing\n\n\nprint Mathematics.lucasRange(32, 212, 8)\n[32, 42, 55, 72, 94, 124, 162, 212]\n\n\nprint Mathematics.lucasRange(32, 212, 8, 0, 1000)\n[0, 55, 127, 222, 346, 508, 721, 1000]\n\n\nprint Mathematics.lucasRange(32, 212, 8, 100, 200)\n[100, 106, 113, 122, 135, 151, 172, 200]", 
            "title": "Pointcontext"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#fonttoolboxanalyzerspointcontext", 
            "text": "", 
            "title": "fonttoolbox.analyzers.pointcontext"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-point2line", 
            "text": "Answers the distance from point  (px, py)  to line  ((x1,\ny1), (x2, y2)) .", 
            "title": "function point2Line"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-insidecircle", 
            "text": "insideCircle(1, 1, 5)\nTrue  insideCircle(3, 3, 3)\nFalse", 
            "title": "function insideCircle"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-dotproduct", 
            "text": "", 
            "title": "function dotProduct"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-pointprojectedonline", 
            "text": "Answers the projected point  (px, py)  on line  ((x1, y1), (x2,\ny2)) .  Answers  (x1, y1)  if there is not distance between the two\npoints of the line.", 
            "title": "function pointProjectedOnLine"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-normalize", 
            "text": "", 
            "title": "function normalize"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-vectorlength", 
            "text": "", 
            "title": "function vectorLength"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#normalizedvector", 
            "text": "classmethod(function) -  method  Convert a function to be a class method.  A class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:  class C:\n  def f(cls, arg1, arg2, ...): ...\n  f = classmethod(f)  It can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.  Class methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.", 
            "title": "normalizedVector"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-squaredistance", 
            "text": "Answers the square of the distance for relative comparison and to\nsave the time of the  sqrt .", 
            "title": "function squareDistance"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-test", 
            "text": "", 
            "title": "function test"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-iseven", 
            "text": "isEven(2)\nTrue  isEven(1)\nFalse", 
            "title": "function isEven"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-isodd", 
            "text": "isOdd(1)\nTrue  isOdd(2)\nFalse", 
            "title": "function isOdd"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-calculateangle", 
            "text": "Calculate the angle between points p1 and p2. Points can be either 2D or 3D \npoint tuples or Point instances.", 
            "title": "function calculateAngle"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-angleoflines", 
            "text": "Answer the angle difference (radials or default degrees) between p1-- p2 and q1-- q2.", 
            "title": "function angleOfLines"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#pointcontext", 
            "text": "The PointContext instance is a Point wrapper, that also takes the 3 points previous\nand next 3 points on the contour. The instance behaves like a normal point p, but\nadditional information is available as interpreted from the point context in relation \nto the neighbor points. The total of 6 points is derived\nfrom the average construction of a serif, so it is possible to hold (and interpret) an \nentire serif sequence inside one point context.", 
            "title": "PointContext"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-intersection", 
            "text": "Returns 2D intersection point if it exists. Otherwise (None, None,\nNone) is answered. Different from the RoboFont intersection tool, we\nintersect on infinite line lengths. See also:  http://en.wikipedia.org/wiki/Line-line_intersection", 
            "title": "function intersection"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-scalexy", 
            "text": "", 
            "title": "function scalexy"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-distance", 
            "text": "Answers the distance between the points.", 
            "title": "function distance"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#point", 
            "text": "", 
            "title": "Point"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-isbetween", 
            "text": "Checks if point is on line between line endpoints. Uses epsilon\nmargin for float values, can be substituted by zero for integer\nvalues.", 
            "title": "function isBetween"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-scalepointbyvector", 
            "text": "", 
            "title": "function scalePointByVector"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontext/#function-lucasrange", 
            "text": "Answers the range stem widths for interpolation, according to\nLucas\u2019 formula.  http://www.lucasfonts.com/about/interpolation-theory/\na = minStem\nz = maxStem\nn = number of interpolated stems, including the two masters\nminN = optional minimum value if normalizing, e.g. 0-1000\nmaxN = optional maximum value if normalizing  print Mathematics.lucasRange(32, 212, 8)\n[32, 42, 55, 72, 94, 124, 162, 212]  print Mathematics.lucasRange(32, 212, 8, 0, 1000)\n[0, 55, 127, 222, 346, 508, 721, 1000]  print Mathematics.lucasRange(32, 212, 8, 100, 200)\n[100, 106, 113, 122, 135, 151, 172, 200]", 
            "title": "function lucasRange"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/", 
            "text": "fonttoolbox.analyzers.pointcontextlist\n\n\nFunctions\n\n\nVertical\n\n\nThe Vertical class is a list of point contexts that share the same x-value\nself.append, self.x, self.y, self.alternates, self.minYPoint, self.maxYPoint\n\n\nDiagonal\n\n\nPointContext\n\n\nThe PointContext instance is a Point wrapper, that also takes the 3 points previous\nand next 3 points on the contour. The instance behaves like a normal point p, but\nadditional information is available as interpreted from the point context in relation \nto the neighbor points. The total of 6 points is derived\nfrom the average construction of a serif, so it is possible to hold (and interpret) an \nentire serif sequence inside one point context.\n\n\nHorizontal\n\n\nThe Horizontal class is a list of point contexts that share the same y-value\nself.append, self.x, self.y, self.alternates, self.minXPoint, self.maxXPoint.\n\n\nPointContextList\n\n\nThe PointContextList us a group of related PointContext instances that can be\nqueried and selected on their attributes.", 
            "title": "Pointcontextlist"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#fonttoolboxanalyzerspointcontextlist", 
            "text": "", 
            "title": "fonttoolbox.analyzers.pointcontextlist"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#vertical", 
            "text": "The Vertical class is a list of point contexts that share the same x-value\nself.append, self.x, self.y, self.alternates, self.minYPoint, self.maxYPoint", 
            "title": "Vertical"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#diagonal", 
            "text": "", 
            "title": "Diagonal"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#pointcontext", 
            "text": "The PointContext instance is a Point wrapper, that also takes the 3 points previous\nand next 3 points on the contour. The instance behaves like a normal point p, but\nadditional information is available as interpreted from the point context in relation \nto the neighbor points. The total of 6 points is derived\nfrom the average construction of a serif, so it is possible to hold (and interpret) an \nentire serif sequence inside one point context.", 
            "title": "PointContext"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#horizontal", 
            "text": "The Horizontal class is a list of point contexts that share the same y-value\nself.append, self.x, self.y, self.alternates, self.minXPoint, self.maxXPoint.", 
            "title": "Horizontal"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/pointcontextlist/#pointcontextlist", 
            "text": "The PointContextList us a group of related PointContext instances that can be\nqueried and selected on their attributes.", 
            "title": "PointContextList"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/segment/", 
            "text": "fonttoolbox.analyzers.segment\n\n\nFunctions\n\n\nSegment", 
            "title": "Segment"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/segment/#fonttoolboxanalyzerssegment", 
            "text": "", 
            "title": "fonttoolbox.analyzers.segment"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/segment/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/analyzers/segment/#segment", 
            "text": "", 
            "title": "Segment"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/", 
            "text": "fonttoolbox.objects\n\n\nClasses\n\n\n\n\npagebot.fonttoolbox.objects.family\n\n\npagebot.fonttoolbox.objects.font\n\n\npagebot.fonttoolbox.objects.fontinfo\n\n\npagebot.fonttoolbox.objects.glyph\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/#fonttoolboxobjects", 
            "text": "", 
            "title": "fonttoolbox.objects"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/#classes", 
            "text": "pagebot.fonttoolbox.objects.family  pagebot.fonttoolbox.objects.font  pagebot.fonttoolbox.objects.fontinfo  pagebot.fonttoolbox.objects.glyph", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/", 
            "text": "fonttoolbox.objects.family\n\n\nFunctions\n\n\nfunction getFamilyFontPaths\n\n\nFamily\n\n\nfunction getFamilies\n\n\nConstruct a dictionary of Family instances from dictionary familyPaths. It is assumed that all paths\nare valied to font files. Force key in family from dictionary familyPaths, instead of font.info.styleName.\nWhat is best practice? Keep as option?\n\n\nExample format of familyPaths dictionary:\nLIB_PATH = '/Library/Fonts/'\nSOME_SYSTEM_FONTS = {\n\n\nLet's try some plain OSX system fonts, while they are still there (not variable yet).\n\n\n'Georgia': dict(regular=LIB_PATH+'Georgia.ttf', bold=LIB_PATH+'Georgia Bold.ttf', \nitalic=LIB_PATH+'Georgia Italic.ttf', boldItalic=LIB_PATH+'Georgia Bold Italic.ttf'),\n'Verdana': dict(regular=LIB_PATH+'Verdana.ttf', bold=LIB_PATH+'Verdana Bold.ttf', \nitalic=LIB_PATH+'Verdana Italic.ttf', boldItalic=LIB_PATH+'Verdana Bold Italic.ttf'),\n}\n\n\nfunction path2Name\n\n\nAnswers the file name part of the path.\n\n\nfunction guessFamilies\n\n\nFind the family relation of all fonts in the list. Note that this cannot be a 100% safe guess.\nAnswer a dictionary with Family instances. Key is family name.\n\n\nfunction getFontPathOfFont\n\n\nfunction getSystemFontPaths\n\n\nAnswer the cleaned list of installed font names.\n\n\nFont\n\n\nStorage of font information while composing the pages.\n\n\np = pp + '/fonts/google/***REMOVED***'\n\n\np = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n pp = path2ParentPath(p)\n\n p = pp + '/fonts/typetr/BitcountGridVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n f.name\nu'BitcountGrid'\n\n\n len(f)\n101\n\n\n f.keys()[-1]\n'y'\n\n\n f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}\n\n\n variables = f.variables\n\n features = f.features\n\n f.groups\n\n f.designSpace\n{}\n\n\n f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'\n\n\n f.save()\n\n\n\nfunction getFamilyFonts", 
            "title": "Family"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#fonttoolboxobjectsfamily", 
            "text": "", 
            "title": "fonttoolbox.objects.family"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-getfamilyfontpaths", 
            "text": "", 
            "title": "function getFamilyFontPaths"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#family", 
            "text": "", 
            "title": "Family"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-getfamilies", 
            "text": "Construct a dictionary of Family instances from dictionary familyPaths. It is assumed that all paths\nare valied to font files. Force key in family from dictionary familyPaths, instead of font.info.styleName.\nWhat is best practice? Keep as option?  Example format of familyPaths dictionary:\nLIB_PATH = '/Library/Fonts/'\nSOME_SYSTEM_FONTS = {", 
            "title": "function getFamilies"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#lets-try-some-plain-osx-system-fonts-while-they-are-still-there-not-variable-yet", 
            "text": "'Georgia': dict(regular=LIB_PATH+'Georgia.ttf', bold=LIB_PATH+'Georgia Bold.ttf', \nitalic=LIB_PATH+'Georgia Italic.ttf', boldItalic=LIB_PATH+'Georgia Bold Italic.ttf'),\n'Verdana': dict(regular=LIB_PATH+'Verdana.ttf', bold=LIB_PATH+'Verdana Bold.ttf', \nitalic=LIB_PATH+'Verdana Italic.ttf', boldItalic=LIB_PATH+'Verdana Bold Italic.ttf'),\n}", 
            "title": "Let's try some plain OSX system fonts, while they are still there (not variable yet)."
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-path2name", 
            "text": "Answers the file name part of the path.", 
            "title": "function path2Name"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-guessfamilies", 
            "text": "Find the family relation of all fonts in the list. Note that this cannot be a 100% safe guess.\nAnswer a dictionary with Family instances. Key is family name.", 
            "title": "function guessFamilies"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-getfontpathoffont", 
            "text": "", 
            "title": "function getFontPathOfFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-getsystemfontpaths", 
            "text": "Answer the cleaned list of installed font names.", 
            "title": "function getSystemFontPaths"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#font", 
            "text": "Storage of font information while composing the pages.", 
            "title": "Font"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#p-pp-fontsgoogleroboto-vfttf", 
            "text": "", 
            "title": "p = pp + '/fonts/google/***REMOVED***'"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#p-pp-fontsfontbureauamstelvaralpha-variationsttf", 
            "text": "import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  pp = path2ParentPath(p)  p = pp + '/fonts/typetr/BitcountGridVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  f.name\nu'BitcountGrid'  len(f)\n101  f.keys()[-1]\n'y'  f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}  variables = f.variables  features = f.features  f.groups  f.designSpace\n{}  f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'  f.save()", 
            "title": "p = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/family/#function-getfamilyfonts", 
            "text": "", 
            "title": "function getFamilyFonts"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/", 
            "text": "fonttoolbox.objects.font\n\n\nFunctions\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nFont\n\n\nStorage of font information while composing the pages.\n\n\np = pp + '/fonts/google/***REMOVED***'\n\n\np = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n pp = path2ParentPath(p)\n\n p = pp + '/fonts/typetr/BitcountGridVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n f.name\nu'BitcountGrid'\n\n\n len(f)\n101\n\n\n f.keys()[-1]\n'y'\n\n\n f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}\n\n\n variables = f.variables\n\n features = f.features\n\n f.groups\n\n f.designSpace\n{}\n\n\n f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'\n\n\n f.save()\n\n\n\nTTLibError\n\n\nAXES\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nNSFont\n\n\nfunction getFontPathOfFont\n\n\nkCTFontURLAttribute\n\n\nobjc.pyobjc_unicode\n\n\nSubclass of unicode for representing NSString values. Use \nthe method nsstring to access the NSString. \nNote that instances are immutable and won't be updated when\nthe value of the NSString changes.\n\n\nOTFKernReader\n\n\nCTFontDescriptorCreateWithNameAndSize\n\n\nFontInfo\n\n\nRead-only access to font information, such as names, character set and supported\nOpenType features.\n\n\nCTFontDescriptorCopyAttribute\n\n\nGlyph\n\n\nThis Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n g = f['a']\n\n g.name\n'a'\n\n\n len(g.points)\n48\n\n\n g.points[-1].onCurve\nTrue\n\n\n contours = g.contours\n\n len(contours)\n3\n\n\n path = g.path\n\n print path\n\nBezierPath\n\n\n\n nspath = path.getNSBezierPath()\n\n bounds = nspath.bounds()\n\n print bounds\n\nNSRect origin=\nNSPoint x=40.0 y=-16.0\n size=\nNSSize width=529.0 height=572.0\n\n\n\n len(bounds)\n2\n\n\n len(bounds[0])\n2\n\n\n len(bounds[1])\n2\n\n\n print bounds[0]\n\nNSPoint x=40.0 y=-16.0\n\n\n\n bounds[0][0]\n40.0", 
            "title": "Font"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#fonttoolboxobjectsfont", 
            "text": "", 
            "title": "fonttoolbox.objects.font"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#font", 
            "text": "Storage of font information while composing the pages.", 
            "title": "Font"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#p-pp-fontsgoogleroboto-vfttf", 
            "text": "", 
            "title": "p = pp + '/fonts/google/***REMOVED***'"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#p-pp-fontsfontbureauamstelvaralpha-variationsttf", 
            "text": "import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  pp = path2ParentPath(p)  p = pp + '/fonts/typetr/BitcountGridVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  f.name\nu'BitcountGrid'  len(f)\n101  f.keys()[-1]\n'y'  f.axes\n{'rndi': (0.0, 1000.0, 1000.0), 'rndo': (0.0, 1000.0, 1000.0), 'sqri': (0.0, 1000.0, 1000.0), 'sqro': (0.0, 1000.0, 1000.0), 'line': (0.0, 1000.0, 1000.0), 'open': (0.0, 0.0, 1000.0), 'wght': (0.0, 500.0, 1000.0)}  variables = f.variables  features = f.features  f.groups  f.designSpace\n{}  f.install()\nu'BitcountGrid-SingleCircleSquare-wght500rndi1000rndo1000line1000sqri1000sqro1000open0'  f.save()", 
            "title": "p = pp + '/fonts/fontbureau/AmstelvarAlpha-Variations.ttf'"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#ttliberror", 
            "text": "", 
            "title": "TTLibError"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#axes", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "AXES"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#nsfont", 
            "text": "", 
            "title": "NSFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#function-getfontpathoffont", 
            "text": "", 
            "title": "function getFontPathOfFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#kctfonturlattribute", 
            "text": "objc.pyobjc_unicode  Subclass of unicode for representing NSString values. Use \nthe method nsstring to access the NSString. \nNote that instances are immutable and won't be updated when\nthe value of the NSString changes.", 
            "title": "kCTFontURLAttribute"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#otfkernreader", 
            "text": "", 
            "title": "OTFKernReader"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#ctfontdescriptorcreatewithnameandsize", 
            "text": "", 
            "title": "CTFontDescriptorCreateWithNameAndSize"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#fontinfo", 
            "text": "Read-only access to font information, such as names, character set and supported\nOpenType features.", 
            "title": "FontInfo"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#ctfontdescriptorcopyattribute", 
            "text": "", 
            "title": "CTFontDescriptorCopyAttribute"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/font/#glyph", 
            "text": "This Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.   import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  g = f['a']  g.name\n'a'  len(g.points)\n48  g.points[-1].onCurve\nTrue  contours = g.contours  len(contours)\n3  path = g.path  print path BezierPath   nspath = path.getNSBezierPath()  bounds = nspath.bounds()  print bounds NSRect origin= NSPoint x=40.0 y=-16.0  size= NSSize width=529.0 height=572.0   len(bounds)\n2  len(bounds[0])\n2  len(bounds[1])\n2  print bounds[0] NSPoint x=40.0 y=-16.0   bounds[0][0]\n40.0", 
            "title": "Glyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/", 
            "text": "fonttoolbox.objects.fontinfo\n\n\nFunctions\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\ncached_property\n\n\nA property that is only computed once per instance and then replaces itself\nwith an ordinary attribute. Deleting the attribute resets the property.\nSource: https://github.com/bottlepy/bottle/commit/fa7733e075da0d790d809aa3d2f53071897e6f76\n\n\nfunction getBestCmap\n\n\nReturn a unicode -\n glyphName dictionary from the 'best' unicode cmap that the font\ncontains. In order of preference, the font will be searched for cmaps 3,10, 3,1 and 0,3.\n\n\n from fontTools.ttLib import TTFont\n\n from tnTestFonts import getFontPath\n\n path = getFontPath(\"CusterRE-RegularS2.ttf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n248\n\n\n max(cmap)\n64258\n\n\n path = getFontPath(\"ProW6.otf\")\n\n font = TTFont(path)\n\n cmap = getBestCmap(font)\n\n len(cmap)\n13641\n\n\n print hex(max(cmap))  # if result \n 0xffff then it must have been a 3,10 cmap\n0x2f9f4\n\n\n getBestCmap(font, cmapPreferences=[(123, 456)])\nTraceback (most recent call last):\n\n\n\n...\nValueError: None of the requested cmap subtables were found\n\n\nFontInfo\n\n\nRead-only access to font information, such as names, character set and supported\nOpenType features.", 
            "title": "Fontinfo"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/#fonttoolboxobjectsfontinfo", 
            "text": "", 
            "title": "fonttoolbox.objects.fontinfo"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/#cached_property", 
            "text": "A property that is only computed once per instance and then replaces itself\nwith an ordinary attribute. Deleting the attribute resets the property.\nSource: https://github.com/bottlepy/bottle/commit/fa7733e075da0d790d809aa3d2f53071897e6f76", 
            "title": "cached_property"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/#function-getbestcmap", 
            "text": "Return a unicode -  glyphName dictionary from the 'best' unicode cmap that the font\ncontains. In order of preference, the font will be searched for cmaps 3,10, 3,1 and 0,3.   from fontTools.ttLib import TTFont  from tnTestFonts import getFontPath  path = getFontPath(\"CusterRE-RegularS2.ttf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n248  max(cmap)\n64258  path = getFontPath(\"ProW6.otf\")  font = TTFont(path)  cmap = getBestCmap(font)  len(cmap)\n13641  print hex(max(cmap))  # if result   0xffff then it must have been a 3,10 cmap\n0x2f9f4  getBestCmap(font, cmapPreferences=[(123, 456)])\nTraceback (most recent call last):  ...\nValueError: None of the requested cmap subtables were found", 
            "title": "function getBestCmap"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/fontinfo/#fontinfo", 
            "text": "Read-only access to font information, such as names, character set and supported\nOpenType features.", 
            "title": "FontInfo"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/", 
            "text": "fonttoolbox.objects.glyph\n\n\nFunctions\n\n\nNSFont\n\n\nC\n\n\nfloat(x) -\n floating point number\n\n\nConvert a string or number to a floating point number, if possible.\n\n\nTTFont\n\n\nThe main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.\n\n\nTTLibError\n\n\nGlyphAnalyzer\n\n\nPoint\n\n\n p = Point(101, 303, True)\n\n p.onCurve is False\nFalse\n\n\n print p\nPt(101,303,On)\n\n\n\nF\n\n\nfloat(x) -\n floating point number\n\n\nConvert a string or number to a floating point number, if possible.\n\n\nFontInfo\n\n\nRead-only access to font information, such as names, character set and supported\nOpenType features.\n\n\nGlyph\n\n\nThis Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.\n\n\n import pagebot\n\n from pagebot.toolbox.transformer import *\n\n p = module2Path(pagebot)\n\n p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'\n\n from pagebot.fonttoolbox.objects.font import Font\n\n f = Font(p, install=False)\n\n g = f['a']\n\n g.name\n'a'\n\n\n len(g.points)\n48\n\n\n g.points[-1].onCurve\nTrue\n\n\n contours = g.contours\n\n len(contours)\n3\n\n\n path = g.path\n\n print path\n\nBezierPath\n\n\n\n nspath = path.getNSBezierPath()\n\n bounds = nspath.bounds()\n\n print bounds\n\nNSRect origin=\nNSPoint x=40.0 y=-16.0\n size=\nNSSize width=529.0 height=572.0\n\n\n\n len(bounds)\n2\n\n\n len(bounds[0])\n2\n\n\n len(bounds[1])\n2\n\n\n print bounds[0]\n\nNSPoint x=40.0 y=-16.0\n\n\n\n bounds[0][0]\n40.0\n\n\n\nSegment\n\n\n p0 = Point(101, 303, True)\n\n p1 = Point(202, 404, False)\n\n p2 = Point(303, 808, False)\n\n p3 = Point(909, 808, True)\n\n points = [p0, p1, p2, p3]\n\n s = Segment(points)\n\n len(s)\n4\n\n\n p4 = Point(111, 313, False)\n\n s.append(p4)\n\n len(s)\n5\n\n\n s.points[-1].onCurve\nFalse\n\n\n\nfunction point2D\n\n\nAnswer the 2D origin as combination of p and offset.", 
            "title": "Glyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#fonttoolboxobjectsglyph", 
            "text": "", 
            "title": "fonttoolbox.objects.glyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#nsfont", 
            "text": "", 
            "title": "NSFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#c", 
            "text": "float(x) -  floating point number  Convert a string or number to a floating point number, if possible.", 
            "title": "C"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#ttfont", 
            "text": "The main font object. It manages file input and output, and offers\n    a convenient way of accessing tables.\n    Tables will be only decompiled when necessary, ie. when they're actually\n    accessed. This means that simple operations can be extremely fast.", 
            "title": "TTFont"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#ttliberror", 
            "text": "", 
            "title": "TTLibError"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#glyphanalyzer", 
            "text": "", 
            "title": "GlyphAnalyzer"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#point", 
            "text": "p = Point(101, 303, True)  p.onCurve is False\nFalse  print p\nPt(101,303,On)", 
            "title": "Point"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#f", 
            "text": "float(x) -  floating point number  Convert a string or number to a floating point number, if possible.", 
            "title": "F"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#fontinfo", 
            "text": "Read-only access to font information, such as names, character set and supported\nOpenType features.", 
            "title": "FontInfo"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#glyph", 
            "text": "This Glyph class is a wrapper around the glyph structure of a TrueType\nFont. It is supposed to copy the functions of the RoboFont raw glyph, for\nall needed functions in PageBot. It is not complete, will be added to when\nneeded.   import pagebot  from pagebot.toolbox.transformer import *  p = module2Path(pagebot)  p = path2ParentPath(p) + '/fonts/typetr/PromiseVar.ttf'  from pagebot.fonttoolbox.objects.font import Font  f = Font(p, install=False)  g = f['a']  g.name\n'a'  len(g.points)\n48  g.points[-1].onCurve\nTrue  contours = g.contours  len(contours)\n3  path = g.path  print path BezierPath   nspath = path.getNSBezierPath()  bounds = nspath.bounds()  print bounds NSRect origin= NSPoint x=40.0 y=-16.0  size= NSSize width=529.0 height=572.0   len(bounds)\n2  len(bounds[0])\n2  len(bounds[1])\n2  print bounds[0] NSPoint x=40.0 y=-16.0   bounds[0][0]\n40.0", 
            "title": "Glyph"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#segment", 
            "text": "p0 = Point(101, 303, True)  p1 = Point(202, 404, False)  p2 = Point(303, 808, False)  p3 = Point(909, 808, True)  points = [p0, p1, p2, p3]  s = Segment(points)  len(s)\n4  p4 = Point(111, 313, False)  s.append(p4)  len(s)\n5  s.points[-1].onCurve\nFalse", 
            "title": "Segment"
        }, 
        {
            "location": "/pagebot/fonttoolbox/objects/glyph/#function-point2d", 
            "text": "Answer the 2D origin as combination of p and offset.", 
            "title": "function point2D"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/", 
            "text": "fonttoolbox.unicodes\n\n\nClasses\n\n\n\n\npagebot.fonttoolbox.unicodes.unicoderanges\n\n\npagebot.fonttoolbox.unicodes.unicoderangesdata\n\n\n\n\nModules\n\n\nFunctions", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/#fonttoolboxunicodes", 
            "text": "", 
            "title": "fonttoolbox.unicodes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/#classes", 
            "text": "pagebot.fonttoolbox.unicodes.unicoderanges  pagebot.fonttoolbox.unicodes.unicoderangesdata", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/", 
            "text": "fonttoolbox.unicodes.unicoderanges\n\n\nFunctions\n\n\nfunction countCoverageByRangeName\n\n\nGiven a set of characters, count how many characters are present in each (used) range.\nThe return value is a dict with range names as keys, and (count, size) tuples as values.\n'count' is the number of characters used in the range, 'size' is the total amount of\ncharacters that belong to the range. Ranges that are not used are not included in the\ndict, so 'count' is always greater than 0.\nCharacters for which no range can be found are counted under a key of None, the value\nwill be (count, None).\n\n\n countCoverageByRangeName([65, 66])\n{'Basic Latin': (2, 128)}\n\n\n countCoverageByRangeName([65, 66, 600])\n{'IPA Extensions': (1, 96), 'Basic Latin': (2, 128)}\n\n\n countCoverageByRangeName([8192])\n{'General Punctuation': (1, 112)}\n\n\n countCoverageByRangeName([100000])\n{None: (1, None)}\n\n\n\nunicodeRanges\n\n\nlist() -\n new empty list\nlist(iterable) -\n new list initialized from iterable's items\n\n\nfunction _getUnicodeRangeBits_ReferenceImplementation\n\n\n unicodes = range(3000)\n\n assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 3000)\n\n assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)\n\n unicodes = range(3000, 13000)\n\n assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 1)\n\n assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 7)\n\n assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 20)\n\n assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)\n\n\n\n_openTypeScriptToUnicodeRangeNameMapping\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction getUnicodeRange\n\n\nReturn the unicode range that uni belongs to, if any. If a range is found,\na (bit, name, rangeMinimum, rangeMaximum) tuple is returned. If no range is found,\n(None, None, None, None) is returned.\n\n\n getUnicodeRange(65)\n(0, 'Basic Latin', 0, 127)\n\n\n getUnicodeRange(127)\n(0, 'Basic Latin', 0, 127)\n\n\n getUnicodeRange(128)\n(1, 'Latin-1 Supplement', 128, 255)\n\n\n getUnicodeRange(129)\n(1, 'Latin-1 Supplement', 128, 255)\n\n\n getUnicodeRange(0x200)\n(3, 'Latin Extended-B', 384, 591)\n\n\n getUnicodeRange(0x300)\n(6, 'Combining Diacritical Marks', 768, 879)\n\n\n getUnicodeRange(0x3000)\n(48, 'CJK Symbols And Punctuation', 12288, 12351)\n\n\n getUnicodeRange(0xffff)\n(69, 'Specials', 65520, 65535)\n\n\n getUnicodeRange(1000000000)\n(None, None, None, None)\n\n\n print getUnicodeRange(0x10840)\n(None, None, None, None)\n\n\n\n_byBit\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction distributeUnicodes\n\n\nReturn a dictionary with range names as keys, and subsets of unicodes\nbelonging to the respective range as values. None is used as a key for\ncharacters that don't fall into any range.\n\n\n distributeUnicodes([65])\n{'Basic Latin': [65]}\n\n\n distributeUnicodes([100000])\n{None: [100000]}\n\n\n distributeUnicodes([65, 165])\n{'Latin-1 Supplement': [165], 'Basic Latin': [65]}\n\n\n unicodes = range(65, 70) + range(6000, 6005) + [100000]\n\n ranges = distributeUnicodes(unicodes)\n\n ranges\n{None: [100000], 'Tagbanwa': [6000, 6001, 6002, 6003, 6004], 'Basic Latin': [65, 66, 67, 68, 69]}\n\n\n all = set()\n\n for unis in ranges.values():\n... all.update(unis)\n\n\n\n...\n\n\n assert all == set(unicodes)\n\n\n\nfunction getUnicodeRangesByScriptTag\n\n\nGiven an OpenType script tag, return a list of unicode ranges, expressed as\n(bit, name, rangeMinimum, rangeMaximum) tuples. Raise KeyError if no matching\nrange is found.\n\n\nNote that OpenType script tags and unicode ranges do not match completely, so\nit's not always possible to find range based on a script tag.\n\n\n getUnicodeRangesByScriptTag(\"hebr\")\n[(11, 'Hebrew', 1424, 1535)]\n\n\n getUnicodeRangesByScriptTag(\"cyrl\")\n[(9, 'Cyrillic', 1024, 1279), (9, 'Cyrillic Supplement', 1280, 1327), (9, 'Cyrillic Extended-A', 11744, 11775), (9, 'Cyrillic Extended-B', 42560, 42655)]\n\n\n getUnicodeRangesByScriptTag(\"grek\")\n[(7, 'Greek and Coptic', 880, 1023)]\n\n\n getUnicodeRangesByScriptTag(\"copt\")\n[(7, 'Greek and Coptic', 880, 1023), (8, 'Coptic', 11392, 11519)]\n\n\n getUnicodeRangesByScriptTag(\"arab\")\n[(13, 'Arabic', 1536, 1791), (13, 'Arabic Supplement', 1872, 1919)]\n\n\n getUnicodeRangesByScriptTag(\"latn\")\n[(0, 'Basic Latin', 0, 127), (1, 'Latin-1 Supplement', 128, 255), (2, 'Latin Extended-A', 256, 383), (3, 'Latin Extended-B', 384, 591), (29, 'Latin Extended Additional', 7680, 7935), (29, 'Latin Extended-C', 11360, 11391), (29, 'Latin Extended-D', 42784, 43007)]\n\n\n getUnicodeRangesByScriptTag(\"deva\")\n[(15, 'Devanagari', 2304, 2431)]\n\n\n getUnicodeRangesByScriptTag(\"dev2\")\n[(15, 'Devanagari', 2304, 2431)]\n\n\n getUnicodeRangesByScriptTag(\"linb\")\n[(101, 'Linear B Syllabary', 65536, 65663), (101, 'Linear B Ideograms', 65664, 65791), (101, 'Aegean Numbers', 65792, 65855)]\n\n\n getUnicodeRangesByScriptTag(\"mand\")\nTraceback (most recent call last):\n\n\n\n...\nKeyError: \"no unicode ranges euivalent for 'mand' script found\"\n\n\n_byRangeMinimum\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction getUnicodeRangeByBit\n\n\nGiven a bit number for a OS/2 unicode range, return a list of (name, rangeMinimum, rangeMaximum) tuples.\n\n\n getUnicodeRangeByBit(100)\n[('Syloti Nagri', 43008, 43055)]\n\n\n getUnicodeRangeByBit(31)\n[('General Punctuation', 8192, 8303), ('Supplemental Punctuation', 11776, 11903)]\n\n\n getUnicodeRangeByBit(999)\nTraceback (most recent call last):\n\n\n\n...\nKeyError: 999\n\n\nbisect_right\n\n\nbisect(a, x[, lo[, hi]]) -\n index\nbisect_right(a, x[, lo[, hi]]) -\n index\n\n\nReturn the index where to insert item x in list a, assuming a is sorted.\n\n\nThe return value i is such that all e in a[:i] have e \n= x, and all e in\na[i:] have e \n x.  So if x already appears in the list, i points just\nbeyond the rightmost x already there\n\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n\n\nfunction packRangeBits\n\n\nGiven a set of bit numbers, return the corresponding ulUnicodeRange1, ulUnicodeRange2,\nulUnicodeRange3 and ulUnicodeRange4 for the OS/2 table.\n\n\n packRangeBits(set([0]))\n(1, 0, 0, 0)\n\n\n packRangeBits(set([32]))\n(0, 1, 0, 0)\n\n\n packRangeBits(set([96]))\n(0, 0, 0, 1)\n\n\n packRangeBits(set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 65, 98]))\n(4294967295, 1, 2, 4)\n\n\n packRangeBits(set(range(128)))\n(4294967295, 4294967295, 4294967295, 4294967295)\n\n\n 0xffffffff\n4294967295\n\n\n\notScriptTags\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction _testAll\n\n\n count = 0\n\n for bit, name, rangeMinimum, rangeMaximum in unicodeRanges:\n... for uni in range(rangeMinimum, rangeMaximum+1):\n\n\n\n... assert getUnicodeRange(uni)[0] == bit\n... count += 1\n...\n\n\n count\n181420\n\n\n\nfunction getUnicodeRangeBits\n\n\nReturn a set of range bits. Each bit number represents the presence of\nat least one character in that range.\n\n\n sorted(getUnicodeRangeBits(range(32, 500)))\n[0, 1, 2, 3]\n\n\n sorted(getUnicodeRangeBits([50, 500, 5000, 50000]))\n[0, 3, 56, 75]\n\n\n sorted(getUnicodeRangeBits([6399]))  # not in any range\n[]\n\n\n\nfunction _runDocTests\n\n\nbisect_left\n\n\nbisect_left(a, x[, lo[, hi]]) -\n index\n\n\nReturn the index where to insert item x in list a, assuming a is sorted.\n\n\nThe return value i is such that all e in a[:i] have e \n x, and all e in\na[i:] have e \n= x.  So if x already appears in the list, i points just\nbefore the leftmost x already there.\n\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n\n\n_byName\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)\n\n\nfunction _distributeUnicodes_ReferenceImplementation\n\n\n unicodes = range(3000)\n\n assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 3000)\n\n assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)\n\n unicodes = range(3000, 13000)\n\n assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 1)\n\n assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 7)\n\n assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 20)\n\n assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)\n\n unicodes = range(10, 19000, 1)\n\n all = []\n\n for unis in distributeUnicodes(unicodes).values():\n... all.extend(unis)\n\n\n\n...\n\n\n all.sort()\n\n assert all == unicodes\n\n\n\nfunction countCoverageByRangeBit\n\n\nGiven a set of characters, count how many characters are present in each (used) range.\nThe return value is a dict with range bits as keys, and (count, size) tuples as values.\n'count' is the number of characters used in the range, 'size' is the total amount of\ncharacters that belong to the range. Ranges that are not used are not included in the\ndict, so 'count' is always greater than 0.\nCharacters for which no range can be found are counted under a key of None, the value\nwill be (count, None).\n\n\n countCoverageByRangeBit([65, 66])\n{0: (2, 128)}\n\n\n countCoverageByRangeBit([65, 66, 600])\n{0: (2, 128), 4: (1, 288)}\n\n\n countCoverageByRangeBit([8192])\n{31: (1, 240)}\n\n\n countCoverageByRangeBit([100000])\n{None: (1, None)}\n\n\n\n_rangeMinimums\n\n\nlist() -\n new empty list\nlist(iterable) -\n new list initialized from iterable's items\n\n\nfunction _countCoverage\n\n\n _countCoverage([65, 66], byName=False)\n{0: (2, 128)}\n\n\n _countCoverage([65, 66], byName=True)\n{'Basic Latin': (2, 128)}\n\n\n _countCoverage([65, 66, 600], byName=True)\n{'IPA Extensions': (1, 96), 'Basic Latin': (2, 128)}\n\n\n _countCoverage([8192], byName=True)\n{'General Punctuation': (1, 112)}\n\n\n _countCoverage([8192], byName=False)\n{31: (1, 240)}\n\n\n\nfunction _buildByBitDict\n\n\nfunction unpackRangeBits\n\n\nGiven the ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3, ulUnicodeRange4 values\nfrom the OS/2 table, return a set of bit numbers.\n\n\n unpackRangeBits(0x0, 0x0, 0x0, 0x0)\nset([])\n\n\n unpackRangeBits(0x1, 0x0, 0x0, 0x0)\nset([0])\n\n\n unpackRangeBits(0x1, 0x1, 0x1, 0x1)\nset([0, 32, 64, 96])\n\n\n unpackRangeBits(0xffffffff, 0x1, 0x2, 0x4)\nset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 65, 98])\n\n\n\nfunction getUnicodeRangeByName\n\n\nGiven the name for a OS/2 unicode range, return a (bit, rangeMinimum, rangeMaximum) tuple.\n\n\n getUnicodeRangeByName(\"Basic Latin\")\n(0, 0, 127)\n\n\n getUnicodeRangeByName(\"Katakana Phonetic Extensions\")\n(50, 12784, 12799)\n\n\n getUnicodeRangeByName(\"Bad Name\")\nTraceback (most recent call last):\n\n\n\n...\nKeyError: 'Bad Name'", 
            "title": "Unicoderanges"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#fonttoolboxunicodesunicoderanges", 
            "text": "", 
            "title": "fonttoolbox.unicodes.unicoderanges"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-countcoveragebyrangename", 
            "text": "Given a set of characters, count how many characters are present in each (used) range.\nThe return value is a dict with range names as keys, and (count, size) tuples as values.\n'count' is the number of characters used in the range, 'size' is the total amount of\ncharacters that belong to the range. Ranges that are not used are not included in the\ndict, so 'count' is always greater than 0.\nCharacters for which no range can be found are counted under a key of None, the value\nwill be (count, None).   countCoverageByRangeName([65, 66])\n{'Basic Latin': (2, 128)}  countCoverageByRangeName([65, 66, 600])\n{'IPA Extensions': (1, 96), 'Basic Latin': (2, 128)}  countCoverageByRangeName([8192])\n{'General Punctuation': (1, 112)}  countCoverageByRangeName([100000])\n{None: (1, None)}", 
            "title": "function countCoverageByRangeName"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#unicoderanges", 
            "text": "list() -  new empty list\nlist(iterable) -  new list initialized from iterable's items", 
            "title": "unicodeRanges"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-_getunicoderangebits_referenceimplementation", 
            "text": "unicodes = range(3000)  assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)  unicodes = range(10, 3000)  assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)  unicodes = range(3000, 13000)  assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 1)  assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 7)  assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 20)  assert getUnicodeRangeBits(unicodes) == _getUnicodeRangeBits_ReferenceImplementation(unicodes)", 
            "title": "function _getUnicodeRangeBits_ReferenceImplementation"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#_opentypescripttounicoderangenamemapping", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "_openTypeScriptToUnicodeRangeNameMapping"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-getunicoderange", 
            "text": "Return the unicode range that uni belongs to, if any. If a range is found,\na (bit, name, rangeMinimum, rangeMaximum) tuple is returned. If no range is found,\n(None, None, None, None) is returned.   getUnicodeRange(65)\n(0, 'Basic Latin', 0, 127)  getUnicodeRange(127)\n(0, 'Basic Latin', 0, 127)  getUnicodeRange(128)\n(1, 'Latin-1 Supplement', 128, 255)  getUnicodeRange(129)\n(1, 'Latin-1 Supplement', 128, 255)  getUnicodeRange(0x200)\n(3, 'Latin Extended-B', 384, 591)  getUnicodeRange(0x300)\n(6, 'Combining Diacritical Marks', 768, 879)  getUnicodeRange(0x3000)\n(48, 'CJK Symbols And Punctuation', 12288, 12351)  getUnicodeRange(0xffff)\n(69, 'Specials', 65520, 65535)  getUnicodeRange(1000000000)\n(None, None, None, None)  print getUnicodeRange(0x10840)\n(None, None, None, None)", 
            "title": "function getUnicodeRange"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#_bybit", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "_byBit"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-distributeunicodes", 
            "text": "Return a dictionary with range names as keys, and subsets of unicodes\nbelonging to the respective range as values. None is used as a key for\ncharacters that don't fall into any range.   distributeUnicodes([65])\n{'Basic Latin': [65]}  distributeUnicodes([100000])\n{None: [100000]}  distributeUnicodes([65, 165])\n{'Latin-1 Supplement': [165], 'Basic Latin': [65]}  unicodes = range(65, 70) + range(6000, 6005) + [100000]  ranges = distributeUnicodes(unicodes)  ranges\n{None: [100000], 'Tagbanwa': [6000, 6001, 6002, 6003, 6004], 'Basic Latin': [65, 66, 67, 68, 69]}  all = set()  for unis in ranges.values():\n... all.update(unis)  ...   assert all == set(unicodes)", 
            "title": "function distributeUnicodes"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-getunicoderangesbyscripttag", 
            "text": "Given an OpenType script tag, return a list of unicode ranges, expressed as\n(bit, name, rangeMinimum, rangeMaximum) tuples. Raise KeyError if no matching\nrange is found.  Note that OpenType script tags and unicode ranges do not match completely, so\nit's not always possible to find range based on a script tag.   getUnicodeRangesByScriptTag(\"hebr\")\n[(11, 'Hebrew', 1424, 1535)]  getUnicodeRangesByScriptTag(\"cyrl\")\n[(9, 'Cyrillic', 1024, 1279), (9, 'Cyrillic Supplement', 1280, 1327), (9, 'Cyrillic Extended-A', 11744, 11775), (9, 'Cyrillic Extended-B', 42560, 42655)]  getUnicodeRangesByScriptTag(\"grek\")\n[(7, 'Greek and Coptic', 880, 1023)]  getUnicodeRangesByScriptTag(\"copt\")\n[(7, 'Greek and Coptic', 880, 1023), (8, 'Coptic', 11392, 11519)]  getUnicodeRangesByScriptTag(\"arab\")\n[(13, 'Arabic', 1536, 1791), (13, 'Arabic Supplement', 1872, 1919)]  getUnicodeRangesByScriptTag(\"latn\")\n[(0, 'Basic Latin', 0, 127), (1, 'Latin-1 Supplement', 128, 255), (2, 'Latin Extended-A', 256, 383), (3, 'Latin Extended-B', 384, 591), (29, 'Latin Extended Additional', 7680, 7935), (29, 'Latin Extended-C', 11360, 11391), (29, 'Latin Extended-D', 42784, 43007)]  getUnicodeRangesByScriptTag(\"deva\")\n[(15, 'Devanagari', 2304, 2431)]  getUnicodeRangesByScriptTag(\"dev2\")\n[(15, 'Devanagari', 2304, 2431)]  getUnicodeRangesByScriptTag(\"linb\")\n[(101, 'Linear B Syllabary', 65536, 65663), (101, 'Linear B Ideograms', 65664, 65791), (101, 'Aegean Numbers', 65792, 65855)]  getUnicodeRangesByScriptTag(\"mand\")\nTraceback (most recent call last):  ...\nKeyError: \"no unicode ranges euivalent for 'mand' script found\"", 
            "title": "function getUnicodeRangesByScriptTag"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#_byrangeminimum", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "_byRangeMinimum"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-getunicoderangebybit", 
            "text": "Given a bit number for a OS/2 unicode range, return a list of (name, rangeMinimum, rangeMaximum) tuples.   getUnicodeRangeByBit(100)\n[('Syloti Nagri', 43008, 43055)]  getUnicodeRangeByBit(31)\n[('General Punctuation', 8192, 8303), ('Supplemental Punctuation', 11776, 11903)]  getUnicodeRangeByBit(999)\nTraceback (most recent call last):  ...\nKeyError: 999", 
            "title": "function getUnicodeRangeByBit"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#bisect_right", 
            "text": "bisect(a, x[, lo[, hi]]) -  index\nbisect_right(a, x[, lo[, hi]]) -  index  Return the index where to insert item x in list a, assuming a is sorted.  The return value i is such that all e in a[:i] have e  = x, and all e in\na[i:] have e   x.  So if x already appears in the list, i points just\nbeyond the rightmost x already there  Optional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.", 
            "title": "bisect_right"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-packrangebits", 
            "text": "Given a set of bit numbers, return the corresponding ulUnicodeRange1, ulUnicodeRange2,\nulUnicodeRange3 and ulUnicodeRange4 for the OS/2 table.   packRangeBits(set([0]))\n(1, 0, 0, 0)  packRangeBits(set([32]))\n(0, 1, 0, 0)  packRangeBits(set([96]))\n(0, 0, 0, 1)  packRangeBits(set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 65, 98]))\n(4294967295, 1, 2, 4)  packRangeBits(set(range(128)))\n(4294967295, 4294967295, 4294967295, 4294967295)  0xffffffff\n4294967295", 
            "title": "function packRangeBits"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#otscripttags", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "otScriptTags"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-_testall", 
            "text": "count = 0  for bit, name, rangeMinimum, rangeMaximum in unicodeRanges:\n... for uni in range(rangeMinimum, rangeMaximum+1):  ... assert getUnicodeRange(uni)[0] == bit\n... count += 1\n...   count\n181420", 
            "title": "function _testAll"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-getunicoderangebits", 
            "text": "Return a set of range bits. Each bit number represents the presence of\nat least one character in that range.   sorted(getUnicodeRangeBits(range(32, 500)))\n[0, 1, 2, 3]  sorted(getUnicodeRangeBits([50, 500, 5000, 50000]))\n[0, 3, 56, 75]  sorted(getUnicodeRangeBits([6399]))  # not in any range\n[]", 
            "title": "function getUnicodeRangeBits"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-_rundoctests", 
            "text": "", 
            "title": "function _runDocTests"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#bisect_left", 
            "text": "bisect_left(a, x[, lo[, hi]]) -  index  Return the index where to insert item x in list a, assuming a is sorted.  The return value i is such that all e in a[:i] have e   x, and all e in\na[i:] have e  = x.  So if x already appears in the list, i points just\nbefore the leftmost x already there.  Optional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.", 
            "title": "bisect_left"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#_byname", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "_byName"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-_distributeunicodes_referenceimplementation", 
            "text": "unicodes = range(3000)  assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)  unicodes = range(10, 3000)  assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)  unicodes = range(3000, 13000)  assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 1)  assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 7)  assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 20)  assert distributeUnicodes(unicodes) == _distributeUnicodes_ReferenceImplementation(unicodes)  unicodes = range(10, 19000, 1)  all = []  for unis in distributeUnicodes(unicodes).values():\n... all.extend(unis)  ...   all.sort()  assert all == unicodes", 
            "title": "function _distributeUnicodes_ReferenceImplementation"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-countcoveragebyrangebit", 
            "text": "Given a set of characters, count how many characters are present in each (used) range.\nThe return value is a dict with range bits as keys, and (count, size) tuples as values.\n'count' is the number of characters used in the range, 'size' is the total amount of\ncharacters that belong to the range. Ranges that are not used are not included in the\ndict, so 'count' is always greater than 0.\nCharacters for which no range can be found are counted under a key of None, the value\nwill be (count, None).   countCoverageByRangeBit([65, 66])\n{0: (2, 128)}  countCoverageByRangeBit([65, 66, 600])\n{0: (2, 128), 4: (1, 288)}  countCoverageByRangeBit([8192])\n{31: (1, 240)}  countCoverageByRangeBit([100000])\n{None: (1, None)}", 
            "title": "function countCoverageByRangeBit"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#_rangeminimums", 
            "text": "list() -  new empty list\nlist(iterable) -  new list initialized from iterable's items", 
            "title": "_rangeMinimums"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-_countcoverage", 
            "text": "_countCoverage([65, 66], byName=False)\n{0: (2, 128)}  _countCoverage([65, 66], byName=True)\n{'Basic Latin': (2, 128)}  _countCoverage([65, 66, 600], byName=True)\n{'IPA Extensions': (1, 96), 'Basic Latin': (2, 128)}  _countCoverage([8192], byName=True)\n{'General Punctuation': (1, 112)}  _countCoverage([8192], byName=False)\n{31: (1, 240)}", 
            "title": "function _countCoverage"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-_buildbybitdict", 
            "text": "", 
            "title": "function _buildByBitDict"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-unpackrangebits", 
            "text": "Given the ulUnicodeRange1, ulUnicodeRange2, ulUnicodeRange3, ulUnicodeRange4 values\nfrom the OS/2 table, return a set of bit numbers.   unpackRangeBits(0x0, 0x0, 0x0, 0x0)\nset([])  unpackRangeBits(0x1, 0x0, 0x0, 0x0)\nset([0])  unpackRangeBits(0x1, 0x1, 0x1, 0x1)\nset([0, 32, 64, 96])  unpackRangeBits(0xffffffff, 0x1, 0x2, 0x4)\nset([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 65, 98])", 
            "title": "function unpackRangeBits"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderanges/#function-getunicoderangebyname", 
            "text": "Given the name for a OS/2 unicode range, return a (bit, rangeMinimum, rangeMaximum) tuple.   getUnicodeRangeByName(\"Basic Latin\")\n(0, 0, 127)  getUnicodeRangeByName(\"Katakana Phonetic Extensions\")\n(50, 12784, 12799)  getUnicodeRangeByName(\"Bad Name\")\nTraceback (most recent call last):  ...\nKeyError: 'Bad Name'", 
            "title": "function getUnicodeRangeByName"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderangesdata/", 
            "text": "fonttoolbox.unicodes.unicoderangesdata\n\n\nFunctions\n\n\nunicodeRanges\n\n\nlist() -\n new empty list\nlist(iterable) -\n new list initialized from iterable's items\n\n\notScriptTags\n\n\ndict() -\n new empty dictionary\ndict(mapping) -\n new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -\n new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -\n new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "Unicoderangesdata"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderangesdata/#fonttoolboxunicodesunicoderangesdata", 
            "text": "", 
            "title": "fonttoolbox.unicodes.unicoderangesdata"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderangesdata/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderangesdata/#unicoderanges", 
            "text": "list() -  new empty list\nlist(iterable) -  new list initialized from iterable's items", 
            "title": "unicodeRanges"
        }, 
        {
            "location": "/pagebot/fonttoolbox/unicodes/unicoderangesdata/#otscripttags", 
            "text": "dict() -  new empty dictionary\ndict(mapping) -  new dictionary initialized from a mapping object's\n(key, value) pairs\ndict(iterable) -  new dictionary initialized as if via:\nd = {}\nfor k, v in iterable:\nd[k] = v\ndict(**kwargs) -  new dictionary initialized with the name=value pairs\nin the keyword argument list.  For example:  dict(one=1, two=2)", 
            "title": "otScriptTags"
        }, 
        {
            "location": "/pagebot/conditions/", 
            "text": "conditions\n\n\nClasses\n\n\n\n\npagebot.conditions.align\n\n\npagebot.conditions.condition\n\n\npagebot.conditions.floating\n\n\npagebot.conditions.flow\n\n\npagebot.conditions.score\n\n\n\n\nModules\n\n\nFunctions\n\n\nCenter2LeftSide\n\n\nMove center of e bounding box on parent left side.\n\n\nRight2RightSide\n\n\nAlign left of e bounding box on parent right side.\n\n\nFit\n\n\nFit the element on all sides of the parent paddings.\n\n\nFit2HeightSide\n\n\nOrigin2RightSide\n\n\nAlign origin of e bounding box horizontal between parent right side.\n\n\nShrink\n\n\nShrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.\n\n\nSolveBlock\n\n\nUsed as a condition in the sequence of conditions, to fix the block of child elements first.\n\n\nRight2CenterSides\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nOrigin2CenterSides\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Top\n\n\nAlign the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.\n\n\nOverflow2Next\n\n\nIf there is overflow in the element, then try to solve it.\n\n\nBottom2BottomSide\n\n\nAlign bottom of e bounding box on parent bottom side.\n\n\nFloat2RightBottom\n\n\nCenter2Right\n\n\nMove center of e bounding box on parent right margin.\n\n\nFloat2BottomLeft\n\n\nFloat2RightTop\n\n\nFloat2Right\n\n\nAlign the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.\n\n\nEqualizeFlow2Height\n\n\nTest if all elements in the flow the same height and/or same amount text lines.\n\n\nOrigin2TopSide\n\n\nAlign left of e bounding box horizontal between parent top side.\n\n\nRight2Center\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nLeft2Left\n\n\nAlign left of e bounding box on parent left margin.\n\n\nBottom2Middle\n\n\nAlign bottom of e bounding box on vertical middle between parent margins.\n\n\nFloat2LeftBottom\n\n\nTop2MiddleSides\n\n\nAlign top of e bounding box on vertical middle between parent sides.\n\n\nCenter2Left\n\n\nMove center of e bounding box on parent left margin.\n\n\nBottom2MiddleSides\n\n\nAlign right of e bounding box on vertical middle between parent sides.\n\n\nFloat2TopLeft\n\n\nShrink2BlockBottomSide\n\n\nShrink2BlockTopSide\n\n\nOrigin2Top\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Left\n\n\nAlign the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.\n\n\nFit2BottomSide\n\n\nOrigin2LeftSide\n\n\nAlign left of e bounding box horizontal between parent left side.\n\n\nBottom2Top\n\n\nAlign bottom of e bounding box on parent top margin.\n\n\nTop2Bottom\n\n\nAlign top of e bounding box on parent bottom margin.\n\n\nMiddle2BottomSide\n\n\nMove middle (vertical center) of e bounding box on parent bottom side.\n\n\nFloat2RightTopSides\n\n\nOrigin2BottomSide\n\n\nAlign origin of e bounding box horizontal between parent bottom side.\n\n\nShrink2BlockTop\n\n\nShrink2BlockLeftSide\n\n\nFloat2BottomLeftSides\n\n\nFloat2BottomSide\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.\n\n\nFit2Height\n\n\nFloat2BottomRight\n\n\nLeft2LeftSide\n\n\nAlign left of e bounding box on parent left side.\n\n\nOrigin2Left\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2LeftTopSides\n\n\nLeft2Right\n\n\nAlign left of e bounding box on parent right margin.\n\n\nOrigin2Right\n\n\nAlign origin of e bounding box to parent right margin.\n\n\nRight2Right\n\n\nAlign right of e bounding box to parent right margin.\n\n\nFloat2BottomRightSides\n\n\nShrink2BlockWidthSides\n\n\nFit2RightSide\n\n\nLeft2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFloat2Bottom\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.\n\n\nFit2WidthSides\n\n\nTop2TopSide\n\n\nAlign left of e bounding box on parent top side.\n\n\nFloat2LeftSide\n\n\nAlign the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.\n\n\nFit2LeftSide\n\n\nOrigin2MiddleSides\n\n\nAlign origin of e bounding box to vertical middle between parent sides.\n\n\nMiddle2TopSide\n\n\nMove middle (vertical center) of e bounding box on parent top side.\n\n\nMiddle2MiddleSides\n\n\nMiddle e bounding box vertical between parent vertical sides.\n\n\nCondition\n\n\nFloat2RightBottomSides\n\n\nShrink2BlockRight\n\n\nFit2Bottom\n\n\nMiddle2Bottom\n\n\nMove middle (vertical center) of e bounding box on parent bottom margin.\n\n\nTop2Top\n\n\nAlign top of e bounding box on parent top margin.\n\n\nTop2Middle\n\n\nAlign top of e bounding box vertical middle between parent margins.\n\n\nShrink2BlockLeft\n\n\nFloat2TopRightSides\n\n\nCenter2Center\n\n\nCenter e bounding box horizontal between parent margins.\n\n\nFloat2TopSide\n\n\nAlign the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.\n\n\ndivision\n\n\nOrigin2Bottom\n\n\nAlign origin of e bounding box to parent bottom margin.\n\n\nFloat2LeftTop\n\n\nBottom2Bottom\n\n\nAlign bottom of e bounding box to parent bottom margin.\n\n\nCenter2CenterSides\n\n\nCenter e bounding box horizontal between parent sides.\n\n\nFloat2TopRight\n\n\nMiddle2Middle\n\n\nMiddle (vertical center) e bounding box vertical between parent margins.\n\n\nCenter2RightSide\n\n\nMove center of e bounding box on parent right side.\n\n\nFit2Left\n\n\nShrink2BlockRightSide\n\n\nFloat2TopLeftSides\n\n\nFloat2RightSide\n\n\nAlign the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.\n\n\nLeft2CenterSides\n\n\nAlign left of e bounding box horizontal between parent sides.\n\n\nRight2Left\n\n\nAlign right of e bounding box to parent left margin.\n\n\nOrigin2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFit2Sides\n\n\nFit the element on all sides of the parent sides.\n\n\nFit2Right\n\n\nOrigin2Middle\n\n\nAlign origin of e bounding box to vertical middle between parent margin.\n\n\nFloat2LeftBottomSides\n\n\nFit2Top\n\n\nShrink2BlockHeightSide\n\n\nMiddle2Top\n\n\nMove middle (vertical center) of e bounding box on parent top margin.\n\n\nShrink2BlockBottom\n\n\nFit2Width\n\n\nFit2TopSide\n\n\nShrink2BlockSides\n\n\nShirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Home"
        }, 
        {
            "location": "/pagebot/conditions/#conditions", 
            "text": "", 
            "title": "conditions"
        }, 
        {
            "location": "/pagebot/conditions/#classes", 
            "text": "pagebot.conditions.align  pagebot.conditions.condition  pagebot.conditions.floating  pagebot.conditions.flow  pagebot.conditions.score", 
            "title": "Classes"
        }, 
        {
            "location": "/pagebot/conditions/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/pagebot/conditions/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/conditions/#center2leftside", 
            "text": "Move center of e bounding box on parent left side.", 
            "title": "Center2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/#right2rightside", 
            "text": "Align left of e bounding box on parent right side.", 
            "title": "Right2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/#fit", 
            "text": "Fit the element on all sides of the parent paddings.", 
            "title": "Fit"
        }, 
        {
            "location": "/pagebot/conditions/#fit2heightside", 
            "text": "", 
            "title": "Fit2HeightSide"
        }, 
        {
            "location": "/pagebot/conditions/#origin2rightside", 
            "text": "Align origin of e bounding box horizontal between parent right side.", 
            "title": "Origin2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/#shrink", 
            "text": "Shrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.", 
            "title": "Shrink"
        }, 
        {
            "location": "/pagebot/conditions/#solveblock", 
            "text": "Used as a condition in the sequence of conditions, to fix the block of child elements first.", 
            "title": "SolveBlock"
        }, 
        {
            "location": "/pagebot/conditions/#right2centersides", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/#origin2centersides", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/#float2top", 
            "text": "Align the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Top"
        }, 
        {
            "location": "/pagebot/conditions/#overflow2next", 
            "text": "If there is overflow in the element, then try to solve it.", 
            "title": "Overflow2Next"
        }, 
        {
            "location": "/pagebot/conditions/#bottom2bottomside", 
            "text": "Align bottom of e bounding box on parent bottom side.", 
            "title": "Bottom2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/#float2rightbottom", 
            "text": "", 
            "title": "Float2RightBottom"
        }, 
        {
            "location": "/pagebot/conditions/#center2right", 
            "text": "Move center of e bounding box on parent right margin.", 
            "title": "Center2Right"
        }, 
        {
            "location": "/pagebot/conditions/#float2bottomleft", 
            "text": "", 
            "title": "Float2BottomLeft"
        }, 
        {
            "location": "/pagebot/conditions/#float2righttop", 
            "text": "", 
            "title": "Float2RightTop"
        }, 
        {
            "location": "/pagebot/conditions/#float2right", 
            "text": "Align the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Right"
        }, 
        {
            "location": "/pagebot/conditions/#equalizeflow2height", 
            "text": "Test if all elements in the flow the same height and/or same amount text lines.", 
            "title": "EqualizeFlow2Height"
        }, 
        {
            "location": "/pagebot/conditions/#origin2topside", 
            "text": "Align left of e bounding box horizontal between parent top side.", 
            "title": "Origin2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/#right2center", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2Center"
        }, 
        {
            "location": "/pagebot/conditions/#left2left", 
            "text": "Align left of e bounding box on parent left margin.", 
            "title": "Left2Left"
        }, 
        {
            "location": "/pagebot/conditions/#bottom2middle", 
            "text": "Align bottom of e bounding box on vertical middle between parent margins.", 
            "title": "Bottom2Middle"
        }, 
        {
            "location": "/pagebot/conditions/#float2leftbottom", 
            "text": "", 
            "title": "Float2LeftBottom"
        }, 
        {
            "location": "/pagebot/conditions/#top2middlesides", 
            "text": "Align top of e bounding box on vertical middle between parent sides.", 
            "title": "Top2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/#center2left", 
            "text": "Move center of e bounding box on parent left margin.", 
            "title": "Center2Left"
        }, 
        {
            "location": "/pagebot/conditions/#bottom2middlesides", 
            "text": "Align right of e bounding box on vertical middle between parent sides.", 
            "title": "Bottom2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/#float2topleft", 
            "text": "", 
            "title": "Float2TopLeft"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockbottomside", 
            "text": "", 
            "title": "Shrink2BlockBottomSide"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blocktopside", 
            "text": "", 
            "title": "Shrink2BlockTopSide"
        }, 
        {
            "location": "/pagebot/conditions/#origin2top", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Top"
        }, 
        {
            "location": "/pagebot/conditions/#float2left", 
            "text": "Align the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Left"
        }, 
        {
            "location": "/pagebot/conditions/#fit2bottomside", 
            "text": "", 
            "title": "Fit2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/#origin2leftside", 
            "text": "Align left of e bounding box horizontal between parent left side.", 
            "title": "Origin2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/#bottom2top", 
            "text": "Align bottom of e bounding box on parent top margin.", 
            "title": "Bottom2Top"
        }, 
        {
            "location": "/pagebot/conditions/#top2bottom", 
            "text": "Align top of e bounding box on parent bottom margin.", 
            "title": "Top2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/#middle2bottomside", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom side.", 
            "title": "Middle2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/#float2righttopsides", 
            "text": "", 
            "title": "Float2RightTopSides"
        }, 
        {
            "location": "/pagebot/conditions/#origin2bottomside", 
            "text": "Align origin of e bounding box horizontal between parent bottom side.", 
            "title": "Origin2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blocktop", 
            "text": "", 
            "title": "Shrink2BlockTop"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockleftside", 
            "text": "", 
            "title": "Shrink2BlockLeftSide"
        }, 
        {
            "location": "/pagebot/conditions/#float2bottomleftsides", 
            "text": "", 
            "title": "Float2BottomLeftSides"
        }, 
        {
            "location": "/pagebot/conditions/#float2bottomside", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/#fit2height", 
            "text": "", 
            "title": "Fit2Height"
        }, 
        {
            "location": "/pagebot/conditions/#float2bottomright", 
            "text": "", 
            "title": "Float2BottomRight"
        }, 
        {
            "location": "/pagebot/conditions/#left2leftside", 
            "text": "Align left of e bounding box on parent left side.", 
            "title": "Left2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/#origin2left", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Left"
        }, 
        {
            "location": "/pagebot/conditions/#float2lefttopsides", 
            "text": "", 
            "title": "Float2LeftTopSides"
        }, 
        {
            "location": "/pagebot/conditions/#left2right", 
            "text": "Align left of e bounding box on parent right margin.", 
            "title": "Left2Right"
        }, 
        {
            "location": "/pagebot/conditions/#origin2right", 
            "text": "Align origin of e bounding box to parent right margin.", 
            "title": "Origin2Right"
        }, 
        {
            "location": "/pagebot/conditions/#right2right", 
            "text": "Align right of e bounding box to parent right margin.", 
            "title": "Right2Right"
        }, 
        {
            "location": "/pagebot/conditions/#float2bottomrightsides", 
            "text": "", 
            "title": "Float2BottomRightSides"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockwidthsides", 
            "text": "", 
            "title": "Shrink2BlockWidthSides"
        }, 
        {
            "location": "/pagebot/conditions/#fit2rightside", 
            "text": "", 
            "title": "Fit2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/#left2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Left2Center"
        }, 
        {
            "location": "/pagebot/conditions/#float2bottom", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/#fit2widthsides", 
            "text": "", 
            "title": "Fit2WidthSides"
        }, 
        {
            "location": "/pagebot/conditions/#top2topside", 
            "text": "Align left of e bounding box on parent top side.", 
            "title": "Top2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/#float2leftside", 
            "text": "Align the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/#fit2leftside", 
            "text": "", 
            "title": "Fit2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/#origin2middlesides", 
            "text": "Align origin of e bounding box to vertical middle between parent sides.", 
            "title": "Origin2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/#middle2topside", 
            "text": "Move middle (vertical center) of e bounding box on parent top side.", 
            "title": "Middle2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/#middle2middlesides", 
            "text": "Middle e bounding box vertical between parent vertical sides.", 
            "title": "Middle2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/#condition", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/conditions/#float2rightbottomsides", 
            "text": "", 
            "title": "Float2RightBottomSides"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockright", 
            "text": "", 
            "title": "Shrink2BlockRight"
        }, 
        {
            "location": "/pagebot/conditions/#fit2bottom", 
            "text": "", 
            "title": "Fit2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/#middle2bottom", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom margin.", 
            "title": "Middle2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/#top2top", 
            "text": "Align top of e bounding box on parent top margin.", 
            "title": "Top2Top"
        }, 
        {
            "location": "/pagebot/conditions/#top2middle", 
            "text": "Align top of e bounding box vertical middle between parent margins.", 
            "title": "Top2Middle"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockleft", 
            "text": "", 
            "title": "Shrink2BlockLeft"
        }, 
        {
            "location": "/pagebot/conditions/#float2toprightsides", 
            "text": "", 
            "title": "Float2TopRightSides"
        }, 
        {
            "location": "/pagebot/conditions/#center2center", 
            "text": "Center e bounding box horizontal between parent margins.", 
            "title": "Center2Center"
        }, 
        {
            "location": "/pagebot/conditions/#float2topside", 
            "text": "Align the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/conditions/#origin2bottom", 
            "text": "Align origin of e bounding box to parent bottom margin.", 
            "title": "Origin2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/#float2lefttop", 
            "text": "", 
            "title": "Float2LeftTop"
        }, 
        {
            "location": "/pagebot/conditions/#bottom2bottom", 
            "text": "Align bottom of e bounding box to parent bottom margin.", 
            "title": "Bottom2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/#center2centersides", 
            "text": "Center e bounding box horizontal between parent sides.", 
            "title": "Center2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/#float2topright", 
            "text": "", 
            "title": "Float2TopRight"
        }, 
        {
            "location": "/pagebot/conditions/#middle2middle", 
            "text": "Middle (vertical center) e bounding box vertical between parent margins.", 
            "title": "Middle2Middle"
        }, 
        {
            "location": "/pagebot/conditions/#center2rightside", 
            "text": "Move center of e bounding box on parent right side.", 
            "title": "Center2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/#fit2left", 
            "text": "", 
            "title": "Fit2Left"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockrightside", 
            "text": "", 
            "title": "Shrink2BlockRightSide"
        }, 
        {
            "location": "/pagebot/conditions/#float2topleftsides", 
            "text": "", 
            "title": "Float2TopLeftSides"
        }, 
        {
            "location": "/pagebot/conditions/#float2rightside", 
            "text": "Align the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/#left2centersides", 
            "text": "Align left of e bounding box horizontal between parent sides.", 
            "title": "Left2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/#right2left", 
            "text": "Align right of e bounding box to parent left margin.", 
            "title": "Right2Left"
        }, 
        {
            "location": "/pagebot/conditions/#origin2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Center"
        }, 
        {
            "location": "/pagebot/conditions/#fit2sides", 
            "text": "Fit the element on all sides of the parent sides.", 
            "title": "Fit2Sides"
        }, 
        {
            "location": "/pagebot/conditions/#fit2right", 
            "text": "", 
            "title": "Fit2Right"
        }, 
        {
            "location": "/pagebot/conditions/#origin2middle", 
            "text": "Align origin of e bounding box to vertical middle between parent margin.", 
            "title": "Origin2Middle"
        }, 
        {
            "location": "/pagebot/conditions/#float2leftbottomsides", 
            "text": "", 
            "title": "Float2LeftBottomSides"
        }, 
        {
            "location": "/pagebot/conditions/#fit2top", 
            "text": "", 
            "title": "Fit2Top"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockheightside", 
            "text": "", 
            "title": "Shrink2BlockHeightSide"
        }, 
        {
            "location": "/pagebot/conditions/#middle2top", 
            "text": "Move middle (vertical center) of e bounding box on parent top margin.", 
            "title": "Middle2Top"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blockbottom", 
            "text": "", 
            "title": "Shrink2BlockBottom"
        }, 
        {
            "location": "/pagebot/conditions/#fit2width", 
            "text": "", 
            "title": "Fit2Width"
        }, 
        {
            "location": "/pagebot/conditions/#fit2topside", 
            "text": "", 
            "title": "Fit2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/#shrink2blocksides", 
            "text": "Shirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Shrink2BlockSides"
        }, 
        {
            "location": "/pagebot/conditions/align/", 
            "text": "conditions.align\n\n\nFunctions\n\n\nCenter2LeftSide\n\n\nMove center of e bounding box on parent left side.\n\n\nLeft2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nRight2RightSide\n\n\nAlign left of e bounding box on parent right side.\n\n\nFit\n\n\nFit the element on all sides of the parent paddings.\n\n\nOrigin2Bottom\n\n\nAlign origin of e bounding box to parent bottom margin.\n\n\nFit2BottomSide\n\n\nTop2TopSide\n\n\nAlign left of e bounding box on parent top side.\n\n\nLeft2LeftSide\n\n\nAlign left of e bounding box on parent left side.\n\n\nFit2LeftSide\n\n\nBottom2Top\n\n\nAlign bottom of e bounding box on parent top margin.\n\n\nShrink2BlockHeightSide\n\n\nTop2Bottom\n\n\nAlign top of e bounding box on parent bottom margin.\n\n\nTop2MiddleSides\n\n\nAlign top of e bounding box on vertical middle between parent sides.\n\n\nBottom2Bottom\n\n\nAlign bottom of e bounding box to parent bottom margin.\n\n\nCenter2CenterSides\n\n\nCenter e bounding box horizontal between parent sides.\n\n\nCenter2Right\n\n\nMove center of e bounding box on parent right margin.\n\n\nShrink\n\n\nShrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.\n\n\nSolveBlock\n\n\nUsed as a condition in the sequence of conditions, to fix the block of child elements first.\n\n\nOrigin2MiddleSides\n\n\nAlign origin of e bounding box to vertical middle between parent sides.\n\n\nRight2CenterSides\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nOrigin2CenterSides\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nMiddle2Middle\n\n\nMiddle (vertical center) e bounding box vertical between parent margins.\n\n\nCenter2RightSide\n\n\nMove center of e bounding box on parent right side.\n\n\nTop2Top\n\n\nAlign top of e bounding box on parent top margin.\n\n\nCenter2Left\n\n\nMove center of e bounding box on parent left margin.\n\n\nBottom2BottomSide\n\n\nAlign bottom of e bounding box on parent bottom side.\n\n\nMiddle2MiddleSides\n\n\nMiddle e bounding box vertical between parent vertical sides.\n\n\nFit2Left\n\n\nLeft2Right\n\n\nAlign left of e bounding box on parent right margin.\n\n\nMiddle2BottomSide\n\n\nMove middle (vertical center) of e bounding box on parent bottom side.\n\n\nOrigin2BottomSide\n\n\nAlign origin of e bounding box horizontal between parent bottom side.\n\n\nShrink2BlockTop\n\n\nCondition\n\n\nShrink2BlockTopSide\n\n\nShrink2BlockRightSide\n\n\ndivision\n\n\nShrink2BlockLeftSide\n\n\nOrigin2Top\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nOrigin2TopSide\n\n\nAlign left of e bounding box horizontal between parent top side.\n\n\nShrink2BlockRight\n\n\nOrigin2Center\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nRight2Center\n\n\nAlign right of e bounding box horizontal between parent margins.\n\n\nFit2WidthSides\n\n\nRight2Left\n\n\nAlign right of e bounding box to parent left margin.\n\n\nFit2Bottom\n\n\nMiddle2TopSide\n\n\nMove middle (vertical center) of e bounding box on parent top side.\n\n\nFit2RightSide\n\n\nFit2Sides\n\n\nFit the element on all sides of the parent sides.\n\n\nBottom2Middle\n\n\nAlign bottom of e bounding box on vertical middle between parent margins.\n\n\nFit2Right\n\n\nFit2HeightSide\n\n\nOrigin2RightSide\n\n\nAlign origin of e bounding box horizontal between parent right side.\n\n\nOrigin2Middle\n\n\nAlign origin of e bounding box to vertical middle between parent margin.\n\n\nLeft2CenterSides\n\n\nAlign left of e bounding box horizontal between parent sides.\n\n\nMiddle2Bottom\n\n\nMove middle (vertical center) of e bounding box on parent bottom margin.\n\n\nOrigin2Left\n\n\nAlign left of e bounding box horizontal between parent margins.\n\n\nFit2Top\n\n\nOrigin2LeftSide\n\n\nAlign left of e bounding box horizontal between parent left side.\n\n\nTop2Middle\n\n\nAlign top of e bounding box vertical middle between parent margins.\n\n\nShrink2BlockLeft\n\n\nOrigin2Right\n\n\nAlign origin of e bounding box to parent right margin.\n\n\nBottom2MiddleSides\n\n\nAlign right of e bounding box on vertical middle between parent sides.\n\n\nShrink2BlockBottomSide\n\n\nFit2Height\n\n\nMiddle2Top\n\n\nMove middle (vertical center) of e bounding box on parent top margin.\n\n\nCenter2Center\n\n\nCenter e bounding box horizontal between parent margins.\n\n\nRight2Right\n\n\nAlign right of e bounding box to parent right margin.\n\n\nShrink2BlockBottom\n\n\nFit2Width\n\n\nFit2TopSide\n\n\nShrink2BlockWidthSides\n\n\nLeft2Left\n\n\nAlign left of e bounding box on parent left margin.\n\n\nShrink2BlockSides\n\n\nShirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Align"
        }, 
        {
            "location": "/pagebot/conditions/align/#conditionsalign", 
            "text": "", 
            "title": "conditions.align"
        }, 
        {
            "location": "/pagebot/conditions/align/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/conditions/align/#center2leftside", 
            "text": "Move center of e bounding box on parent left side.", 
            "title": "Center2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#left2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Left2Center"
        }, 
        {
            "location": "/pagebot/conditions/align/#right2rightside", 
            "text": "Align left of e bounding box on parent right side.", 
            "title": "Right2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit", 
            "text": "Fit the element on all sides of the parent paddings.", 
            "title": "Fit"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2bottom", 
            "text": "Align origin of e bounding box to parent bottom margin.", 
            "title": "Origin2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2bottomside", 
            "text": "", 
            "title": "Fit2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#top2topside", 
            "text": "Align left of e bounding box on parent top side.", 
            "title": "Top2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#left2leftside", 
            "text": "Align left of e bounding box on parent left side.", 
            "title": "Left2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2leftside", 
            "text": "", 
            "title": "Fit2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#bottom2top", 
            "text": "Align bottom of e bounding box on parent top margin.", 
            "title": "Bottom2Top"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockheightside", 
            "text": "", 
            "title": "Shrink2BlockHeightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#top2bottom", 
            "text": "Align top of e bounding box on parent bottom margin.", 
            "title": "Top2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/align/#top2middlesides", 
            "text": "Align top of e bounding box on vertical middle between parent sides.", 
            "title": "Top2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#bottom2bottom", 
            "text": "Align bottom of e bounding box to parent bottom margin.", 
            "title": "Bottom2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/align/#center2centersides", 
            "text": "Center e bounding box horizontal between parent sides.", 
            "title": "Center2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#center2right", 
            "text": "Move center of e bounding box on parent right margin.", 
            "title": "Center2Right"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink", 
            "text": "Shrink the element on all sides around the margins of the enclose child elements.\n    There should be at least one child element for this to executed.", 
            "title": "Shrink"
        }, 
        {
            "location": "/pagebot/conditions/align/#solveblock", 
            "text": "Used as a condition in the sequence of conditions, to fix the block of child elements first.", 
            "title": "SolveBlock"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2middlesides", 
            "text": "Align origin of e bounding box to vertical middle between parent sides.", 
            "title": "Origin2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#right2centersides", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2centersides", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#middle2middle", 
            "text": "Middle (vertical center) e bounding box vertical between parent margins.", 
            "title": "Middle2Middle"
        }, 
        {
            "location": "/pagebot/conditions/align/#center2rightside", 
            "text": "Move center of e bounding box on parent right side.", 
            "title": "Center2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#top2top", 
            "text": "Align top of e bounding box on parent top margin.", 
            "title": "Top2Top"
        }, 
        {
            "location": "/pagebot/conditions/align/#center2left", 
            "text": "Move center of e bounding box on parent left margin.", 
            "title": "Center2Left"
        }, 
        {
            "location": "/pagebot/conditions/align/#bottom2bottomside", 
            "text": "Align bottom of e bounding box on parent bottom side.", 
            "title": "Bottom2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#middle2middlesides", 
            "text": "Middle e bounding box vertical between parent vertical sides.", 
            "title": "Middle2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2left", 
            "text": "", 
            "title": "Fit2Left"
        }, 
        {
            "location": "/pagebot/conditions/align/#left2right", 
            "text": "Align left of e bounding box on parent right margin.", 
            "title": "Left2Right"
        }, 
        {
            "location": "/pagebot/conditions/align/#middle2bottomside", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom side.", 
            "title": "Middle2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2bottomside", 
            "text": "Align origin of e bounding box horizontal between parent bottom side.", 
            "title": "Origin2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blocktop", 
            "text": "", 
            "title": "Shrink2BlockTop"
        }, 
        {
            "location": "/pagebot/conditions/align/#condition", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blocktopside", 
            "text": "", 
            "title": "Shrink2BlockTopSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockrightside", 
            "text": "", 
            "title": "Shrink2BlockRightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockleftside", 
            "text": "", 
            "title": "Shrink2BlockLeftSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2top", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Top"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2topside", 
            "text": "Align left of e bounding box horizontal between parent top side.", 
            "title": "Origin2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockright", 
            "text": "", 
            "title": "Shrink2BlockRight"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2center", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Center"
        }, 
        {
            "location": "/pagebot/conditions/align/#right2center", 
            "text": "Align right of e bounding box horizontal between parent margins.", 
            "title": "Right2Center"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2widthsides", 
            "text": "", 
            "title": "Fit2WidthSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#right2left", 
            "text": "Align right of e bounding box to parent left margin.", 
            "title": "Right2Left"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2bottom", 
            "text": "", 
            "title": "Fit2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/align/#middle2topside", 
            "text": "Move middle (vertical center) of e bounding box on parent top side.", 
            "title": "Middle2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2rightside", 
            "text": "", 
            "title": "Fit2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2sides", 
            "text": "Fit the element on all sides of the parent sides.", 
            "title": "Fit2Sides"
        }, 
        {
            "location": "/pagebot/conditions/align/#bottom2middle", 
            "text": "Align bottom of e bounding box on vertical middle between parent margins.", 
            "title": "Bottom2Middle"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2right", 
            "text": "", 
            "title": "Fit2Right"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2heightside", 
            "text": "", 
            "title": "Fit2HeightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2rightside", 
            "text": "Align origin of e bounding box horizontal between parent right side.", 
            "title": "Origin2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2middle", 
            "text": "Align origin of e bounding box to vertical middle between parent margin.", 
            "title": "Origin2Middle"
        }, 
        {
            "location": "/pagebot/conditions/align/#left2centersides", 
            "text": "Align left of e bounding box horizontal between parent sides.", 
            "title": "Left2CenterSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#middle2bottom", 
            "text": "Move middle (vertical center) of e bounding box on parent bottom margin.", 
            "title": "Middle2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2left", 
            "text": "Align left of e bounding box horizontal between parent margins.", 
            "title": "Origin2Left"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2top", 
            "text": "", 
            "title": "Fit2Top"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2leftside", 
            "text": "Align left of e bounding box horizontal between parent left side.", 
            "title": "Origin2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#top2middle", 
            "text": "Align top of e bounding box vertical middle between parent margins.", 
            "title": "Top2Middle"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockleft", 
            "text": "", 
            "title": "Shrink2BlockLeft"
        }, 
        {
            "location": "/pagebot/conditions/align/#origin2right", 
            "text": "Align origin of e bounding box to parent right margin.", 
            "title": "Origin2Right"
        }, 
        {
            "location": "/pagebot/conditions/align/#bottom2middlesides", 
            "text": "Align right of e bounding box on vertical middle between parent sides.", 
            "title": "Bottom2MiddleSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockbottomside", 
            "text": "", 
            "title": "Shrink2BlockBottomSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2height", 
            "text": "", 
            "title": "Fit2Height"
        }, 
        {
            "location": "/pagebot/conditions/align/#middle2top", 
            "text": "Move middle (vertical center) of e bounding box on parent top margin.", 
            "title": "Middle2Top"
        }, 
        {
            "location": "/pagebot/conditions/align/#center2center", 
            "text": "Center e bounding box horizontal between parent margins.", 
            "title": "Center2Center"
        }, 
        {
            "location": "/pagebot/conditions/align/#right2right", 
            "text": "Align right of e bounding box to parent right margin.", 
            "title": "Right2Right"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockbottom", 
            "text": "", 
            "title": "Shrink2BlockBottom"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2width", 
            "text": "", 
            "title": "Fit2Width"
        }, 
        {
            "location": "/pagebot/conditions/align/#fit2topside", 
            "text": "", 
            "title": "Fit2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blockwidthsides", 
            "text": "", 
            "title": "Shrink2BlockWidthSides"
        }, 
        {
            "location": "/pagebot/conditions/align/#left2left", 
            "text": "Align left of e bounding box on parent left margin.", 
            "title": "Left2Left"
        }, 
        {
            "location": "/pagebot/conditions/align/#shrink2blocksides", 
            "text": "Shirink the element on all sides of the children sides. There needs to be at least\n    one child element.", 
            "title": "Shrink2BlockSides"
        }, 
        {
            "location": "/pagebot/conditions/condition/", 
            "text": "conditions.condition\n\n\nFunctions\n\n\nCondition", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/conditions/condition/#conditionscondition", 
            "text": "", 
            "title": "conditions.condition"
        }, 
        {
            "location": "/pagebot/conditions/condition/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/conditions/condition/#condition", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/conditions/floating/", 
            "text": "conditions.floating\n\n\nFunctions\n\n\nFloat2TopSide\n\n\nAlign the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.\n\n\nFloat2RightTop\n\n\nFloat2Left\n\n\nAlign the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.\n\n\nFloat2RightTopSides\n\n\nFloat2LeftTop\n\n\nFloat2Bottom\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.\n\n\nFloat2TopRight\n\n\nFloat2Top\n\n\nAlign the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.\n\n\nFloat2RightBottomSides\n\n\nFloat2TopLeftSides\n\n\nFloat2RightBottom\n\n\nFloat2BottomLeft\n\n\nCondition\n\n\ndivision\n\n\nFloat2Right\n\n\nAlign the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.\n\n\nFloat2BottomLeftSides\n\n\nFloat2RightSide\n\n\nAlign the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.\n\n\nFloat2BottomSide\n\n\nAlign the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.\n\n\nFloat2LeftBottom\n\n\nFloat2LeftBottomSides\n\n\nFloat2BottomRight\n\n\nFloat2LeftSide\n\n\nAlign the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.\n\n\nFloat2LeftTopSides\n\n\nFloat2TopLeft\n\n\nFloat2BottomRightSides\n\n\nFloat2TopRightSides", 
            "title": "Floating"
        }, 
        {
            "location": "/pagebot/conditions/floating/#conditionsfloating", 
            "text": "", 
            "title": "conditions.floating"
        }, 
        {
            "location": "/pagebot/conditions/floating/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2topside", 
            "text": "Align the element.top with max of all placed element.bottom or parent.topSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2TopSide"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2righttop", 
            "text": "", 
            "title": "Float2RightTop"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2left", 
            "text": "Align the element.left with max of all placed element.right or parent.left.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Left"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2righttopsides", 
            "text": "", 
            "title": "Float2RightTopSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2lefttop", 
            "text": "", 
            "title": "Float2LeftTop"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2bottom", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottom.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Bottom"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2topright", 
            "text": "", 
            "title": "Float2TopRight"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2top", 
            "text": "Align the element.top with max of all placed element.bottom or parent.top.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Top"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2rightbottomsides", 
            "text": "", 
            "title": "Float2RightBottomSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2topleftsides", 
            "text": "", 
            "title": "Float2TopLeftSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2rightbottom", 
            "text": "", 
            "title": "Float2RightBottom"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2bottomleft", 
            "text": "", 
            "title": "Float2BottomLeft"
        }, 
        {
            "location": "/pagebot/conditions/floating/#condition", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/conditions/floating/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2right", 
            "text": "Align the element.right with min of all placed element.left or parent.right.\n    Positioning includes the margin of all elements.", 
            "title": "Float2Right"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2bottomleftsides", 
            "text": "", 
            "title": "Float2BottomLeftSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2rightside", 
            "text": "Align the element.right with min of all placed element.left or parent.rightSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2RightSide"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2bottomside", 
            "text": "Align the element.bottom with max of all placed element.top or parent.bottomSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2BottomSide"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2leftbottom", 
            "text": "", 
            "title": "Float2LeftBottom"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2leftbottomsides", 
            "text": "", 
            "title": "Float2LeftBottomSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2bottomright", 
            "text": "", 
            "title": "Float2BottomRight"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2leftside", 
            "text": "Align the element.left with max of all placed element.right or parent.leftSide.\n    Positioning includes the margin of all elements.", 
            "title": "Float2LeftSide"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2lefttopsides", 
            "text": "", 
            "title": "Float2LeftTopSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2topleft", 
            "text": "", 
            "title": "Float2TopLeft"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2bottomrightsides", 
            "text": "", 
            "title": "Float2BottomRightSides"
        }, 
        {
            "location": "/pagebot/conditions/floating/#float2toprightsides", 
            "text": "", 
            "title": "Float2TopRightSides"
        }, 
        {
            "location": "/pagebot/conditions/flow/", 
            "text": "conditions.flow\n\n\nFunctions\n\n\ndivision\n\n\nOverflow2Next\n\n\nIf there is overflow in the element, then try to solve it.\n\n\nEqualizeFlow2Height\n\n\nTest if all elements in the flow the same height and/or same amount text lines.\n\n\nCondition", 
            "title": "Flow"
        }, 
        {
            "location": "/pagebot/conditions/flow/#conditionsflow", 
            "text": "", 
            "title": "conditions.flow"
        }, 
        {
            "location": "/pagebot/conditions/flow/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/conditions/flow/#division", 
            "text": "", 
            "title": "division"
        }, 
        {
            "location": "/pagebot/conditions/flow/#overflow2next", 
            "text": "If there is overflow in the element, then try to solve it.", 
            "title": "Overflow2Next"
        }, 
        {
            "location": "/pagebot/conditions/flow/#equalizeflow2height", 
            "text": "Test if all elements in the flow the same height and/or same amount text lines.", 
            "title": "EqualizeFlow2Height"
        }, 
        {
            "location": "/pagebot/conditions/flow/#condition", 
            "text": "", 
            "title": "Condition"
        }, 
        {
            "location": "/pagebot/conditions/score/", 
            "text": "conditions.score\n\n\nFunctions\n\n\nScore", 
            "title": "Score"
        }, 
        {
            "location": "/pagebot/conditions/score/#conditionsscore", 
            "text": "", 
            "title": "conditions.score"
        }, 
        {
            "location": "/pagebot/conditions/score/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/pagebot/conditions/score/#score", 
            "text": "", 
            "title": "Score"
        }
    ]
}